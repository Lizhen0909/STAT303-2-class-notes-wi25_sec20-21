[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science II with python (Class notes)",
    "section": "",
    "text": "Preface\nThese are class notes for the course STAT303-2. This is not the course text-book. You are required to read the relevant sections of the book as mentioned on the course website.\nThe course notes are currently being written, and will continue to being developed as the course progresses (just like the course textbook last quarter). Please report any typos / mistakes / inconsistencies / issues with the class notes / class presentations in your comments here. Thank you!"
  },
  {
    "objectID": "Lec1_SimpleLinearRegression.html#simple-linear-regression",
    "href": "Lec1_SimpleLinearRegression.html#simple-linear-regression",
    "title": "1  Simple Linear Regression",
    "section": "1.1 Simple Linear Regression",
    "text": "1.1 Simple Linear Regression\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a simple linear regression model that predicts car price based on engine size. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\n# We are reading training data ONLY at this point.\n# Test data is already separated in another file\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv') # Predictors\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv') # Response\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990\n\n\n\n\n\n\n\n\n# Let's create the model\n    \n# ols stands for Ordinary Least Squares - the name of the algorithm that optimizes Linear Regression models\n\n# data input needs the dataframe that has the predictor and the response\n# formula input needs to:\n    # be a string\n    # have the following syntax: \"response~predictor\"\n    \n# Using engineSize to predict price\nols_object = smf.ols(formula = 'price~engineSize', data = train)\n\n\n#Using the fit() function of the 'ols' class to fit the model, i.e., train the model\nmodel = ols_object.fit()\n\n\n#Printing model summary which contains among other things, the model coefficients\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.390\n\n\nModel:\nOLS\nAdj. R-squared:\n0.390\n\n\nMethod:\nLeast Squares\nF-statistic:\n3177.\n\n\nDate:\nMon, 08 Jan 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n10:06:15\nLog-Likelihood:\n-53949.\n\n\nNo. Observations:\n4960\nAIC:\n1.079e+05\n\n\nDf Residuals:\n4958\nBIC:\n1.079e+05\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-4122.0357\n522.260\n-7.893\n0.000\n-5145.896\n-3098.176\n\n\nengineSize\n1.299e+04\n230.450\n56.361\n0.000\n1.25e+04\n1.34e+04\n\n\n\n\n\n\nOmnibus:\n1271.986\nDurbin-Watson:\n0.517\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n6490.719\n\n\nSkew:\n1.137\nProb(JB):\n0.00\n\n\nKurtosis:\n8.122\nCond. No.\n7.64\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe model equation is: car price = -4122.0357 + 12990 * engineSize\nThe coefficients can also be returned directly usign the params attribute of the model objeas folows.\n\nmodel.params\n\nIntercept     -4122.035744\nengineSize    12988.281021\ndtype: float64\n\n\nVisualize the regression line\n\nsns.regplot(x = 'engineSize', y = 'price', data = train, color = 'orange',line_kws={\"color\": \"red\"})\nplt.xlim(-1,7)\n#Note that some of the engineSize values are 0. They are incorrect, and should ideally be imputed before developing the model.\n\n(-1.0, 7.0)\n\n\n\n\n\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs its values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction doesn’t look too good. This is because we are just using one predictor - engine size. We can probably improve the model by adding more predictors when we learn multiple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n12995.1064515487\n\n\nThe root mean squared error in predicting car price is around $13k.\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n12810.109175214136\n\n\nThe residual standard error on the training data is close to the RMSE on the test data. This shows that the performance of the model on unknown data is comparable to its performance on known data. This implies that the model is not overfitting, which is good! In case we overfit a model on the training data, its performance on unknown data is likely to be worse than that on the training data.\nFind the confidence and prediction intervals of the predicted car price\n\n#Using the get_prediction() function associated with the 'model' object to get the intervals\nintervals = model.get_prediction(testf)\n\n\n#The function requires specifying alpha (probability of Type 1 error) instead of the confidence level to get the intervals\nintervals.summary_frame(alpha=0.05)\n\n\n\n\n\n\n\n\nmean\nmean_se\nmean_ci_lower\nmean_ci_upper\nobs_ci_lower\nobs_ci_upper\n\n\n\n\n0\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n1\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n2\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n3\n8866.245277\n316.580850\n8245.606701\n9486.883853\n-16254.905974\n33987.396528\n\n\n4\n47831.088340\n468.949360\n46911.740050\n48750.436631\n22700.782946\n72961.393735\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2667\n47831.088340\n468.949360\n46911.740050\n48750.436631\n22700.782946\n72961.393735\n\n\n2668\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n2669\n8866.245277\n316.580850\n8245.606701\n9486.883853\n-16254.905974\n33987.396528\n\n\n2670\n21854.526298\n184.135754\n21493.538727\n22215.513869\n-3261.551421\n46970.604017\n\n\n2671\n21854.526298\n184.135754\n21493.538727\n22215.513869\n-3261.551421\n46970.604017\n\n\n\n\n2672 rows × 6 columns\n\n\n\nShow the regression line predicting car price based on engine size for test data. Also show the confidence and prediction intervals for the car price.\n\ninterval_table = intervals.summary_frame(alpha=0.05)\n\n\nsns.scatterplot(x = testf.engineSize, y = pred_price,color = 'orange', s = 10)\nsns.lineplot(x = testf.engineSize, y = pred_price, color = 'red')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_lower, color = 'blue')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_upper, color = 'blue',label='_nolegend_')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_lower, color = 'green')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_upper, color = 'green')\nplt.legend(labels=[\"Regression line\",\"Confidence interval\", \"Prediction interval\"])\n\n&lt;matplotlib.legend.Legend at 0x26a3a32c550&gt;"
  },
  {
    "objectID": "Lec2_MultipleLinearRegression.html#multiple-linear-regression",
    "href": "Lec2_MultipleLinearRegression.html#multiple-linear-regression",
    "title": "2  Multiple Linear Regression",
    "section": "2.1 Multiple Linear Regression",
    "text": "2.1 Multiple Linear Regression\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a multiple linear regression model that predicts car price based on engine size, year, mileage, and mpg. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990\n\n\n\n\n\n\n\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.660\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n2410.\n\n\nDate:\nTue, 27 Dec 2022\nProb (F-statistic):\n0.00\n\n\nTime:\n01:07:25\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.050e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.661e+06\n1.49e+05\n-24.593\n0.000\n-3.95e+06\n-3.37e+06\n\n\nyear\n1817.7366\n73.751\n24.647\n0.000\n1673.151\n1962.322\n\n\nmileage\n-0.1474\n0.009\n-16.817\n0.000\n-0.165\n-0.130\n\n\nmpg\n-79.3126\n9.338\n-8.493\n0.000\n-97.620\n-61.006\n\n\nengineSize\n1.218e+04\n189.969\n64.107\n0.000\n1.18e+04\n1.26e+04\n\n\n\n\n\n\nOmnibus:\n2450.973\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31060.548\n\n\nSkew:\n2.045\nProb(JB):\n0.00\n\n\nKurtosis:\n14.557\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nThe model equation is: estimated car price = -3.661e6 + 1818 * year -0.15 * mileage - 79.31 * mpg + 12180 * engineSize\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs its values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction looks better as compared to the one with simple linear regression. This is because we have four predictors to help explain the variation in car price, instead of just one in the case of simple linear regression. Also, all the predictors have a significant relationship with price as evident from their p-values. Thus, all four of them are contributing in explaining the variation. Note the higher values of R2 as compared to the one in the case of simple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9956.82497993548\n\n\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n9563.74782917604\n\n\n\nsns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nsns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Predicted price')\nplt.ylabel('Residual')\n\nText(0, 0.5, 'Residual')\n\n\n\n\n\nWill the explained variation (R-squared) in car price always increase if we add a variable?\nShould we keep on adding variables as long as the explained variation (R-squared) is increasing?\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nnp.random.seed(1)\ntrain['rand_col'] = np.random.rand(train.shape[0])\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize+rand_col', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.661\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n1928.\n\n\nDate:\nTue, 27 Dec 2022\nProb (F-statistic):\n0.00\n\n\nTime:\n01:07:38\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4954\nBIC:\n1.050e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.662e+06\n1.49e+05\n-24.600\n0.000\n-3.95e+06\n-3.37e+06\n\n\nyear\n1818.1672\n73.753\n24.652\n0.000\n1673.578\n1962.756\n\n\nmileage\n-0.1474\n0.009\n-16.809\n0.000\n-0.165\n-0.130\n\n\nmpg\n-79.2837\n9.338\n-8.490\n0.000\n-97.591\n-60.976\n\n\nengineSize\n1.218e+04\n189.972\n64.109\n0.000\n1.18e+04\n1.26e+04\n\n\nrand_col\n451.1226\n471.897\n0.956\n0.339\n-474.004\n1376.249\n\n\n\n\n\n\nOmnibus:\n2451.728\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31040.331\n\n\nSkew:\n2.046\nProb(JB):\n0.00\n\n\nKurtosis:\n14.552\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nAdding a variable with random values to the model (rand_col) increased the explained variation (R-squared). This is because the model has one more parameter to tune to reduce the residual squared error (RSS). However, the p-value of rand_col suggests that its coefficient is zero. Thus, using the model with rand_col may give poorer performance on unknown data, as compared to the model without rand_col. This implies that it is not a good idea to blindly add variables in the model to increase R-squared."
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "title": "3  Variable interactions and transformations",
    "section": "3.1 Variable interactions",
    "text": "3.1 Variable interactions\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990\n\n\n\n\n\n\n\nUntil now, we have assumed that the association between a predictor \\(X_j\\) and response \\(Y\\) does not depend on the value of other predictors. For example, the multiple linear regression model that we developed in Chapter 2 assumes that the average increase in price associated with a unit increase in engineSize is always $12,180, regardless of the value of other predictors. However, this assumption may be incorrect.\n\n3.1.1 Variable interaction between continuous predictors\nWe can relax this assumption by considering another predictor, called an interaction term. Let us assume that the average increase in price associated with a one-unit increase in engineSize depends on the model year of the car. In other words, there is an interaction between engineSize and year. This interaction can be included as a predictor, which is the product of engineSize and year. Note that there are several possible interactions that we can consider. Here the interaction between engineSize and year is just an example.\n\n#Considering interaction between engineSize and year\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.682\n\n\nModel:\nOLS\nAdj. R-squared:\n0.681\n\n\nMethod:\nLeast Squares\nF-statistic:\n2121.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:11\nLog-Likelihood:\n-52338.\n\n\nNo. Observations:\n4960\nAIC:\n1.047e+05\n\n\nDf Residuals:\n4954\nBIC:\n1.047e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n5.606e+05\n2.74e+05\n2.048\n0.041\n2.4e+04\n1.1e+06\n\n\nyear\n-275.3833\n135.695\n-2.029\n0.042\n-541.405\n-9.361\n\n\nengineSize\n-1.796e+06\n9.97e+04\n-18.019\n0.000\n-1.99e+06\n-1.6e+06\n\n\nyear:engineSize\n896.7687\n49.431\n18.142\n0.000\n799.861\n993.676\n\n\nmileage\n-0.1525\n0.008\n-17.954\n0.000\n-0.169\n-0.136\n\n\nmpg\n-84.3417\n9.048\n-9.322\n0.000\n-102.079\n-66.604\n\n\n\n\n\n\nOmnibus:\n2330.413\nDurbin-Watson:\n0.524\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n29977.437\n\n\nSkew:\n1.908\nProb(JB):\n0.00\n\n\nKurtosis:\n14.423\nCond. No.\n7.66e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.66e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the R-squared has increased as compared to the model in Chapter 2 since we added a predictor.\nThe model equation is:\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\beta_2*engineSize + \\beta_3*(year * engineSize) + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + (\\beta_2+\\beta_3*year)*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\tilde \\beta*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]\nSince \\(\\tilde \\beta\\) is a function of year, the association between engineSize and price is no longer a constant. A change in the value of year will change the association between price and engineSize.\nSubstituting the values of the coefficients: \\[\\begin{equation}\nprice = 5.606e5 - 275.3833*year + (-1.796e6+896.7687*year)*engineSize -0.1525*mileage -84.3417*mpg\n\\end{equation}\\]\nThus, for cars launched in the year 2010, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687 * 2010 \\(\\approx\\) \\$6,500, assuming all the other predictors are constant. However, for cars launched in the year 2020, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687*2020 \\(\\approx\\) \\$15,500 , assuming all the other predictors are constant.\nSimilarly, the equation can be re-arranged as: \\[\\begin{equation}\nprice = 5.606e5 +(-275.3833+896.7687*engineSize)*year -1.796e6*engineSize -0.1525*mileage -84.3417*mpg\n\\end{equation}\\]\nThus, for cars with an engine size of 2 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 2 \\(\\approx\\) \\$1500, assuming all the other predictors are constant. However, for cars with an engine size of 3 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 3 \\(\\approx\\) \\$2400, assuming all the other predictors are constant.\n\n#Computing the RMSE of the model with the interaction term\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9423.598872501092\n\n\nNote that the RMSE is lower than that of the model in Chapter 2. This is because the interaction term between engineSize and year is significant and relaxes the assumption of constant association between price and engine size, and between price and year. This added flexibility makes the model better fit the data. Caution: Too much flexibility may lead to overfitting!\nNote that interaction terms corresponding to other variable pairs, and higher order interaction terms (such as those containing 3 or 4 variables) may also be significant and improve the model fit & thereby the prediction accuracy of the model.\n\n\n3.1.2 Including qualitative predictors in the model\nLet us develop a model for predicting price based on engineSize and the qualitative predictor transmission.\n\n#checking the distribution of values of transmission\ntrain.transmission.value_counts()\n\nManual       1948\nAutomatic    1660\nSemi-Auto    1351\nOther           1\nName: transmission, dtype: int64\n\n\nNote that the Other category of the variable transmission contains only a single observation, which is likely to be insufficient to train the model. We’ll remove that observation from the training data. Another option may be to combine the observation in the Other category with the nearest category, and keep it in the data.\n\ntrain_updated = train[train.transmission!='Other']\n\n\nols_object = smf.ols(formula = 'price~engineSize+transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.459\n\n\nModel:\nOLS\nAdj. R-squared:\n0.458\n\n\nMethod:\nLeast Squares\nF-statistic:\n1400.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:21\nLog-Likelihood:\n-53644.\n\n\nNo. Observations:\n4959\nAIC:\n1.073e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.073e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3042.6765\n661.190\n4.602\n0.000\n1746.451\n4338.902\n\n\ntransmission[T.Manual]\n-6770.6165\n442.116\n-15.314\n0.000\n-7637.360\n-5903.873\n\n\ntransmission[T.Semi-Auto]\n4994.3112\n442.989\n11.274\n0.000\n4125.857\n5862.765\n\n\nengineSize\n1.023e+04\n247.485\n41.323\n0.000\n9741.581\n1.07e+04\n\n\n\n\n\n\nOmnibus:\n1575.518\nDurbin-Watson:\n0.579\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n11006.609\n\n\nSkew:\n1.334\nProb(JB):\n0.00\n\n\nKurtosis:\n9.793\nCond. No.\n11.4\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nNote that there is no coefficient for the Automatic level of the variable Transmission. If a car doesn’t have Manual or Semi-Automatic transmission, then it has an Automatic transmission. Thus, the coefficient of Automatic will be redundant, and the dummy variable corresponding to Automatic transmission is dropped from the model.\nThe level of the categorical variable that is dropped from the model is called the baseline level. Here Automatic transmission is the baseline level. The coefficients of other levels of transmission should be interpreted with respect to the baseline level.\nQ: Interpret the intercept term\nAns: For the hypothetical scenario of a car with zero engine size and Automatic transmission, the estimated mean car price is \\(\\approx\\) \\$3042.\nQ: Interpret the coefficient of transmission[T.Manual]\nAns: The estimated mean price of a car with manual transmission is \\(\\approx\\) \\$6770 less than that of a car with Automatic transmission.\nLet us visualize the developed model.\n\n#Visualizing the developed model\nplt.rcParams[\"figure.figsize\"] = (9,6)\nsns.set(font_scale = 1.3)\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nax = sns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept'], color = 'red')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], color = 'blue')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Manual]'], color = 'green')\nplt.legend(labels=[\"Automatic\",\"Semi-Automatic\", \"Manual\"])\nplt.xlabel('Engine size (in litre)')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\nBased on the developed model, for a given engine size, the car with a semi-automatic transmission is estimated to be the most expensive on average, while the car with a manual transmission is estimated to be the least expensive on average.\nChanging the baseline level: By default, the baseline level is chosen as the one that comes first if the levels are arranged in alphabetical order. However, you can change the baseline level by specifying one explicitly.\nInternally, statsmodels uses the patsy package to convert formulas and data to the matrices that are used in model fitting. You may refer to this section in the patsy documentation to specify a particular level of the categorical variable as the baseline.\nFor example, suppose we wish to change the baseline level to Manual transmission. We can specify this in the formula as follows:\n\nols_object = smf.ols(formula = 'price~engineSize+C(transmission, Treatment(\"Manual\"))', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.459\n\n\nModel:\nOLS\nAdj. R-squared:\n0.458\n\n\nMethod:\nLeast Squares\nF-statistic:\n1400.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:39\nLog-Likelihood:\n-53644.\n\n\nNo. Observations:\n4959\nAIC:\n1.073e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.073e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3727.9400\n492.917\n-7.563\n0.000\n-4694.275\n-2761.605\n\n\nC(transmission, Treatment(\"Manual\"))[T.Automatic]\n6770.6165\n442.116\n15.314\n0.000\n5903.873\n7637.360\n\n\nC(transmission, Treatment(\"Manual\"))[T.Semi-Auto]\n1.176e+04\n473.110\n24.867\n0.000\n1.08e+04\n1.27e+04\n\n\nengineSize\n1.023e+04\n247.485\n41.323\n0.000\n9741.581\n1.07e+04\n\n\n\n\n\n\nOmnibus:\n1575.518\nDurbin-Watson:\n0.579\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n11006.609\n\n\nSkew:\n1.334\nProb(JB):\n0.00\n\n\nKurtosis:\n9.793\nCond. No.\n8.62\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n3.1.3 Including qualitative predictors and their interaction with continuous predictors in the model\nNote that the qualitative predictor leads to fitting 3 parallel lines to the data, as there are 3 categories.\nHowever, note that we have made the constant association assumption. The fact that the lines are parallel means that the average increase in car price for one litre increase in engine size does not depend on the type of transmission. This represents a potentially serious limitation of the model, since in fact a change in engine size may have a very different association on the price of an automatic car versus a semi-automatic or manual car.\nThis limitation can be addressed by adding an interaction variable, which is the product of engineSize and the dummy variables for semi-automatic and manual transmissions.\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~engineSize*transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.479\n\n\nModel:\nOLS\nAdj. R-squared:\n0.478\n\n\nMethod:\nLeast Squares\nF-statistic:\n909.9\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n22:55:55\nLog-Likelihood:\n-53550.\n\n\nNo. Observations:\n4959\nAIC:\n1.071e+05\n\n\nDf Residuals:\n4953\nBIC:\n1.072e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3754.7238\n895.221\n4.194\n0.000\n1999.695\n5509.753\n\n\ntransmission[T.Manual]\n1768.5856\n1294.071\n1.367\n0.172\n-768.366\n4305.538\n\n\ntransmission[T.Semi-Auto]\n-5282.7164\n1416.472\n-3.729\n0.000\n-8059.628\n-2505.805\n\n\nengineSize\n9928.6082\n354.511\n28.006\n0.000\n9233.610\n1.06e+04\n\n\nengineSize:transmission[T.Manual]\n-5285.9059\n646.175\n-8.180\n0.000\n-6552.695\n-4019.117\n\n\nengineSize:transmission[T.Semi-Auto]\n4162.2428\n552.597\n7.532\n0.000\n3078.908\n5245.578\n\n\n\n\n\n\nOmnibus:\n1379.846\nDurbin-Watson:\n0.622\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n9799.471\n\n\nSkew:\n1.139\nProb(JB):\n0.00\n\n\nKurtosis:\n9.499\nCond. No.\n30.8\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe model equation for the model with interactions is:\nAutomatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize\\),\nSemi-Automatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize + (-5282.7164+4162.2428*engineSize)\\),\nManual transmission: \\(price = 3754.7238 + 9928.6082 * engineSize +(1768.5856-5285.9059*engineSize)\\), or\nAutomatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize\\),\nSemi-Automatic transmission: \\(price = -1527 + 7046 * engineSize\\),\nManual transmission: \\(price = 5523 + 4642 * engineSize\\),\nQ: Interpret the coefficient of manual tranmission, i.e., the coefficient of transmission[T.Manual].\nA: For a given engine size, the estimated mean price of a car with Manual transmission is \\(\\approx\\) \\$1768 more than the estimated mean price of a car with Automatic transmission.\nQ: Interpret the coefficient of the interaction between engine size and manual transmission, i.e., the coefficient of engineSize:transmission[T.Manual].\nA: For a unit (or a litre) increase in engineSize , the increase in estimated mean price of a car with Manual transmission is \\(\\approx\\) \\$5285 less than the increase in estimated mean price of a car with Automatic transmission.\n\n#Visualizing the developed model with interaction terms\nplt.rcParams[\"figure.figsize\"] = (9,6)\nsns.set(font_scale = 1.3)\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nax = sns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept'], label='Automatic', color = 'red')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Semi-Auto]'])*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], '-b', label='Semi-Automatic')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Manual]'])*x+model.params['Intercept']+model.params['transmission[T.Manual]'], '-g', label='Manual')\nplt.legend(loc='upper left')\nplt.xlabel('Engine size (in litre)')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\nNote the interaction term adds flexibility to the model.\nThe slope of the regression line for semi-automatic cars is the largest. This suggests that increase in engine size is associated with a higher increase in car price for semi-automatic cars, as compared to other cars."
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "title": "3  Variable interactions and transformations",
    "section": "3.2 Variable transformations",
    "text": "3.2 Variable transformations\nSo far we have considered only a linear relationship between the predictors and the response. However, the relationship may be non-linear.\nConsider the regression plot of price on mileage.\n\nax = sns.regplot(x = train_updated.mileage, y =train_updated.price,color = 'orange', line_kws = {'color':'blue'})\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\n\n#R-squared of the model with just mileage\nmodel = smf.ols('price~mileage', data = train_updated).fit()\nmodel.rsquared\n\n0.22928048993376182\n\n\nFrom the first scatterplot, we see that the relationship between price and mileage doesn’t seem to be linear, as the points do not lie on a straight line. Also, we see the regression line (or the curve), which is the best fit line doesn’t seem to fit the points well. However, price on average seems to decrease with mileage, albeit in a non-linear manner.\n\n3.2.1 Quadratic transformation\nSo, we guess that if we model price as a quadratic function of mileage, the model may better fit the points (or the curve may better fit the points). Let us transform the predictor mileage to include \\(mileage^2\\) (i.e., perform a quadratic transformation on the predictor).\n\n#Including mileage squared as a predictor and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.271\n\n\nModel:\nOLS\nAdj. R-squared:\n0.271\n\n\nMethod:\nLeast Squares\nF-statistic:\n920.6\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:26:05\nLog-Likelihood:\n-54382.\n\n\nNo. Observations:\n4959\nAIC:\n1.088e+05\n\n\nDf Residuals:\n4956\nBIC:\n1.088e+05\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.44e+04\n332.710\n103.382\n0.000\n3.37e+04\n3.5e+04\n\n\nmileage\n-0.5662\n0.017\n-33.940\n0.000\n-0.599\n-0.534\n\n\nI(mileage ** 2)\n2.629e-06\n1.56e-07\n16.813\n0.000\n2.32e-06\n2.94e-06\n\n\n\n\n\n\nOmnibus:\n2362.973\nDurbin-Watson:\n0.325\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n22427.952\n\n\nSkew:\n2.052\nProb(JB):\n0.00\n\n\nKurtosis:\n12.576\nCond. No.\n4.81e+09\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 4.81e+09. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that in the formula specified within the ols() function, the I() operator isolates or insulates the contents within I(…) from the regular formula operators. Without the I() operator, mileage**2 will be treated as the interaction of mileage with itself, which is mileage. Thus, to add the square of mileage as a separate predictor, we need to use the I() operator.\nLet us visualize the model fit with the quadratic transformation of the predictor - mileage.\n\n#Visualizing the regression line with the model consisting of the quadratic transformation of the predictor - mileage\npred_price = model.predict(train_updated)\nax = sns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\nThe above model seems to better fit the data (as compared to the model without transformation) at least upto mileage around 125,000. The \\(R^2\\) of the model with the quadratic transformation of mileage is also higher than that of the model without transformation indicating a better fit.\n\n\n3.2.2 Cubic transformation\nLet us see if a cubic transformation of mileage can further improve the model fit.\n\n#Including mileage squared and mileage cube as predictors and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)+I(mileage**3)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.283\n\n\nModel:\nOLS\nAdj. R-squared:\n0.283\n\n\nMethod:\nLeast Squares\nF-statistic:\n652.3\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:33:27\nLog-Likelihood:\n-54340.\n\n\nNo. Observations:\n4959\nAIC:\n1.087e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.087e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.598e+04\n371.926\n96.727\n0.000\n3.52e+04\n3.67e+04\n\n\nmileage\n-0.7742\n0.028\n-27.634\n0.000\n-0.829\n-0.719\n\n\nI(mileage ** 2)\n6.875e-06\n4.87e-07\n14.119\n0.000\n5.92e-06\n7.83e-06\n\n\nI(mileage ** 3)\n-1.823e-11\n1.98e-12\n-9.199\n0.000\n-2.21e-11\n-1.43e-11\n\n\n\n\n\n\nOmnibus:\n2380.788\nDurbin-Watson:\n0.321\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n23039.307\n\n\nSkew:\n2.065\nProb(JB):\n0.00\n\n\nKurtosis:\n12.719\nCond. No.\n7.73e+14\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.73e+14. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Visualizing the model with the cubic transformation of mileage\npred_price = model.predict(train_updated)\nax = sns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\nNote that the model fit with the cubic transformation of mileage seems slightly better as compared to the models with the quadratic transformation, and no transformation of mileage, for mileage up to 180k. However, the model should not be used to predict car prices of cars with a mileage higher than 180k.\nLet’s update the model created earlier (in the beginning of this chapter) to include the transformed predictor.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.702\n\n\nMethod:\nLeast Squares\nF-statistic:\n1947.\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:42:13\nLog-Likelihood:\n-52162.\n\n\nNo. Observations:\n4959\nAIC:\n1.043e+05\n\n\nDf Residuals:\n4952\nBIC:\n1.044e+05\n\n\nDf Model:\n6\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.53e+06\n2.7e+05\n5.671\n0.000\n1e+06\n2.06e+06\n\n\nyear\n-755.7419\n133.791\n-5.649\n0.000\n-1018.031\n-493.453\n\n\nengineSize\n-2.022e+06\n9.72e+04\n-20.803\n0.000\n-2.21e+06\n-1.83e+06\n\n\nyear:engineSize\n1008.6993\n48.196\n20.929\n0.000\n914.215\n1103.184\n\n\nmileage\n-0.3548\n0.014\n-25.973\n0.000\n-0.382\n-0.328\n\n\nmpg\n-54.7450\n8.896\n-6.154\n0.000\n-72.185\n-37.305\n\n\nI(mileage ** 2)\n1.926e-06\n1.04e-07\n18.536\n0.000\n1.72e-06\n2.13e-06\n\n\n\n\n\n\nOmnibus:\n2355.448\nDurbin-Watson:\n0.562\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n38317.404\n\n\nSkew:\n1.857\nProb(JB):\n0.00\n\n\nKurtosis:\n16.101\nCond. No.\n6.40e+12\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 6.4e+12. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the R-squared has increased as compared to the model with just the interaction term.\n\n#Computing RMSE on test data\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9074.494088619422\n\n\nNote that the prediction accuracy of the model has further increased, as the RMSE has reduced. The transformed predictor is statistically significant and provides additional flexibility to better capture the trend in the data, leading to an increase in prediction accuracy."
  },
  {
    "objectID": "Lec4_ModelAssumptions.html#non-linearity-of-data",
    "href": "Lec4_ModelAssumptions.html#non-linearity-of-data",
    "title": "4  Model assumptions",
    "section": "4.1 Non-linearity of data",
    "text": "4.1 Non-linearity of data\nWe have assumed that there is a linear relationship between the predictors and the response. Residual plots, which are scatter plots of residuals vs fitted values, can be used to identify non-linearity. Fitted values are the values estimated by the model on training data, denoted by \\(\\hat y_i\\), and residuals are given by \\(e_i = y_i - \\hat y_i\\).\n\n#Plotting residuals vs fitted values\nplt.rcParams[\"figure.figsize\"] = (9,6)\nsns.set(font_scale=1.25)\nax = sns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nsns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\nThe model seems to satisfy this assumption, as we do not observe a strong pattern in the residuals around the line Residuals = 0. Residuals are distributed more or less in a similar manner on both sides of the blue line for all fitted values.\nFor the model to satisfy the linearity assumption perfectly, the points above the line (Residuals = 0), should be mirror image of the points below the line, i.e., the blue line in the above plot should act as a mirror.\nWhat to do if there is non-linear association (page 94 of book): If the residual plot indicates that there are non-linear associations in the data, then a simple approach is to use non-linear transformations of the predictors, such as \\(log X, \\sqrt X\\), and \\(X^2\\), in the regression model."
  },
  {
    "objectID": "Lec4_ModelAssumptions.html#non-constant-variance-of-error-terms",
    "href": "Lec4_ModelAssumptions.html#non-constant-variance-of-error-terms",
    "title": "4  Model assumptions",
    "section": "4.2 Non-constant variance of error terms",
    "text": "4.2 Non-constant variance of error terms\nThe variance of the error terms is assumed to be constant, i.e., \\(Var(\\epsilon_i) = \\sigma^2\\), and this assumption is used while deriving the standard errors of the regression coefficients. The standard errors in turn are used to test the significant of the predictors, and obtain their confidence interval. Thus, violation of this assumption may lead to incorrect inference. Non-constant variance of error terms, or violation of the constant variance assumption, is called heteroscedasticity.\nThis assumption can be checked by plotting the residuals against fitted values.\n\n#Plotting residuals vs fitted values\nax = sns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nsns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\nWe see that the variance of errors seems to increase with increase in the fitted values. In such a case a log transformation of the response can resolve the issue to some extent. This is because a log transformation will result in a higher shrinkage of larger values.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(price)\nR-squared:\n0.803\n\n\nModel:\nOLS\nAdj. R-squared:\n0.803\n\n\nMethod:\nLeast Squares\nF-statistic:\n1834.\n\n\nDate:\nWed, 25 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n11:37:55\nLog-Likelihood:\n-1173.8\n\n\nNo. Observations:\n4960\nAIC:\n2372.\n\n\nDf Residuals:\n4948\nBIC:\n2450.\n\n\nDf Model:\n11\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-238.2125\n25.790\n-9.237\n0.000\n-288.773\n-187.652\n\n\nyear\n0.1227\n0.013\n9.608\n0.000\n0.098\n0.148\n\n\nengineSize\n13.8349\n5.795\n2.387\n0.017\n2.475\n25.195\n\n\nmileage\n0.0005\n0.000\n3.837\n0.000\n0.000\n0.001\n\n\nmpg\n-1.2446\n0.345\n-3.610\n0.000\n-1.921\n-0.569\n\n\nyear:engineSize\n-0.0067\n0.003\n-2.324\n0.020\n-0.012\n-0.001\n\n\nyear:mileage\n-2.67e-07\n6.8e-08\n-3.923\n0.000\n-4e-07\n-1.34e-07\n\n\nyear:mpg\n0.0006\n0.000\n3.591\n0.000\n0.000\n0.001\n\n\nengineSize:mileage\n-2.668e-07\n4.08e-07\n-0.654\n0.513\n-1.07e-06\n5.33e-07\n\n\nengineSize:mpg\n0.0028\n0.000\n6.842\n0.000\n0.002\n0.004\n\n\nmileage:mpg\n7.235e-08\n1.79e-08\n4.036\n0.000\n3.72e-08\n1.08e-07\n\n\nI(mileage ** 2)\n1.828e-11\n5.64e-12\n3.240\n0.001\n7.22e-12\n2.93e-11\n\n\n\n\n\n\nOmnibus:\n711.515\nDurbin-Watson:\n0.498\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n2545.807\n\n\nSkew:\n0.699\nProb(JB):\n0.00\n\n\nKurtosis:\n6.220\nCond. No.\n1.73e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.73e+13. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the coefficient of year turns out to be significant (at 5% significance level), unlike in the previous model. Intuitively, the coefficient of year should have been significant, as year has the highest linear correlation of 50% with car price.\nAlthough the R-squared has increased as compared to the previous model, violation of this assumption does not cause bias in the regression coefficients. Thus, there may not be a large improvement in the model fit, unless we add predictor(s) to address heteroscedasticity.\nLet us check the constant variance assumption again.\n\n#Plotting residuals vs fitted values\nsns.scatterplot(x = (model_log.fittedvalues), y=(model_log.resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals')\n\nText(0, 0.5, 'Residuals')\n\n\n\n\n\nNow we observe that the constant variance assumption is satisfied. Let us see the RMSE of this model on test data.\n\n#Computing RMSE on test data\npred_price_log = model_log.predict(testf)\nnp.sqrt(((testp.price - np.exp(pred_price_log))**2).mean())\n\n9094.209503063496\n\n\nNote that the RMSE of the log-transformed model has increased as compared to the model without transformation. Does it mean the log-transformed model is less accurate?\n\n#Computing MAE on test data\npred_price_log = model_log.predict(testf)\n((np.abs(testp.price - np.exp(pred_price_log))).mean())\n\n5268.398904745121\n\n\nAlthough the RMSE has increased a bit for the log-transformed model, the MAE has reduced. This means the log-transformed model does a bit worse on reducing relatively large errors, but does better in reducing the absolute errors on an average.\n\n#Comparing errors of the log-transformed model with the previous model\nerr = np.abs(testp.price - pred_price)\nerr_log = np.abs(testp.price - np.exp(pred_price_log))\nsns.scatterplot(x = err,y = err_log, color = 'orange')\nsns.lineplot(x = [0,100000], y = [0,100000], color = 'blue')\nnp.sum(err_log&lt;err)/len(err)\n\n0.5572604790419161\n\n\n\n\n\nFor 56% of the cars, the log transformed makes a more accurate prediction than the previous model, which is another criterion based on which the log-transformed model is more accurate. However, the conclusion based on RMSE is different. This is because RMSE can be influenced by a few large errors. Thus, RMSE, though sometimes appropriate than other criteria, should not be used as the sole measure to compare the accuracy of models.\n\n#Visualizing the distribution of price and log(price)\nfig = plt.figure()\nfig.subplots_adjust(hspace=0.4, wspace=0.2)\nsns.set(rc = {'figure.figsize':(20,12)})\nsns.set(font_scale = 2)\nax = fig.add_subplot(2, 2, 1)\nsns.histplot(train.price,kde=True)\nax.set(xlabel='price', ylabel='Count')\nax = fig.add_subplot(2, 2, 2)\nsns.histplot(np.log(train.price),kde=True)\nax.set(xlabel='log price', ylabel='Count')\n\n[Text(0.5, 0, 'log price'), Text(0, 0.5, 'Count')]\n\n\n\n\n\nWe can see that the log transformation shrinked the higher values of price, making its distribution closer to normal.\nNote that heteroscedasticity can also occur due to model misspecification, i.e., in case of missing predictor(s). Some of the cars are too expensive, which makes the price distribution skewed. Perhaps, the price of expensive cars could be better explained by the car model, a predictor that is missing in the current model."
  },
  {
    "objectID": "Lec5_Potential_issues.html#outliers",
    "href": "Lec5_Potential_issues.html#outliers",
    "title": "5  Potential issues",
    "section": "5.1 Outliers",
    "text": "5.1 Outliers\nAn outlier is a point for which the true response (\\(y_i\\)) is far from the value predicted by the model. Residual plots can be used to identify outliers.\nIf the the response at the \\(i^{th}\\) observation is \\(y_i\\), the prediction is \\(\\hat{y}_i\\), then the residual \\(e_i\\) is:\n\\[e_i = y_i - \\hat{y_i}\\]\n\n#Plotting residuals vs fitted values\nsns.set(rc={'figure.figsize':(10,6)})\nsns.scatterplot(x = (model_log.fittedvalues), y=(model_log.resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals')\n\nText(0, 0.5, 'Residuals')\n\n\n\n\n\nSome of the errors may be high. However, it is difficult to decide how large a residual needs to be before we can consider a point to be an outlier. To address this problem, we have standardized residuals, which are defined as:\n\\[r_i = \\frac{e_i}{RSE(\\sqrt{1-h_{ii}})},\\] where \\(r_i\\) is the standardized residual, \\(RSE\\) is the residual standard error, and \\(h_{ii}\\) is the leverage (introduced in the next section) of the \\(i^{th}\\) observation.\nStandardized residuals, allow the residuals to be compared on a standard scale.\nIssue with standardized residuals:, If the observation corresponding to the standardized residual has a high leverage, then it will drag the regression line / plane / hyperplane towards it, thereby influencing the estimate of the residual itself.\nStudentized residuals: To address the issue with standardized residuals, studentized residual for the \\(i^{th}\\) observation is computed as the standardized residual, but with the \\(RSE\\) (residual standard error) computed after removing the \\(i^{th}\\) observation from the data. Studentized residual, \\(t_i\\) for the \\(i^{th}\\) observation is given as:\n\\[t_i = \\frac{e_i}{RSE_{i}(\\sqrt{1-h_{ii}})},\\] where \\(RSE_{i}\\) is the residual standard error of the model developed on the data without the \\(i^{th}\\) observation.\nStudentized residuals follow a \\(t\\) distribution with \\((n–p–2)\\) degrees of freedom. Thus, in general, observations whose studentized residuals have a magnitude higher than 3 are potential outliers.\nLet us find the studentized residuals in our car price prediction model.\n\n#Studentized residuals\nout = model_log.outlier_test()\nout\n\n\n\n\n\n\n\n\nstudent_resid\nunadj_p\nbonf(p)\n\n\n\n\n0\n-1.164204\n0.244398\n1.0\n\n\n1\n-0.801879\n0.422661\n1.0\n\n\n2\n-1.263820\n0.206354\n1.0\n\n\n3\n-0.614171\n0.539130\n1.0\n\n\n4\n0.027930\n0.977719\n1.0\n\n\n...\n...\n...\n...\n\n\n4955\n-0.523361\n0.600747\n1.0\n\n\n4956\n-0.509539\n0.610397\n1.0\n\n\n4957\n-1.718802\n0.085713\n1.0\n\n\n4958\n-0.077595\n0.938153\n1.0\n\n\n4959\n-0.482388\n0.629551\n1.0\n\n\n\n\n4960 rows × 3 columns\n\n\n\nStudentized residuals are in the first column of the above table.\n\n#Plotting studentized residuals vs fitted values\nsns.scatterplot(x = (model_log.fittedvalues), y=(out.student_resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Studentized Residuals')\n\nText(0, 0.5, 'Studentized Residuals')\n\n\n\n\n\nPotential outliers: Observations whose studentized residuals have a magnitude greater than 3.\nImpact of outliers: Outliers do not have a large impact on the OLS line / plane / hyperplane. However, outliers do inflate the residual standard error (RSE). RSE in turn is used to compute the standard errors of regression coefficients. As a result, statistically significant variables may appear to be insignificant, and \\(R^2\\) may appear to be lower.\n\n#Number of points with absolute studentized residuals greater than 3\nnp.sum((np.abs(out.student_resid)&gt;3))\n\n86\n\n\nAre there outliers in our example?: In the above plot, there are 86 points with absolute studentized residuals larger than 3. However, most of the predictors are significant and R-squared has a relatively high value of 80%. Thus, even if there are outliers, there is no need to remove them as it is unlikely to change the significance of individual variables. Furthermore, looking into the data, we find that the price of some of the luxury cars such as Mercedez G-class is actually much higher than average. So, the potential outliers in the data do not seem to be due to incorrect data. The high studentized residuals may be due to some deficiency in the model, such as missing predictor(s) (like car model), rather than incorrect data. Thus, we should not remove any data that has an outlying value of log(price).\nSince model seems to be a variable that can explain the price of overly expensive cars, let us include it in the regression model.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)+model', data = train)\nmodel_log = ols_object.fit()\n#Model summary not printed to save space\n#model_log.summary()\n\n\n#Computing RMSE on test data with car 'model' as one of the predictors\npred_price_log2 = model_log.predict(testf)\nnp.sqrt(((testp.price - np.exp(pred_price_log2))**2).mean())\n\n4252.20045604376\n\n\n\n#Plotting studentized residuals vs fitted values for the model with car 'model' as one of the predictors\nout = model_log.outlier_test()\nsns.scatterplot(x = (model_log.fittedvalues), y=(out.student_resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals')\n\nText(0, 0.5, 'Residuals')\n\n\n\n\n\n\n#Number of points with absolute studentized residuals greater than 3\nnp.sum((np.abs(out.student_resid)&gt;3))\n\n69\n\n\nNote the RMSE has reduced to almost half of its value as compared to the regression model without the predictor - model. Car model does help better explain the variation in price of cars! The number of points with absolute studentized residuals greater than 3 has also reduced to 69 from 86."
  },
  {
    "objectID": "Lec5_Potential_issues.html#high-leverage-points",
    "href": "Lec5_Potential_issues.html#high-leverage-points",
    "title": "5  Potential issues",
    "section": "5.2 High leverage points",
    "text": "5.2 High leverage points\nHigh leverage points are those with an unsual value of the predictor(s). They have a relatively higher impact on the OLS line / plane / hyperplane, as compared to the outliers.\nLeverage statistic (page 99 of the book): In order to quantify an observation’s leverage, we compute the leverage statistic. A large value of this statistic indicates an observation with high leverage. For simple linear regression, \\[\\begin{equation}\nh_i = \\frac{1}{n} + \\frac{(x_i - \\bar x)^2}{\\sum_{i'=1}^{n}(x_{i'} - \\bar x)^2}.\n\\end{equation}\\]\nIt is clear from this equation that \\(h_i\\) increases with the distance of \\(x_i\\) from \\(\\bar x\\).The leverage statistic \\(h_i\\) is always between \\(1/n\\) and \\(1\\), and the average leverage for all the observations is always equal to \\((p+1)/n\\). So if a given observation has a leverage statistic that greatly exceeds \\((p+1)/n\\), then we may suspect that the corresponding point has high leverage.\nInfluential points: Note that if a high leverage point falls in line with the regression line, then it will not affect the regression line. However, it may inflate R-squared and increase the significance of predictors. If a high leverage point falls away from the regression line, then it is also an outlier, and will affect the regression line. The points whose presence significantly affects the regression line are called influential points. A point that is both a high leverage point and an outlier is likely to be an influential point. However, a high leverage point is not necessarily an influential point.\nSource for influential points: https://online.stat.psu.edu/stat501/book/export/html/973\nLet us see if there are any high leverage points in our regression model without the predictor - model.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(price)\nR-squared:\n0.803\n\n\nModel:\nOLS\nAdj. R-squared:\n0.803\n\n\nMethod:\nLeast Squares\nF-statistic:\n1834.\n\n\nDate:\nSun, 05 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n19:31:59\nLog-Likelihood:\n-1173.8\n\n\nNo. Observations:\n4960\nAIC:\n2372.\n\n\nDf Residuals:\n4948\nBIC:\n2450.\n\n\nDf Model:\n11\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-238.2125\n25.790\n-9.237\n0.000\n-288.773\n-187.652\n\n\nyear\n0.1227\n0.013\n9.608\n0.000\n0.098\n0.148\n\n\nengineSize\n13.8349\n5.795\n2.387\n0.017\n2.475\n25.195\n\n\nmileage\n0.0005\n0.000\n3.837\n0.000\n0.000\n0.001\n\n\nmpg\n-1.2446\n0.345\n-3.610\n0.000\n-1.921\n-0.569\n\n\nyear:engineSize\n-0.0067\n0.003\n-2.324\n0.020\n-0.012\n-0.001\n\n\nyear:mileage\n-2.67e-07\n6.8e-08\n-3.923\n0.000\n-4e-07\n-1.34e-07\n\n\nyear:mpg\n0.0006\n0.000\n3.591\n0.000\n0.000\n0.001\n\n\nengineSize:mileage\n-2.668e-07\n4.08e-07\n-0.654\n0.513\n-1.07e-06\n5.33e-07\n\n\nengineSize:mpg\n0.0028\n0.000\n6.842\n0.000\n0.002\n0.004\n\n\nmileage:mpg\n7.235e-08\n1.79e-08\n4.036\n0.000\n3.72e-08\n1.08e-07\n\n\nI(mileage ** 2)\n1.828e-11\n5.64e-12\n3.240\n0.001\n7.22e-12\n2.93e-11\n\n\n\n\n\n\nOmnibus:\n711.515\nDurbin-Watson:\n0.498\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n2545.807\n\n\nSkew:\n0.699\nProb(JB):\n0.00\n\n\nKurtosis:\n6.220\nCond. No.\n1.73e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.73e+13. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Computing the leverage statistic for each observation\ninfluence = model_log.get_influence()\nleverage = influence.hat_matrix_diag\n\n\n#Visualizng leverage against studentized residuals\nsns.set(rc={'figure.figsize':(15,8)})\nsm.graphics.influence_plot(model_log);\n\n\n\n\nLet us identify the high leverage points in the data, as they may be affecting the regression line if they are outliers as well, i.e., if they are influential points. Note that there is no defined threshold for a point to be classified as a high leverage point. Some statisticians consider points having twice the average leverage as high leverage points, some consider points having thrice the average leverage as high leverage points, and so on.\n\nout = model_log.outlier_test()\n\n\n#Average leverage of points\naverage_leverage = (model_log.df_model+1)/model_log.nobs\naverage_leverage\n\n0.0024193548387096775\n\n\nLet us consider points having four times the average leverage as high leverage points.\n\n#We will remove all observations that have leverage higher than the threshold value.\nhigh_leverage_threshold = 4*average_leverage\n\n\n#Number of high leverage points in the dataset\nnp.sum(leverage&gt;high_leverage_threshold)\n\n197"
  },
  {
    "objectID": "Lec5_Potential_issues.html#influential-points",
    "href": "Lec5_Potential_issues.html#influential-points",
    "title": "5  Potential issues",
    "section": "5.3 Influential points",
    "text": "5.3 Influential points\nObservations that are both high leverage points and outliers are influential points that may affect the regression line. Let’s remove these influential points from the data and see if it improves the model prediction accuracy on test data.\n\n#Dropping influential points from data\ntrain_filtered = train.drop(np.intersect1d(np.where(np.abs(out.student_resid)&gt;3)[0],\n                                           (np.where(leverage&gt;high_leverage_threshold)[0])))\n\n\ntrain_filtered.shape\n\n(4921, 11)\n\n\n\n#Number of points removed as they were influential\ntrain.shape[0]-train_filtered.shape[0]\n\n39\n\n\nWe removed 39 influential data points from the training data.\n\n#Model after removing the influential observations\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train_filtered)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(price)\nR-squared:\n0.830\n\n\nModel:\nOLS\nAdj. R-squared:\n0.829\n\n\nMethod:\nLeast Squares\nF-statistic:\n2173.\n\n\nDate:\nSun, 29 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n01:26:25\nLog-Likelihood:\n-775.51\n\n\nNo. Observations:\n4921\nAIC:\n1575.\n\n\nDf Residuals:\n4909\nBIC:\n1653.\n\n\nDf Model:\n11\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-262.7743\n24.455\n-10.745\n0.000\n-310.717\n-214.832\n\n\nyear\n0.1350\n0.012\n11.148\n0.000\n0.111\n0.159\n\n\nengineSize\n16.6645\n5.482\n3.040\n0.002\n5.917\n27.412\n\n\nmileage\n0.0008\n0.000\n5.945\n0.000\n0.001\n0.001\n\n\nmpg\n-1.1217\n0.324\n-3.458\n0.001\n-1.758\n-0.486\n\n\nyear:engineSize\n-0.0081\n0.003\n-2.997\n0.003\n-0.013\n-0.003\n\n\nyear:mileage\n-3.927e-07\n6.5e-08\n-6.037\n0.000\n-5.2e-07\n-2.65e-07\n\n\nyear:mpg\n0.0005\n0.000\n3.411\n0.001\n0.000\n0.001\n\n\nengineSize:mileage\n-4.566e-07\n3.86e-07\n-1.183\n0.237\n-1.21e-06\n3e-07\n\n\nengineSize:mpg\n0.0071\n0.000\n16.202\n0.000\n0.006\n0.008\n\n\nmileage:mpg\n7.29e-08\n1.68e-08\n4.349\n0.000\n4e-08\n1.06e-07\n\n\nI(mileage ** 2)\n1.418e-11\n5.29e-12\n2.683\n0.007\n3.82e-12\n2.46e-11\n\n\n\n\n\n\nOmnibus:\n631.414\nDurbin-Watson:\n0.553\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n1851.015\n\n\nSkew:\n0.682\nProb(JB):\n0.00\n\n\nKurtosis:\n5.677\nCond. No.\n1.73e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.73e+13. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that we obtain a higher R-sqauared value of 83% as compared to 80% with the complete data. Removing the influential points helped obtain a better model fit. However, that may also happen just by reducing observations.\n\n#Computing RMSE on test data\npred_price_log = model_log.predict(testf)\nnp.sqrt(((testp.price - np.exp(pred_price_log))**2).mean())\n\n8820.685844070766\n\n\nThe RMSE on test data has also reduced. This shows that some of the influential points were impacting the regression line. With those points removed, the model better captures the general trend in the data."
  },
  {
    "objectID": "Lec5_Potential_issues.html#collinearity",
    "href": "Lec5_Potential_issues.html#collinearity",
    "title": "5  Potential issues",
    "section": "5.4 Collinearity",
    "text": "5.4 Collinearity\nCollinearity refers to the situation when two or more predictor variables have a high linear association. Linear association between a pair of variables can be measured by the correlation coefficient. Thus the correlation matrix can indicate some potential collinearity problems.\n\n5.4.1 Why and how is collinearity a problem\n(Source: page 100-101 of book)\nThe presence of collinearity can pose problems in the regression context, since it can be difficult to separate out the individual effects of collinear variables on the response.\nSince collinearity reduces the accuracy of the estimates of the regression coefficients, it causes the standard error for \\(\\hat \\beta_j\\) to grow. Recall that the t-statistic for each predictor is calculated by dividing \\(\\hat \\beta_j\\) by its standard error. Consequently, collinearity results in a decline in the \\(t\\)-statistic. As a result, in the presence of collinearity, we may fail to reject \\(H_0: \\beta_j = 0\\). This means that the power of the hypothesis test—the probability of correctly detecting a non-zero coefficient—is reduced by collinearity.\n\n\n5.4.2 How to measure collinearity/multicollinearity\n(Source: page 102 of book)\nUnfortunately, not all collinearity problems can be detected by inspection of the correlation matrix: it is possible for collinearity to exist between three or more variables even if no pair of variables has a particularly high correlation. We call this situation multicollinearity. Instead of inspecting the correlation matrix, a better way to assess multicollinearity is to compute the variance inflation factor (VIF). The VIF is variance inflation factor the ratio of the variance of \\(\\hat \\beta_j\\) when fitting the full model divided by the variance of \\(\\hat \\beta_j\\) if fit on its own. The smallest possible value for VIF is 1, which indicates the complete absence of collinearity. Typically in practice there is a small amount of collinearity among the predictors. As a rule of thumb, a VIF value that exceeds 5 or 10 indicates a problematic amount of collinearity.\nThe estimated variance of the coefficient \\(\\beta_j\\), of the \\(j^{th}\\) predictor \\(X_j\\), can be expressed as:\n\\[\\hat{var}(\\hat{\\beta_j}) = \\frac{(\\hat{\\sigma})^2}{(n-1)\\hat{var}({X_j})}.\\frac{1}{1-R^2_{X_j|X_{-j}}},\\]\nwhere \\(R^2_{X_j|X_{-j}}\\) is the \\(R\\)-squared for the regression of \\(X_j\\) on the other covariates (a regression that does not involve the response variable \\(Y\\)).\nIn case of simple linear regression, the variance expression in the equation above does not contain the term \\(\\frac{1}{1-R^2_{X_j|X_{-j}}}\\), as there is only one predictor. However, in case of multiple linear regression, the variance of the estimate of the \\(j^{th}\\) coefficient (\\(\\hat{\\beta_j}\\)) gets inflated by a factor of \\(\\frac{1}{1-R^2_{X_j|X_{-j}}}\\) (Note that in the complete absence of collinearity, \\(R^2_{X_j|X_{-j}}=0\\), and the value of this factor will be 1).\nThus, the Variance inflation factor, or the VIF for the estimated coefficient of the \\(j^{th}\\) predictor \\(X_j\\) is:\n\\[\\begin{equation}\nVIF(\\hat \\beta_j) = \\frac{1}{1-R^2_{X_j|X_{-j}}}\n\\end{equation}\\]\n\n#Correlation matrix\ntrain.corr()\n\n\n\n\n\n\n\n\ncarID\nyear\nmileage\ntax\nmpg\nengineSize\nprice\n\n\n\n\ncarID\n1.000000\n0.006251\n-0.001320\n0.023806\n-0.010774\n0.011365\n0.012129\n\n\nyear\n0.006251\n1.000000\n-0.768058\n-0.205902\n-0.057093\n0.014623\n0.501296\n\n\nmileage\n-0.001320\n-0.768058\n1.000000\n0.133744\n0.125376\n-0.006459\n-0.478705\n\n\ntax\n0.023806\n-0.205902\n0.133744\n1.000000\n-0.488002\n0.465282\n0.144652\n\n\nmpg\n-0.010774\n-0.057093\n0.125376\n-0.488002\n1.000000\n-0.419417\n-0.369919\n\n\nengineSize\n0.011365\n0.014623\n-0.006459\n0.465282\n-0.419417\n1.000000\n0.624899\n\n\nprice\n0.012129\n0.501296\n-0.478705\n0.144652\n-0.369919\n0.624899\n1.000000\n\n\n\n\n\n\n\nLet us compute the Variance Inflation Factor (VIF) for the four predictors.\n\nX = train[['mpg','year','mileage','engineSize']]\n\n\nX.columns[1:]\n\nIndex(['year', 'mileage', 'engineSize'], dtype='object')\n\n\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\nX = add_constant(X)\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = X.columns\n\nfor i in range(len(X.columns)):\n    vif_data.loc[i,'VIF'] = variance_inflation_factor(X.values, i)\n\nprint(vif_data)\n\n      feature           VIF\n0       const  1.201579e+06\n1         mpg  1.243040e+00\n2        year  2.452891e+00\n3     mileage  2.490210e+00\n4  engineSize  1.219170e+00\n\n\nAs all the values of VIF are close to one, we do not have the problem of multicollinearity in the model. Note that the VIF of year and mileage is relatively high as they are the most correlated.\nQ1: Why is the VIF of the constant so high?\nQ2: Why do we need to include the constant while finding the VIF?\n\n\n5.4.3 Manual computation of VIF\n\n#Manually computing the VIF for year\nols_object = smf.ols(formula = 'year~mpg+engineSize+mileage', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nyear\nR-squared:\n0.592\n\n\nModel:\nOLS\nAdj. R-squared:\n0.592\n\n\nMethod:\nLeast Squares\nF-statistic:\n2400.\n\n\nDate:\nMon, 30 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n02:49:19\nLog-Likelihood:\n-10066.\n\n\nNo. Observations:\n4960\nAIC:\n2.014e+04\n\n\nDf Residuals:\n4956\nBIC:\n2.017e+04\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2018.3135\n0.140\n1.44e+04\n0.000\n2018.039\n2018.588\n\n\nmpg\n0.0095\n0.002\n5.301\n0.000\n0.006\n0.013\n\n\nengineSize\n0.1171\n0.037\n3.203\n0.001\n0.045\n0.189\n\n\nmileage\n-9.139e-05\n1.08e-06\n-84.615\n0.000\n-9.35e-05\n-8.93e-05\n\n\n\n\n\n\nOmnibus:\n2949.664\nDurbin-Watson:\n1.161\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n63773.271\n\n\nSkew:\n-2.426\nProb(JB):\n0.00\n\n\nKurtosis:\n19.883\nCond. No.\n1.91e+05\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.91e+05. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#VIF for year\n1/(1-0.592)\n\n2.4509803921568625\n\n\nNote that year and mileage have a high linear correlation. Removing one of them should decrease the standard error of the coefficient of the other, without significanty decrease R-squared.\n\nols_object = smf.ols(formula = 'price~mpg+engineSize+mileage+year', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.660\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n2410.\n\n\nDate:\nTue, 07 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n21:39:45\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.050e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.661e+06\n1.49e+05\n-24.593\n0.000\n-3.95e+06\n-3.37e+06\n\n\nmpg\n-79.3126\n9.338\n-8.493\n0.000\n-97.620\n-61.006\n\n\nengineSize\n1.218e+04\n189.969\n64.107\n0.000\n1.18e+04\n1.26e+04\n\n\nmileage\n-0.1474\n0.009\n-16.817\n0.000\n-0.165\n-0.130\n\n\nyear\n1817.7366\n73.751\n24.647\n0.000\n1673.151\n1962.322\n\n\n\n\n\n\nOmnibus:\n2450.973\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31060.548\n\n\nSkew:\n2.045\nProb(JB):\n0.00\n\n\nKurtosis:\n14.557\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nRemoving mileage from the above regression.\n\nols_object = smf.ols(formula = 'price~mpg+engineSize+year', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.641\n\n\nModel:\nOLS\nAdj. R-squared:\n0.641\n\n\nMethod:\nLeast Squares\nF-statistic:\n2951.\n\n\nDate:\nTue, 07 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n21:40:00\nLog-Likelihood:\n-52635.\n\n\nNo. Observations:\n4960\nAIC:\n1.053e+05\n\n\nDf Residuals:\n4956\nBIC:\n1.053e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-5.586e+06\n9.78e+04\n-57.098\n0.000\n-5.78e+06\n-5.39e+06\n\n\nmpg\n-101.9120\n9.500\n-10.727\n0.000\n-120.536\n-83.288\n\n\nengineSize\n1.196e+04\n194.848\n61.392\n0.000\n1.16e+04\n1.23e+04\n\n\nyear\n2771.1844\n48.492\n57.147\n0.000\n2676.118\n2866.251\n\n\n\n\n\n\nOmnibus:\n2389.075\nDurbin-Watson:\n0.528\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n26920.051\n\n\nSkew:\n2.018\nProb(JB):\n0.00\n\n\nKurtosis:\n13.675\nCond. No.\n1.41e+06\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.41e+06. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the standard error of the coefficient of year has reduced from 73 to 48, without any large reduction in R-squared.\n\n\n5.4.4 When can we overlook multicollinearity?\n\nThe severity of the problems increases with the degree of the multicollinearity. Therefore, if there is only moderate multicollinearity (5 &lt; VIF &lt; 10), we may overlook it.\nMulticollinearity affects only the standard errors of the coefficients of collinear predictors. Therefore, if multicollinearity is not present for the predictors that we are particularly interested in, we may not need to resolve it.\nMulticollinearity affects the standard error of the coefficients and thereby their \\(p\\)-values, but in general, it does not influence the prediction accuracy, except in the case that the coefficients are so unstable that the predictions are outside of the domain space of the response. If our sole aim is prediction, and we don’t wish to infer the statistical significance of predictors, then we may avoid addressing multicollinearity. “The fact that some or all predictor variables are correlated among themselves does not, in general, inhibit our ability to obtain a good fit nor does it tend to affect inferences about mean responses or predictions of new observations, provided these inferences are made within the region of observations” - Neter, John, Michael H. Kutner, Christopher J. Nachtsheim, and William Wasserman. “Applied linear statistical models.” (1996): 318."
  },
  {
    "objectID": "Lec6_Autocorrelation.html",
    "href": "Lec6_Autocorrelation.html",
    "title": "6  Autocorrelation",
    "section": "",
    "text": "7 Remark\nWe saw that with 2-week-lag feature, the \\(R^2\\) only increased a little. The model summary seems still good so we could keep it. However, from the viewpoint of interpretation I may remove it.\nOne may also notice that the 1-day-lag correlation becomes bigger although 1-day-lag feature is already in the model. It is probably because of the multicollinearity between the lag features.\nThe following table shows the correlation between lag features.\ndf[['power_lag_1_day','power_lag_1_week', 'power_lag_2_week' ]].corr()\n\n\n  \n    \n      \n\n\n\n\n\n\npower_lag_1_day\npower_lag_1_week\npower_lag_2_week\n\n\n\n\npower_lag_1_day\n1.000000\n0.768394\n0.745817\n\n\npower_lag_1_week\n0.768394\n1.000000\n0.819955\n\n\npower_lag_2_week\n0.745817\n0.819955\n1.000000"
  },
  {
    "objectID": "Lec6_Autocorrelation.html#introduction",
    "href": "Lec6_Autocorrelation.html#introduction",
    "title": "6  Autocorrelation",
    "section": "6.1 Introduction",
    "text": "6.1 Introduction\nExample: Using linear regression models to predict electricity demand in Toronto, CA.\nWe have hourly power demand and temperature (in Celsius) data from 2017 to 2020.\nWe are going to build a linear model to predict the hourly power demand for the next day (for example, when it is 1/1/2021, we predict hourly demand on 1/2/2021 using historical data and the weather forecasts).\nWhen we are building a model, it is important to keep in mind what data we can use as features. For this model:\n\nWe cannot use previous hourly data as features. (Although in a high frequency setting, it is possible)\nThe temperature in our raw data can not be used directly, since it is the actual, not the forecasted temperature. We are going to use the previous day temperature as the forecast.\n\nSource: Keep it simple, keep it linear: A linear regression model for time series\n\n%pylab inline\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels.api as sm\nplt.rcParams['figure.figsize'] = [9, 5]\n\nPopulating the interactive namespace from numpy and matplotlib\n\n\n\n# A few helper functions\nimport numpy.ma as ma\nfrom scipy.stats.stats import pearsonr, normaltest\nfrom scipy.spatial.distance import correlation\ndef build_model(features):\n  X=sm.add_constant(df[features])\n  y=df['power']\n  model = sm.OLS(y,X, missing='drop').fit()\n  predictions = model.predict(X) \n  display(model.summary()) \n  res=y-predictions\n  return res \n\n\ndef plt_residual(res):\n  plt.plot(range(len(res)), res) \n  plt.ylabel('Residual')\n  plt.xlabel(\"Hour\")\n\ndef plt_residual_lag(res, nlag):\n  x=res.values\n  y=res.shift(nlag).values\n  sns.kdeplot(x,y=y,color='blue',shade=True )\n  plt.xlabel('res')\n  plt.ylabel(\"res-lag-{}\".format(nlag))\n  rho,p=corrcoef(x,y)\n  plt.title(\"n_lag={} hours, correlation={:f}\".format(nlag, rho))\n  \ndef plt_acf(res):\n  plt.rcParams['figure.figsize'] = [18, 5]\n  acorr = sm.tsa.acf(res.dropna(), nlags = len(res.dropna())-1)\n  fig, (ax1, ax2) = plt.subplots(1, 2)\n  ax1.plot(acorr)\n  ax1.set_ylabel('corr')\n  ax1.set_xlabel('n_lag')\n  ax1.set_title('Auto Correlation')\n  ax2.plot(acorr[:4*7*24])\n  ax2.set_ylabel('corr')\n  ax2.set_xlabel('n_lag')\n  ax2.set_title('Auto Correlation (4-week zoomed in) ')\n  plt.show()\n  pd.set_option('display.max_columns', None)\n  adf=pd.DataFrame(np.round(acorr[:30*24],2).reshape([30, 24] ))\n  adf.index.name='day'\n  display(adf)\n  plt.rcParams['figure.figsize'] = [9, 5]\n\ndef corrcoef(x,y):\n    a,b=ma.masked_invalid(x),ma.masked_invalid(y)\n    msk = (~a.mask & ~b.mask)\n    return pearsonr(x[msk],y[msk])[0], normaltest(res, nan_policy='omit')[1]"
  },
  {
    "objectID": "Lec6_Autocorrelation.html#the-data",
    "href": "Lec6_Autocorrelation.html#the-data",
    "title": "6  Autocorrelation",
    "section": "6.2 The data",
    "text": "6.2 The data\n\ndf=pd.read_csv(\"./Datasets/Toronto_power_demand.csv\", parse_dates=['Date'], index_col=0)\ndf['temperature']=df['temperature'].shift(24*1)\ndf.tail()\n\n\n\n\n\n\n\n\nDate\nHour\npower\ntemperature\n\n\nkey\n\n\n\n\n\n\n\n\n20201231:19\n2020-12-31\n19\n5948\n4.9\n\n\n20201231:20\n2020-12-31\n20\n5741\n4.5\n\n\n20201231:21\n2020-12-31\n21\n5527\n3.7\n\n\n20201231:22\n2020-12-31\n22\n5301\n2.9\n\n\n20201231:23\n2020-12-31\n23\n5094\n2.1\n\n\n\n\n\n\n\n\nndays=len(set(df['Date']))\nprint(\"There are {} rows, which is {}*24={}, for {} days. And The data is already in sorted order\" .format(df.shape[0], ndays, ndays*24, ndays))\n\nThere are 35064 rows, which is 1461*24=35064, for 1461 days. And The data is already in sorted order\n\n\n\nprint(\"It is natural to think that there is a relationship between power demand and temperature.\")\nsns.kdeplot(df['temperature'].values, y=df['power'].values,color='blue',shade=True )\nplt.title(\"Power Demand vs Temperature\")\n\nIt is natural to think that there is a relationship between power demand and temperature.\n\n\nText(0.5, 1.0, 'Power Demand vs Temperature')\n\n\n\n\n\n\nprint(\"\"\"\nIt is not a linear relationship. We create two features corresponding to hot and cold weather, which makes \\\nit possible to develop a linear model. \n\"\"\")\nis_hot=(df['temperature']&gt;15).astype(int)\nprint(\"{:f}% of data points are hot\".format(is_hot.mean()*100))\ndf['temp_hot']=df['temperature']*is_hot\ndf['temp_cold']=df['temperature']*(1-is_hot)\ndf.tail()\n\n\nIt is not a linear relationship. We create two features corresponding to hot and cold weather, which makes it possible to develop a linear model. \n\n34.813484% of data points are hot\n\n\n\n\n\n\n\n\n\nDate\nHour\npower\ntemperature\ntemp_hot\ntemp_cold\n\n\nkey\n\n\n\n\n\n\n\n\n\n\n20201231:19\n2020-12-31\n19\n5948\n4.9\n0.0\n4.9\n\n\n20201231:20\n2020-12-31\n20\n5741\n4.5\n0.0\n4.5\n\n\n20201231:21\n2020-12-31\n21\n5527\n3.7\n0.0\n3.7\n\n\n20201231:22\n2020-12-31\n22\n5301\n2.9\n0.0\n2.9\n\n\n20201231:23\n2020-12-31\n23\n5094\n2.1\n0.0\n2.1"
  },
  {
    "objectID": "Lec6_Autocorrelation.html#predictor-temperature",
    "href": "Lec6_Autocorrelation.html#predictor-temperature",
    "title": "6  Autocorrelation",
    "section": "6.3 Predictor: temperature",
    "text": "6.3 Predictor: temperature\n\nres=build_model(['temp_hot', 'temp_cold'])\n\n\nOLS Regression Results\n\n\nDep. Variable:\npower\nR-squared:\n0.195\n\n\nModel:\nOLS\nAdj. R-squared:\n0.195\n\n\nMethod:\nLeast Squares\nF-statistic:\n4251.\n\n\nDate:\nSun, 05 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:15:53\nLog-Likelihood:\n-2.8766e+05\n\n\nNo. Observations:\n35040\nAIC:\n5.753e+05\n\n\nDf Residuals:\n35037\nBIC:\n5.753e+05\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nconst\n5501.3027\n6.222\n884.115\n0.000\n5489.107\n5513.499\n\n\ntemp_hot\n31.8488\n0.462\n68.911\n0.000\n30.943\n32.755\n\n\ntemp_cold\n-37.5088\n0.827\n-45.364\n0.000\n-39.129\n-35.888\n\n\n\n\n\n\nOmnibus:\n945.032\nDurbin-Watson:\n0.093\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n469.200\n\n\nSkew:\n0.034\nProb(JB):\n1.30e-102\n\n\nKurtosis:\n2.437\nCond. No.\n17.0\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nplt_residual(res)  \n\n\n\n\n\nprint(\"acf shows that there is a strong correlation for 24 lags, which is one day.\")\nplt_acf(res)\n\nacf shows that there is a strong correlation for 24 lags, which is one day.\n\n\nC:\\Users\\akl0407\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\stattools.py:667: FutureWarning: fft=True will become the default after the release of the 0.12 release of statsmodels. To suppress this warning, explicitly set fft=False.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.00\n0.95\n0.85\n0.72\n0.56\n0.40\n0.24\n0.09\n-0.02\n-0.11\n-0.16\n-0.20\n-0.22\n-0.21\n-0.19\n-0.14\n-0.07\n0.03\n0.15\n0.30\n0.45\n0.58\n0.70\n0.78\n\n\n1\n0.81\n0.77\n0.68\n0.55\n0.40\n0.25\n0.09\n-0.04\n-0.15\n-0.23\n-0.29\n-0.32\n-0.34\n-0.33\n-0.31\n-0.26\n-0.19\n-0.09\n0.04\n0.18\n0.33\n0.47\n0.58\n0.66\n\n\n2\n0.69\n0.65\n0.57\n0.45\n0.31\n0.16\n0.01\n-0.12\n-0.22\n-0.30\n-0.35\n-0.38\n-0.39\n-0.38\n-0.36\n-0.31\n-0.23\n-0.13\n-0.00\n0.14\n0.29\n0.42\n0.54\n0.62\n\n\n3\n0.64\n0.61\n0.53\n0.42\n0.28\n0.13\n-0.01\n-0.14\n-0.24\n-0.32\n-0.37\n-0.40\n-0.41\n-0.40\n-0.37\n-0.32\n-0.25\n-0.15\n-0.02\n0.12\n0.27\n0.41\n0.52\n0.60\n\n\n4\n0.63\n0.60\n0.52\n0.41\n0.27\n0.12\n-0.02\n-0.14\n-0.24\n-0.32\n-0.37\n-0.40\n-0.40\n-0.39\n-0.36\n-0.31\n-0.24\n-0.13\n-0.01\n0.14\n0.28\n0.42\n0.54\n0.62\n\n\n5\n0.65\n0.62\n0.54\n0.43\n0.30\n0.15\n0.01\n-0.11\n-0.21\n-0.28\n-0.33\n-0.36\n-0.36\n-0.35\n-0.32\n-0.27\n-0.19\n-0.08\n0.04\n0.19\n0.34\n0.48\n0.60\n0.69\n\n\n6\n0.72\n0.69\n0.61\n0.50\n0.36\n0.21\n0.07\n-0.05\n-0.15\n-0.22\n-0.27\n-0.29\n-0.30\n-0.29\n-0.26\n-0.21\n-0.13\n-0.02\n0.11\n0.25\n0.40\n0.55\n0.67\n0.75\n\n\n7\n0.78\n0.75\n0.67\n0.54\n0.40\n0.25\n0.10\n-0.03\n-0.13\n-0.21\n-0.26\n-0.29\n-0.30\n-0.30\n-0.27\n-0.22\n-0.15\n-0.05\n0.07\n0.21\n0.36\n0.49\n0.61\n0.69\n\n\n8\n0.71\n0.68\n0.60\n0.48\n0.34\n0.19\n0.04\n-0.09\n-0.19\n-0.27\n-0.32\n-0.35\n-0.36\n-0.36\n-0.33\n-0.28\n-0.21\n-0.12\n0.01\n0.14\n0.29\n0.42\n0.53\n0.61\n\n\n9\n0.64\n0.61\n0.53\n0.41\n0.27\n0.13\n-0.02\n-0.14\n-0.24\n-0.32\n-0.37\n-0.40\n-0.41\n-0.40\n-0.37\n-0.32\n-0.25\n-0.15\n-0.03\n0.11\n0.26\n0.39\n0.50\n0.58\n\n\n10\n0.61\n0.58\n0.50\n0.39\n0.25\n0.11\n-0.03\n-0.16\n-0.26\n-0.33\n-0.38\n-0.40\n-0.41\n-0.40\n-0.38\n-0.33\n-0.25\n-0.15\n-0.03\n0.11\n0.26\n0.39\n0.50\n0.58\n\n\n11\n0.61\n0.58\n0.51\n0.39\n0.26\n0.12\n-0.02\n-0.14\n-0.24\n-0.32\n-0.36\n-0.39\n-0.40\n-0.39\n-0.36\n-0.31\n-0.24\n-0.14\n-0.01\n0.13\n0.28\n0.41\n0.53\n0.61\n\n\n12\n0.63\n0.61\n0.53\n0.42\n0.28\n0.14\n0.00\n-0.12\n-0.22\n-0.29\n-0.33\n-0.36\n-0.36\n-0.35\n-0.32\n-0.27\n-0.19\n-0.09\n0.04\n0.18\n0.33\n0.47\n0.59\n0.67\n\n\n13\n0.70\n0.67\n0.60\n0.48\n0.35\n0.20\n0.06\n-0.06\n-0.16\n-0.23\n-0.27\n-0.30\n-0.30\n-0.29\n-0.26\n-0.21\n-0.14\n-0.03\n0.09\n0.24\n0.39\n0.53\n0.65\n0.73\n\n\n14\n0.76\n0.73\n0.64\n0.52\n0.38\n0.23\n0.09\n-0.04\n-0.14\n-0.22\n-0.27\n-0.30\n-0.31\n-0.30\n-0.27\n-0.23\n-0.16\n-0.06\n0.06\n0.20\n0.34\n0.48\n0.59\n0.66\n\n\n15\n0.69\n0.66\n0.58\n0.46\n0.32\n0.17\n0.03\n-0.10\n-0.20\n-0.28\n-0.33\n-0.36\n-0.38\n-0.37\n-0.35\n-0.30\n-0.23\n-0.14\n-0.02\n0.12\n0.26\n0.39\n0.50\n0.58\n\n\n16\n0.60\n0.57\n0.50\n0.38\n0.25\n0.10\n-0.04\n-0.16\n-0.26\n-0.34\n-0.38\n-0.41\n-0.42\n-0.41\n-0.39\n-0.34\n-0.27\n-0.17\n-0.05\n0.09\n0.23\n0.36\n0.48\n0.55\n\n\n17\n0.58\n0.55\n0.47\n0.36\n0.23\n0.09\n-0.05\n-0.17\n-0.27\n-0.34\n-0.39\n-0.42\n-0.43\n-0.42\n-0.39\n-0.35\n-0.27\n-0.18\n-0.05\n0.08\n0.23\n0.36\n0.47\n0.55\n\n\n18\n0.57\n0.55\n0.47\n0.36\n0.23\n0.09\n-0.05\n-0.17\n-0.27\n-0.34\n-0.39\n-0.41\n-0.42\n-0.41\n-0.38\n-0.34\n-0.26\n-0.17\n-0.04\n0.10\n0.24\n0.37\n0.48\n0.56\n\n\n19\n0.59\n0.57\n0.49\n0.38\n0.25\n0.11\n-0.03\n-0.14\n-0.24\n-0.31\n-0.35\n-0.38\n-0.38\n-0.37\n-0.34\n-0.29\n-0.22\n-0.11\n0.01\n0.15\n0.30\n0.44\n0.55\n0.64\n\n\n20\n0.67\n0.64\n0.56\n0.45\n0.32\n0.18\n0.04\n-0.08\n-0.17\n-0.24\n-0.29\n-0.31\n-0.32\n-0.31\n-0.28\n-0.23\n-0.16\n-0.06\n0.07\n0.21\n0.36\n0.49\n0.61\n0.69\n\n\n21\n0.72\n0.69\n0.61\n0.49\n0.36\n0.21\n0.07\n-0.06\n-0.16\n-0.23\n-0.28\n-0.31\n-0.32\n-0.32\n-0.29\n-0.25\n-0.18\n-0.08\n0.03\n0.17\n0.31\n0.44\n0.56\n0.63\n\n\n22\n0.66\n0.63\n0.55\n0.43\n0.29\n0.15\n0.01\n-0.12\n-0.22\n-0.29\n-0.34\n-0.37\n-0.38\n-0.38\n-0.35\n-0.31\n-0.24\n-0.15\n-0.03\n0.10\n0.24\n0.37\n0.48\n0.55\n\n\n23\n0.58\n0.55\n0.47\n0.36\n0.23\n0.09\n-0.05\n-0.17\n-0.27\n-0.34\n-0.39\n-0.42\n-0.43\n-0.42\n-0.39\n-0.35\n-0.28\n-0.18\n-0.06\n0.07\n0.21\n0.34\n0.45\n0.53\n\n\n24\n0.55\n0.52\n0.45\n0.34\n0.21\n0.07\n-0.07\n-0.19\n-0.29\n-0.36\n-0.40\n-0.43\n-0.44\n-0.43\n-0.40\n-0.36\n-0.29\n-0.19\n-0.07\n0.06\n0.20\n0.33\n0.44\n0.52\n\n\n25\n0.55\n0.52\n0.45\n0.34\n0.21\n0.07\n-0.07\n-0.19\n-0.28\n-0.35\n-0.40\n-0.42\n-0.43\n-0.42\n-0.39\n-0.35\n-0.28\n-0.18\n-0.06\n0.08\n0.22\n0.35\n0.46\n0.54\n\n\n26\n0.57\n0.54\n0.47\n0.36\n0.23\n0.09\n-0.04\n-0.16\n-0.25\n-0.32\n-0.36\n-0.39\n-0.39\n-0.38\n-0.35\n-0.30\n-0.23\n-0.13\n-0.00\n0.13\n0.28\n0.42\n0.53\n0.61\n\n\n27\n0.64\n0.61\n0.54\n0.43\n0.30\n0.16\n0.03\n-0.09\n-0.19\n-0.25\n-0.30\n-0.32\n-0.33\n-0.32\n-0.29\n-0.24\n-0.17\n-0.07\n0.06\n0.19\n0.34\n0.48\n0.59\n0.67\n\n\n28\n0.70\n0.67\n0.59\n0.47\n0.34\n0.19\n0.05\n-0.07\n-0.17\n-0.24\n-0.29\n-0.32\n-0.33\n-0.33\n-0.30\n-0.26\n-0.19\n-0.10\n0.02\n0.15\n0.29\n0.42\n0.53\n0.61\n\n\n29\n0.63\n0.60\n0.53\n0.41\n0.28\n0.13\n-0.01\n-0.13\n-0.23\n-0.30\n-0.35\n-0.38\n-0.39\n-0.39\n-0.37\n-0.32\n-0.26\n-0.16\n-0.05\n0.08\n0.22\n0.35\n0.46\n0.53\n\n\n\n\n\n\n\n\nprint(\"Although 1 hour lag correlation is more strong, but we cannot use it, as we intend to predict \\\nthe power consumption for the next day.\")\nplt_residual_lag(res,1)\nplt.show()\nplt_residual_lag(res,24)\n\nAlthough 1 hour lag correlation is more strong, but we cannot use it, as we intend to predict the power consumption for the next day."
  },
  {
    "objectID": "Lec6_Autocorrelation.html#predictors-temperature-one-day-lag-of-power.",
    "href": "Lec6_Autocorrelation.html#predictors-temperature-one-day-lag-of-power.",
    "title": "6  Autocorrelation",
    "section": "6.4 Predictors: Temperature + one day lag of power.",
    "text": "6.4 Predictors: Temperature + one day lag of power.\n\ndf['power_lag_1_day']=df['power'].shift(24)\ndf.tail()\n\n\n  \n    \n      \n\n\n\n\n\n\nkey\nDate\nHour\npower\ntemperature\ntemp_hot\ntemp_cold\npower_lag_1_day\n\n\n\n\n35059\n20201231:19\n2020-12-31\n19\n5948\n4.9\n0.0\n4.9\n6163.0\n\n\n35060\n20201231:20\n2020-12-31\n20\n5741\n4.5\n0.0\n4.5\n5983.0\n\n\n35061\n20201231:21\n2020-12-31\n21\n5527\n3.7\n0.0\n3.7\n5727.0\n\n\n35062\n20201231:22\n2020-12-31\n22\n5301\n2.9\n0.0\n2.9\n5428.0\n\n\n35063\n20201231:23\n2020-12-31\n23\n5094\n2.1\n0.0\n2.1\n5104.0\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nres=build_model(['temp_hot', 'temp_cold', 'power_lag_1_day' ])\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n  x = pd.concat(x[::order], 1)\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\npower\nR-squared:\n0.794\n\n\nModel:\nOLS\nAdj. R-squared:\n0.794\n\n\nMethod:\nLeast Squares\nF-statistic:\n4.513e+04\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n19:21:14\nLog-Likelihood:\n-2.6375e+05\n\n\nNo. Observations:\n35040\nAIC:\n5.275e+05\n\n\nDf Residuals:\n35036\nBIC:\n5.275e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nconst\n689.2701\n15.384\n44.806\n0.000\n659.118\n719.422\n\n\ntemp_hot\n3.2158\n0.250\n12.853\n0.000\n2.725\n3.706\n\n\ntemp_cold\n-1.3464\n0.433\n-3.110\n0.002\n-2.195\n-0.498\n\n\npower_lag_1_day\n0.8747\n0.003\n319.552\n0.000\n0.869\n0.880\n\n\n\n\n\n\nOmnibus:\n2035.537\nDurbin-Watson:\n0.041\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n5794.290\n\n\nSkew:\n0.301\nProb(JB):\n0.00\n\n\nKurtosis:\n4.899\nCond. No.\n3.69e+04\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.69e+04. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nplt_residual(res)\n\n\n\n\n\nplt_acf(res)\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/stattools.py:667: FutureWarning: fft=True will become the default after the release of the 0.12 release of statsmodels. To suppress this warning, explicitly set fft=False.\n  warnings.warn(\n\n\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.00\n0.98\n0.93\n0.87\n0.81\n0.75\n0.70\n0.64\n0.59\n0.54\n0.50\n0.46\n0.42\n0.39\n0.35\n0.31\n0.28\n0.25\n0.22\n0.20\n0.17\n0.15\n0.12\n0.09\n\n\n1\n0.07\n0.05\n0.03\n0.00\n-0.02\n-0.04\n-0.06\n-0.08\n-0.10\n-0.12\n-0.14\n-0.15\n-0.16\n-0.17\n-0.18\n-0.19\n-0.19\n-0.20\n-0.20\n-0.20\n-0.21\n-0.21\n-0.22\n-0.22\n\n\n2\n-0.23\n-0.23\n-0.22\n-0.22\n-0.21\n-0.21\n-0.21\n-0.21\n-0.21\n-0.20\n-0.20\n-0.19\n-0.18\n-0.18\n-0.17\n-0.16\n-0.15\n-0.14\n-0.12\n-0.11\n-0.10\n-0.09\n-0.08\n-0.08\n\n\n3\n-0.07\n-0.07\n-0.07\n-0.07\n-0.08\n-0.09\n-0.09\n-0.10\n-0.11\n-0.11\n-0.11\n-0.12\n-0.12\n-0.12\n-0.11\n-0.11\n-0.11\n-0.10\n-0.09\n-0.09\n-0.08\n-0.07\n-0.07\n-0.07\n\n\n4\n-0.07\n-0.07\n-0.07\n-0.08\n-0.09\n-0.10\n-0.11\n-0.12\n-0.13\n-0.14\n-0.14\n-0.15\n-0.16\n-0.16\n-0.16\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n-0.18\n-0.18\n\n\n5\n-0.18\n-0.18\n-0.17\n-0.17\n-0.17\n-0.16\n-0.16\n-0.16\n-0.16\n-0.15\n-0.14\n-0.14\n-0.13\n-0.12\n-0.10\n-0.09\n-0.07\n-0.05\n-0.04\n-0.02\n0.00\n0.02\n0.04\n0.06\n\n\n6\n0.07\n0.08\n0.09\n0.09\n0.10\n0.10\n0.11\n0.12\n0.13\n0.14\n0.16\n0.18\n0.19\n0.21\n0.23\n0.25\n0.27\n0.30\n0.33\n0.36\n0.39\n0.43\n0.46\n0.48\n\n\n7\n0.50\n0.49\n0.46\n0.43\n0.40\n0.37\n0.34\n0.31\n0.28\n0.26\n0.24\n0.22\n0.21\n0.19\n0.18\n0.16\n0.15\n0.14\n0.13\n0.13\n0.12\n0.12\n0.12\n0.11\n\n\n8\n0.10\n0.09\n0.07\n0.06\n0.04\n0.02\n-0.00\n-0.02\n-0.04\n-0.05\n-0.07\n-0.08\n-0.09\n-0.10\n-0.11\n-0.11\n-0.12\n-0.12\n-0.13\n-0.13\n-0.13\n-0.14\n-0.15\n-0.15\n\n\n9\n-0.16\n-0.16\n-0.16\n-0.15\n-0.16\n-0.16\n-0.16\n-0.16\n-0.16\n-0.16\n-0.15\n-0.15\n-0.14\n-0.14\n-0.13\n-0.12\n-0.11\n-0.10\n-0.09\n-0.07\n-0.06\n-0.05\n-0.04\n-0.04\n\n\n10\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.05\n-0.06\n-0.06\n-0.07\n-0.07\n-0.07\n-0.07\n-0.07\n-0.07\n-0.07\n-0.06\n-0.05\n-0.05\n-0.04\n-0.03\n-0.02\n-0.02\n-0.01\n\n\n11\n-0.01\n-0.01\n-0.02\n-0.03\n-0.03\n-0.04\n-0.05\n-0.06\n-0.07\n-0.08\n-0.09\n-0.10\n-0.11\n-0.11\n-0.11\n-0.12\n-0.12\n-0.12\n-0.12\n-0.12\n-0.12\n-0.12\n-0.13\n-0.13\n\n\n12\n-0.14\n-0.14\n-0.13\n-0.13\n-0.13\n-0.13\n-0.14\n-0.14\n-0.13\n-0.13\n-0.13\n-0.12\n-0.11\n-0.10\n-0.09\n-0.08\n-0.06\n-0.05\n-0.03\n-0.01\n0.01\n0.03\n0.05\n0.07\n\n\n13\n0.08\n0.09\n0.10\n0.10\n0.11\n0.11\n0.12\n0.13\n0.14\n0.15\n0.17\n0.18\n0.20\n0.22\n0.23\n0.26\n0.28\n0.31\n0.33\n0.36\n0.40\n0.43\n0.46\n0.48\n\n\n14\n0.49\n0.48\n0.46\n0.43\n0.40\n0.37\n0.34\n0.31\n0.28\n0.26\n0.24\n0.23\n0.21\n0.20\n0.18\n0.17\n0.15\n0.14\n0.13\n0.13\n0.12\n0.12\n0.12\n0.11\n\n\n15\n0.10\n0.09\n0.07\n0.05\n0.03\n0.01\n-0.01\n-0.03\n-0.05\n-0.07\n-0.08\n-0.10\n-0.11\n-0.12\n-0.13\n-0.14\n-0.14\n-0.15\n-0.15\n-0.15\n-0.15\n-0.16\n-0.16\n-0.17\n\n\n16\n-0.17\n-0.17\n-0.17\n-0.17\n-0.16\n-0.16\n-0.17\n-0.17\n-0.16\n-0.16\n-0.16\n-0.16\n-0.15\n-0.14\n-0.13\n-0.12\n-0.11\n-0.10\n-0.09\n-0.07\n-0.06\n-0.05\n-0.04\n-0.03\n\n\n17\n-0.03\n-0.02\n-0.02\n-0.03\n-0.03\n-0.04\n-0.04\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.04\n-0.04\n-0.03\n-0.03\n-0.03\n-0.03\n\n\n18\n-0.03\n-0.04\n-0.04\n-0.05\n-0.06\n-0.08\n-0.09\n-0.10\n-0.11\n-0.12\n-0.13\n-0.14\n-0.15\n-0.15\n-0.16\n-0.16\n-0.16\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n-0.17\n\n\n19\n-0.17\n-0.17\n-0.16\n-0.16\n-0.15\n-0.15\n-0.15\n-0.15\n-0.14\n-0.13\n-0.13\n-0.12\n-0.11\n-0.10\n-0.09\n-0.07\n-0.05\n-0.03\n-0.02\n0.00\n0.03\n0.05\n0.07\n0.08\n\n\n20\n0.10\n0.10\n0.11\n0.11\n0.12\n0.12\n0.12\n0.13\n0.14\n0.15\n0.17\n0.18\n0.20\n0.21\n0.23\n0.25\n0.27\n0.29\n0.32\n0.35\n0.38\n0.41\n0.44\n0.47\n\n\n21\n0.47\n0.46\n0.44\n0.41\n0.38\n0.35\n0.32\n0.29\n0.26\n0.24\n0.22\n0.21\n0.19\n0.18\n0.16\n0.15\n0.13\n0.13\n0.12\n0.12\n0.11\n0.11\n0.11\n0.10\n\n\n22\n0.10\n0.09\n0.07\n0.05\n0.03\n0.01\n-0.00\n-0.02\n-0.04\n-0.05\n-0.07\n-0.08\n-0.09\n-0.10\n-0.10\n-0.11\n-0.12\n-0.12\n-0.12\n-0.13\n-0.13\n-0.13\n-0.14\n-0.14\n\n\n23\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.14\n-0.13\n-0.13\n-0.13\n-0.12\n-0.11\n-0.11\n-0.10\n-0.09\n-0.08\n-0.07\n-0.06\n-0.05\n-0.04\n-0.03\n\n\n24\n-0.03\n-0.03\n-0.03\n-0.04\n-0.05\n-0.05\n-0.06\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.09\n-0.09\n-0.08\n-0.08\n-0.08\n-0.07\n-0.06\n-0.05\n-0.05\n-0.04\n-0.04\n-0.03\n\n\n25\n-0.03\n-0.04\n-0.04\n-0.05\n-0.06\n-0.07\n-0.08\n-0.09\n-0.10\n-0.11\n-0.12\n-0.13\n-0.14\n-0.14\n-0.15\n-0.15\n-0.15\n-0.15\n-0.16\n-0.16\n-0.16\n-0.16\n-0.16\n-0.16\n\n\n26\n-0.17\n-0.17\n-0.16\n-0.16\n-0.16\n-0.15\n-0.15\n-0.15\n-0.15\n-0.14\n-0.13\n-0.13\n-0.12\n-0.11\n-0.10\n-0.08\n-0.07\n-0.05\n-0.03\n-0.01\n0.01\n0.03\n0.05\n0.07\n\n\n27\n0.08\n0.09\n0.10\n0.11\n0.11\n0.12\n0.12\n0.13\n0.14\n0.16\n0.18\n0.19\n0.21\n0.22\n0.24\n0.26\n0.28\n0.31\n0.34\n0.37\n0.40\n0.43\n0.46\n0.48\n\n\n28\n0.49\n0.48\n0.45\n0.42\n0.39\n0.36\n0.33\n0.30\n0.27\n0.25\n0.23\n0.22\n0.20\n0.19\n0.17\n0.16\n0.14\n0.13\n0.12\n0.12\n0.11\n0.11\n0.11\n0.10\n\n\n29\n0.09\n0.08\n0.06\n0.04\n0.02\n-0.00\n-0.02\n-0.04\n-0.06\n-0.08\n-0.09\n-0.10\n-0.12\n-0.13\n-0.14\n-0.14\n-0.15\n-0.15\n-0.16\n-0.16\n-0.16\n-0.17\n-0.17\n-0.18\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nplt_residual_lag(res, 1)\n\n\n\n\n\nplt_residual_lag(res, 24)\n\n\n\n\n\nplt_residual_lag(res, 24*7)"
  },
  {
    "objectID": "Lec6_Autocorrelation.html#predictors-temperature-1-day-lag-of-power-1-week-lag-of-power",
    "href": "Lec6_Autocorrelation.html#predictors-temperature-1-day-lag-of-power-1-week-lag-of-power",
    "title": "6  Autocorrelation",
    "section": "6.5 Predictors: Temperature + 1 day lag of power + 1 week lag of power",
    "text": "6.5 Predictors: Temperature + 1 day lag of power + 1 week lag of power\n\ndf['power_lag_1_week']=df['power'].shift(24*7)\ndf.tail()\n\n\n  \n    \n      \n\n\n\n\n\n\nkey\nDate\nHour\npower\ntemperature\ntemp_hot\ntemp_cold\npower_lag_1_day\npower_lag_1_week\n\n\n\n\n35059\n20201231:19\n2020-12-31\n19\n5948\n4.9\n0.0\n4.9\n6163.0\n5833.0\n\n\n35060\n20201231:20\n2020-12-31\n20\n5741\n4.5\n0.0\n4.5\n5983.0\n5665.0\n\n\n35061\n20201231:21\n2020-12-31\n21\n5527\n3.7\n0.0\n3.7\n5727.0\n5474.0\n\n\n35062\n20201231:22\n2020-12-31\n22\n5301\n2.9\n0.0\n2.9\n5428.0\n5273.0\n\n\n35063\n20201231:23\n2020-12-31\n23\n5094\n2.1\n0.0\n2.1\n5104.0\n5010.0\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nres=build_model(['temp_hot', 'temp_cold', 'power_lag_1_day', 'power_lag_1_week' ])\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n  x = pd.concat(x[::order], 1)\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\npower\nR-squared:\n0.840\n\n\nModel:\nOLS\nAdj. R-squared:\n0.840\n\n\nMethod:\nLeast Squares\nF-statistic:\n4.585e+04\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n19:22:49\nLog-Likelihood:\n-2.5830e+05\n\n\nNo. Observations:\n34896\nAIC:\n5.166e+05\n\n\nDf Residuals:\n34891\nBIC:\n5.167e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nconst\n290.4344\n14.166\n20.502\n0.000\n262.668\n318.201\n\n\ntemp_hot\n3.2967\n0.221\n14.896\n0.000\n2.863\n3.730\n\n\ntemp_cold\n-4.5938\n0.385\n-11.943\n0.000\n-5.348\n-3.840\n\n\npower_lag_1_day\n0.6114\n0.004\n170.709\n0.000\n0.604\n0.618\n\n\npower_lag_1_week\n0.3342\n0.003\n99.595\n0.000\n0.328\n0.341\n\n\n\n\n\n\nOmnibus:\n2729.372\nDurbin-Watson:\n0.037\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n11234.560\n\n\nSkew:\n0.299\nProb(JB):\n0.00\n\n\nKurtosis:\n5.715\nCond. No.\n5.43e+04\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 5.43e+04. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nplt_residual(res)\n\n\n\n\n\nplt_acf(res)\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/stattools.py:667: FutureWarning: fft=True will become the default after the release of the 0.12 release of statsmodels. To suppress this warning, explicitly set fft=False.\n  warnings.warn(\n\n\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.00\n0.98\n0.94\n0.89\n0.84\n0.79\n0.74\n0.70\n0.65\n0.61\n0.58\n0.54\n0.51\n0.48\n0.45\n0.42\n0.39\n0.37\n0.34\n0.32\n0.30\n0.27\n0.25\n0.22\n\n\n1\n0.20\n0.18\n0.16\n0.14\n0.12\n0.10\n0.09\n0.07\n0.06\n0.04\n0.03\n0.02\n0.01\n0.00\n-0.00\n-0.01\n-0.02\n-0.02\n-0.02\n-0.03\n-0.03\n-0.04\n-0.04\n-0.05\n\n\n2\n-0.05\n-0.06\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.03\n-0.03\n-0.02\n-0.02\n-0.01\n-0.01\n-0.00\n-0.00\n0.00\n0.00\n\n\n3\n0.00\n0.00\n0.00\n-0.00\n-0.00\n-0.01\n-0.01\n-0.01\n-0.02\n-0.02\n-0.02\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.02\n-0.02\n-0.02\n-0.03\n\n\n4\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.07\n-0.08\n-0.08\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n\n\n5\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.07\n-0.07\n-0.07\n-0.06\n-0.06\n-0.05\n-0.05\n-0.04\n-0.04\n-0.03\n-0.02\n-0.02\n-0.01\n-0.00\n0.00\n0.01\n0.02\n0.03\n0.03\n\n\n6\n0.03\n0.03\n0.03\n0.03\n0.03\n0.03\n0.03\n0.03\n0.03\n0.04\n0.04\n0.05\n0.05\n0.05\n0.06\n0.06\n0.06\n0.07\n0.07\n0.08\n0.08\n0.09\n0.09\n0.10\n\n\n7\n0.10\n0.10\n0.09\n0.08\n0.06\n0.05\n0.05\n0.04\n0.03\n0.02\n0.01\n0.01\n0.00\n-0.01\n-0.02\n-0.03\n-0.03\n-0.04\n-0.05\n-0.06\n-0.06\n-0.07\n-0.07\n-0.07\n\n\n8\n-0.08\n-0.08\n-0.08\n-0.09\n-0.09\n-0.09\n-0.09\n-0.10\n-0.10\n-0.10\n-0.10\n-0.11\n-0.11\n-0.11\n-0.12\n-0.12\n-0.13\n-0.13\n-0.13\n-0.14\n-0.15\n-0.15\n-0.16\n-0.16\n\n\n9\n-0.17\n-0.16\n-0.16\n-0.15\n-0.15\n-0.14\n-0.14\n-0.13\n-0.13\n-0.12\n-0.12\n-0.11\n-0.11\n-0.10\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n\n\n10\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.03\n-0.03\n-0.03\n-0.03\n-0.02\n-0.02\n-0.02\n-0.01\n-0.01\n\n\n11\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.02\n-0.02\n-0.02\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n-0.06\n-0.06\n\n\n12\n-0.07\n-0.07\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.03\n-0.03\n-0.02\n-0.01\n-0.01\n0.00\n0.01\n0.02\n0.03\n0.04\n0.04\n\n\n13\n0.05\n0.06\n0.06\n0.07\n0.08\n0.08\n0.09\n0.10\n0.11\n0.12\n0.13\n0.14\n0.15\n0.16\n0.17\n0.18\n0.19\n0.20\n0.22\n0.23\n0.25\n0.26\n0.28\n0.29\n\n\n14\n0.29\n0.29\n0.27\n0.26\n0.24\n0.23\n0.21\n0.20\n0.19\n0.18\n0.17\n0.16\n0.15\n0.14\n0.13\n0.12\n0.11\n0.10\n0.09\n0.08\n0.07\n0.07\n0.06\n0.06\n\n\n15\n0.05\n0.04\n0.03\n0.02\n0.01\n-0.00\n-0.01\n-0.02\n-0.03\n-0.04\n-0.05\n-0.06\n-0.06\n-0.07\n-0.08\n-0.08\n-0.09\n-0.10\n-0.10\n-0.11\n-0.11\n-0.11\n-0.12\n-0.12\n\n\n16\n-0.13\n-0.13\n-0.12\n-0.12\n-0.11\n-0.11\n-0.11\n-0.10\n-0.10\n-0.10\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n\n\n17\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n\n\n18\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n-0.10\n-0.10\n-0.11\n-0.11\n-0.12\n-0.12\n-0.12\n-0.13\n-0.13\n-0.14\n-0.14\n-0.14\n\n\n19\n-0.14\n-0.14\n-0.13\n-0.13\n-0.12\n-0.11\n-0.11\n-0.10\n-0.10\n-0.09\n-0.08\n-0.08\n-0.07\n-0.06\n-0.06\n-0.05\n-0.04\n-0.03\n-0.02\n-0.01\n-0.00\n0.01\n0.01\n0.02\n\n\n20\n0.03\n0.03\n0.04\n0.04\n0.05\n0.05\n0.06\n0.07\n0.07\n0.08\n0.09\n0.10\n0.11\n0.12\n0.13\n0.14\n0.15\n0.16\n0.17\n0.19\n0.20\n0.22\n0.23\n0.24\n\n\n21\n0.25\n0.24\n0.23\n0.22\n0.20\n0.19\n0.17\n0.16\n0.14\n0.13\n0.12\n0.11\n0.11\n0.10\n0.09\n0.08\n0.07\n0.06\n0.06\n0.05\n0.05\n0.04\n0.04\n0.04\n\n\n22\n0.04\n0.03\n0.02\n0.02\n0.01\n0.00\n-0.01\n-0.01\n-0.02\n-0.03\n-0.03\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n\n\n23\n-0.10\n-0.10\n-0.09\n-0.09\n-0.09\n-0.08\n-0.08\n-0.08\n-0.07\n-0.07\n-0.07\n-0.07\n-0.07\n-0.06\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n\n\n24\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n\n\n25\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.09\n-0.09\n-0.10\n-0.10\n-0.10\n-0.11\n-0.11\n-0.12\n-0.12\n-0.13\n\n\n26\n-0.13\n-0.13\n-0.12\n-0.12\n-0.11\n-0.11\n-0.10\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n-0.05\n-0.04\n-0.03\n-0.02\n-0.02\n-0.01\n0.00\n0.01\n\n\n27\n0.02\n0.03\n0.03\n0.04\n0.05\n0.06\n0.06\n0.07\n0.08\n0.10\n0.11\n0.12\n0.13\n0.14\n0.15\n0.16\n0.17\n0.18\n0.20\n0.21\n0.23\n0.24\n0.25\n0.27\n\n\n28\n0.27\n0.27\n0.25\n0.24\n0.22\n0.21\n0.19\n0.18\n0.17\n0.15\n0.14\n0.14\n0.13\n0.12\n0.11\n0.10\n0.09\n0.08\n0.08\n0.07\n0.06\n0.06\n0.05\n0.05\n\n\n29\n0.04\n0.03\n0.02\n0.02\n0.01\n-0.00\n-0.01\n-0.02\n-0.03\n-0.04\n-0.04\n-0.05\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n-0.10\n-0.11\n-0.12\n-0.12\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nplt_residual_lag(res, 1)\n\n\n\n\n\nplt_residual_lag(res, 24)\n\n\n\n\n\nplt_residual_lag(res, 24*7)\n\n\n\n\n\nplt_residual_lag(res, 24*7*2)"
  },
  {
    "objectID": "Lec6_Autocorrelation.html#predictors-temperature-1-day-lag-of-power-1-week-lag-of-power-2-weeks-lag-of-power",
    "href": "Lec6_Autocorrelation.html#predictors-temperature-1-day-lag-of-power-1-week-lag-of-power-2-weeks-lag-of-power",
    "title": "6  Autocorrelation",
    "section": "6.6 Predictors: Temperature + 1 day lag of power + 1 week lag of power + 2 weeks lag of power",
    "text": "6.6 Predictors: Temperature + 1 day lag of power + 1 week lag of power + 2 weeks lag of power\nAlthough the data shows there is a significant (but not strong) correlation, we need to be cautious to use this feature because there are no simple reasons for this relationship.\nFor 1-day-lag feature, the correlation is easily understood.\nFor 1-week-lag feature, we could argue that the behaviour is different between weekday and weekend.\nBut for 2-week-lag feature, it is hard to understand especially when we have included 1-day-lag and 1-week-lag features. The relation is spurious.\n\ndf['power_lag_2_week']=df['power'].shift(24*7*2)\ndf.tail()\n\n\n  \n    \n      \n\n\n\n\n\n\nkey\nDate\nHour\npower\ntemperature\ntemp_hot\ntemp_cold\npower_lag_1_day\npower_lag_1_week\npower_lag_2_week\n\n\n\n\n35059\n20201231:19\n2020-12-31\n19\n5948\n4.9\n0.0\n4.9\n6163.0\n5833.0\n6826.0\n\n\n35060\n20201231:20\n2020-12-31\n20\n5741\n4.5\n0.0\n4.5\n5983.0\n5665.0\n6663.0\n\n\n35061\n20201231:21\n2020-12-31\n21\n5527\n3.7\n0.0\n3.7\n5727.0\n5474.0\n6407.0\n\n\n35062\n20201231:22\n2020-12-31\n22\n5301\n2.9\n0.0\n2.9\n5428.0\n5273.0\n6068.0\n\n\n35063\n20201231:23\n2020-12-31\n23\n5094\n2.1\n0.0\n2.1\n5104.0\n5010.0\n5709.0\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nres=build_model(['temp_hot', 'temp_cold', 'power_lag_1_day','power_lag_1_week', 'power_lag_2_week' ])\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n  x = pd.concat(x[::order], 1)\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\npower\nR-squared:\n0.848\n\n\nModel:\nOLS\nAdj. R-squared:\n0.847\n\n\nMethod:\nLeast Squares\nF-statistic:\n3.860e+04\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n19:25:04\nLog-Likelihood:\n-2.5626e+05\n\n\nNo. Observations:\n34728\nAIC:\n5.125e+05\n\n\nDf Residuals:\n34722\nBIC:\n5.126e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nconst\n200.8402\n14.046\n14.298\n0.000\n173.309\n228.371\n\n\ntemp_hot\n3.2508\n0.217\n14.983\n0.000\n2.826\n3.676\n\n\ntemp_cold\n-5.6865\n0.379\n-15.005\n0.000\n-6.429\n-4.944\n\n\npower_lag_1_day\n0.5637\n0.004\n152.597\n0.000\n0.556\n0.571\n\n\npower_lag_1_week\n0.2415\n0.004\n60.139\n0.000\n0.234\n0.249\n\n\npower_lag_2_week\n0.1565\n0.004\n40.465\n0.000\n0.149\n0.164\n\n\n\n\n\n\nOmnibus:\n2229.659\nDurbin-Watson:\n0.036\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n7850.238\n\n\nSkew:\n0.262\nProb(JB):\n0.00\n\n\nKurtosis:\n5.270\nCond. No.\n6.72e+04\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 6.72e+04. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nplt_acf(res)\n\n/usr/local/lib/python3.8/dist-packages/statsmodels/tsa/stattools.py:667: FutureWarning: fft=True will become the default after the release of the 0.12 release of statsmodels. To suppress this warning, explicitly set fft=False.\n  warnings.warn(\n\n\n\n\n\n\n  \n    \n      \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\nday\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n1.00\n0.98\n0.94\n0.90\n0.85\n0.80\n0.75\n0.71\n0.67\n0.63\n0.59\n0.56\n0.53\n0.50\n0.47\n0.44\n0.41\n0.39\n0.37\n0.35\n0.33\n0.30\n0.28\n0.25\n\n\n1\n0.23\n0.21\n0.20\n0.18\n0.16\n0.14\n0.13\n0.11\n0.10\n0.08\n0.07\n0.06\n0.05\n0.05\n0.04\n0.04\n0.03\n0.03\n0.02\n0.02\n0.01\n0.01\n0.00\n-0.00\n\n\n2\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.01\n-0.00\n-0.00\n0.00\n0.01\n0.01\n0.02\n0.02\n0.02\n0.03\n0.03\n0.03\n0.03\n\n\n3\n0.03\n0.03\n0.03\n0.03\n0.02\n0.02\n0.02\n0.01\n0.01\n0.01\n0.00\n0.00\n0.00\n-0.00\n-0.00\n-0.00\n0.00\n0.00\n0.00\n0.00\n0.01\n0.01\n0.01\n0.01\n\n\n4\n0.01\n0.01\n0.00\n0.00\n0.00\n-0.00\n-0.00\n-0.01\n-0.01\n-0.01\n-0.02\n-0.02\n-0.02\n-0.02\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n\n\n5\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.03\n-0.03\n-0.03\n-0.02\n-0.02\n-0.02\n-0.01\n-0.01\n-0.00\n0.01\n0.01\n0.02\n0.03\n0.03\n0.04\n0.05\n0.05\n0.06\n0.07\n\n\n6\n0.07\n0.07\n0.07\n0.07\n0.07\n0.07\n0.07\n0.07\n0.08\n0.08\n0.09\n0.09\n0.10\n0.10\n0.11\n0.11\n0.12\n0.12\n0.13\n0.14\n0.14\n0.15\n0.16\n0.16\n\n\n7\n0.17\n0.16\n0.15\n0.14\n0.13\n0.12\n0.11\n0.10\n0.09\n0.09\n0.08\n0.07\n0.07\n0.06\n0.05\n0.04\n0.03\n0.03\n0.02\n0.02\n0.01\n0.01\n0.00\n-0.00\n\n\n8\n-0.00\n-0.01\n-0.01\n-0.02\n-0.02\n-0.02\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n\n\n9\n-0.10\n-0.10\n-0.09\n-0.09\n-0.09\n-0.08\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.04\n-0.04\n-0.03\n-0.03\n-0.03\n-0.02\n-0.02\n-0.02\n-0.01\n\n\n10\n-0.01\n-0.01\n-0.01\n-0.01\n-0.00\n-0.00\n-0.00\n-0.00\n-0.00\n-0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n0.01\n0.01\n0.01\n0.01\n0.02\n0.02\n0.02\n0.02\n\n\n11\n0.02\n0.02\n0.02\n0.02\n0.02\n0.02\n0.02\n0.02\n0.02\n0.02\n0.01\n0.01\n0.01\n0.01\n0.01\n0.00\n0.00\n-0.00\n-0.00\n-0.01\n-0.01\n-0.02\n-0.02\n-0.03\n\n\n12\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.02\n-0.02\n-0.02\n-0.02\n-0.01\n-0.01\n-0.01\n-0.00\n0.00\n0.01\n0.01\n0.02\n0.02\n0.03\n0.04\n0.04\n\n\n13\n0.05\n0.05\n0.05\n0.05\n0.06\n0.06\n0.06\n0.07\n0.07\n0.08\n0.08\n0.09\n0.09\n0.10\n0.10\n0.11\n0.11\n0.12\n0.13\n0.13\n0.14\n0.15\n0.16\n0.16\n\n\n14\n0.16\n0.16\n0.15\n0.14\n0.13\n0.12\n0.11\n0.10\n0.09\n0.08\n0.08\n0.07\n0.06\n0.06\n0.05\n0.04\n0.03\n0.02\n0.01\n0.01\n0.00\n-0.01\n-0.01\n-0.02\n\n\n15\n-0.02\n-0.03\n-0.03\n-0.04\n-0.05\n-0.05\n-0.06\n-0.06\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n-0.10\n-0.11\n-0.11\n-0.12\n-0.12\n-0.13\n-0.13\n-0.14\n-0.14\n-0.15\n\n\n16\n-0.15\n-0.15\n-0.14\n-0.14\n-0.13\n-0.13\n-0.12\n-0.12\n-0.11\n-0.11\n-0.11\n-0.10\n-0.10\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n-0.06\n-0.06\n\n\n17\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.04\n-0.05\n\n\n18\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.09\n-0.10\n-0.10\n-0.10\n-0.11\n-0.11\n-0.11\n-0.12\n-0.12\n-0.13\n-0.13\n\n\n19\n-0.13\n-0.13\n-0.12\n-0.11\n-0.11\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.05\n-0.05\n-0.04\n-0.03\n-0.03\n-0.02\n-0.01\n-0.00\n0.00\n0.01\n0.02\n\n\n20\n0.02\n0.03\n0.03\n0.04\n0.04\n0.05\n0.05\n0.06\n0.07\n0.07\n0.08\n0.09\n0.10\n0.10\n0.11\n0.12\n0.13\n0.14\n0.15\n0.16\n0.17\n0.18\n0.20\n0.21\n\n\n21\n0.21\n0.20\n0.19\n0.18\n0.17\n0.16\n0.15\n0.13\n0.12\n0.11\n0.11\n0.10\n0.09\n0.09\n0.08\n0.07\n0.06\n0.06\n0.05\n0.05\n0.04\n0.04\n0.04\n0.03\n\n\n22\n0.03\n0.03\n0.02\n0.02\n0.01\n0.00\n-0.00\n-0.01\n-0.01\n-0.02\n-0.02\n-0.03\n-0.03\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n\n\n23\n-0.08\n-0.08\n-0.08\n-0.08\n-0.07\n-0.07\n-0.07\n-0.06\n-0.06\n-0.06\n-0.06\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n\n\n24\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.04\n-0.04\n-0.04\n-0.04\n-0.04\n\n\n25\n-0.04\n-0.04\n-0.05\n-0.05\n-0.05\n-0.05\n-0.05\n-0.06\n-0.06\n-0.06\n-0.07\n-0.07\n-0.07\n-0.08\n-0.08\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n-0.10\n-0.10\n-0.11\n-0.11\n\n\n26\n-0.11\n-0.11\n-0.11\n-0.10\n-0.10\n-0.09\n-0.09\n-0.08\n-0.08\n-0.08\n-0.07\n-0.07\n-0.06\n-0.06\n-0.05\n-0.05\n-0.04\n-0.03\n-0.03\n-0.02\n-0.01\n-0.01\n0.00\n0.01\n\n\n27\n0.02\n0.02\n0.03\n0.04\n0.04\n0.05\n0.06\n0.07\n0.07\n0.09\n0.10\n0.11\n0.11\n0.12\n0.13\n0.14\n0.15\n0.16\n0.17\n0.18\n0.20\n0.21\n0.22\n0.23\n\n\n28\n0.23\n0.23\n0.22\n0.20\n0.19\n0.18\n0.17\n0.16\n0.15\n0.14\n0.13\n0.12\n0.11\n0.11\n0.10\n0.09\n0.08\n0.08\n0.07\n0.06\n0.06\n0.05\n0.04\n0.04\n\n\n29\n0.03\n0.03\n0.02\n0.01\n0.01\n-0.00\n-0.01\n-0.01\n-0.02\n-0.03\n-0.03\n-0.04\n-0.05\n-0.05\n-0.06\n-0.06\n-0.07\n-0.07\n-0.08\n-0.08\n-0.09\n-0.09\n-0.10\n-0.10\n\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\nplt_residual_lag(res, 1)\n\n\n\n\n\nplt_residual_lag(res, 24)\n\n\n\n\n\nplt_residual_lag(res, 24*7)\n\n\n\n\n\nplt_residual_lag(res, 24*7*2)"
  },
  {
    "objectID": "Lec7_logistic_regression.html#theory-behind-logistic-regression",
    "href": "Lec7_logistic_regression.html#theory-behind-logistic-regression",
    "title": "7  Logistic regression",
    "section": "7.1 Theory Behind Logistic Regression",
    "text": "7.1 Theory Behind Logistic Regression\nLogistic regression is the go-to linear classification algorithm for two-class problems. It is easy to implement, easy to understand and gets great results on a wide variety of problems, even when the expectations the method has for your data are violated.\n\n7.1.1 Description\nLogistic regression is named for the function used at the core of the method, the logistic function.\nThe logistic function, also called the Sigmoid function was developed by statisticians to describe properties of population growth in ecology, rising quickly and maxing out at the carrying capacity of the environment. It’s an S-shaped curve that can take any real-valued number and map it into a value between 0 and 1, but never exactly at those limits.\n\\[\\frac{1}{1 + e^{-x}}\\]\n\\(e\\) is the base of the natural logarithms and \\(x\\) is value that you want to transform via the logistic function.\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.formula.api as sm\n\n\n%matplotlib inline\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\nx = np.linspace(-6, 6, num=1000)\nplt.figure(figsize=(10, 6))\nplt.plot(x, (1 / (1 + np.exp(-x))))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Sigmoid Function\")\n\nText(0.5, 1.0, 'Sigmoid Function')\n\n\n\n\n\nThe logistic regression equation has a very similar representation like linear regression. The difference is that the output value being modelled is binary in nature.\n\\[\\hat{p}=\\frac{e^{\\hat{\\beta_0}+\\hat{\\beta_1}x_1}}{1+e^{\\hat{\\beta_0}+\\hat{\\beta_1}x_1}}\\]\nor\n\\[\\hat{p}=\\frac{1.0}{1.0+e^{-(\\hat{\\beta_0}+\\hat{\\beta_1}x_1)}}\\]\n\\(\\hat{\\beta_0}\\) is the estimated intercept term\n\\(\\hat{\\beta_1}\\) is the estimated coefficient for \\(x_1\\)\n\\(\\hat{p}\\) is the predicted output with real value between 0 and 1. To convert this to binary output of 0 or 1, this would either need to be rounded to an integer value or a cutoff point be provided to specify the class segregation point.\n\n\n7.1.2 Learning the Logistic Regression Model\nThe coefficients (Beta values b) of the logistic regression algorithm must be estimated from your training data. This is done using maximum-likelihood estimation.\nMaximum-likelihood estimation is a common learning algorithm used by a variety of machine learning algorithms, although it does make assumptions about the distribution of your data (more on this when we talk about preparing your data).\nThe best coefficients should result in a model that would predict a value very close to 1 (e.g. male) for the default class and a value very close to 0 (e.g. female) for the other class. The intuition for maximum-likelihood for logistic regression is that a search procedure seeks values for the coefficients (Beta values) that maximize the likelihood of the observed data. In other words, in MLE, we estimate the parameter values (Beta values) which are the most likely to produce that data at hand.\nHere is an analogy to understand the idea behind Maximum Likelihood Estimation (MLE). Let us say, you are listening to a song (data). You are not aware of the singer (parameter) of the song. With just the musical piece at hand, you try to guess the singer (parameter) who you feel is the most likely (MLE) to have sung that song. Your are making a maximum likelihood estimate! Out of all the singers (parameter space) you have chosen them as the one who is the most likely to have sung that song (data).\nWe are not going to go into the math of maximum likelihood. It is enough to say that a minimization algorithm is used to optimize the best values for the coefficients for your training data. This is often implemented in practice using efficient numerical optimization algorithm (like the Quasi-newton method).\nWhen you are learning logistic, you can implement it yourself from scratch using the much simpler gradient descent algorithm.\n\n\n7.1.3 Preparing Data for Logistic Regression\nThe assumptions made by logistic regression about the distribution and relationships in your data are much the same as the assumptions made in linear regression.\nMuch study has gone into defining these assumptions and precise probabilistic and statistical language is used. My advice is to use these as guidelines or rules of thumb and experiment with different data preparation schemes.\nUltimately in predictive modeling machine learning projects you are laser focused on making accurate predictions rather than interpreting the results. As such, you can break some assumptions as long as the model is robust and performs well.\n\nBinary Output Variable: This might be obvious as we have already mentioned it, but logistic regression is intended for binary (two-class) classification problems. It will predict the probability of an instance belonging to the default class, which can be snapped into a 0 or 1 classification.\nRemove Noise: Logistic regression assumes no error in the output variable (y), consider removing outliers and possibly misclassified instances from your training data.\nGaussian Distribution: Logistic regression is a linear algorithm (with a non-linear transform on output). It does assume a linear relationship between the input variables with the output. Data transforms of your input variables that better expose this linear relationship can result in a more accurate model. For example, you can use log, root, Box-Cox and other univariate transforms to better expose this relationship.\nRemove Correlated Inputs: Like linear regression, the model can overfit if you have multiple highly-correlated inputs. Consider calculating the pairwise correlations between all inputs and removing highly correlated inputs.\nFail to Converge: It is possible for the expected likelihood estimation process that learns the coefficients to fail to converge. This can happen if there are many highly correlated inputs in your data or the data is very sparse (e.g. lots of zeros in your input data)."
  },
  {
    "objectID": "Lec7_logistic_regression.html#logistic-regression-scikit-learn-vs-statsmodels",
    "href": "Lec7_logistic_regression.html#logistic-regression-scikit-learn-vs-statsmodels",
    "title": "7  Logistic regression",
    "section": "7.2 Logistic Regression: Scikit-learn vs Statsmodels",
    "text": "7.2 Logistic Regression: Scikit-learn vs Statsmodels\nPython gives us two ways to do logistic regression. Statsmodels offers modeling from the perspective of statistics. Scikit-learn offers some of the same models from the perspective of machine learning.\nSo we need to understand the difference between statistics and machine learning! Statistics makes mathematically valid inferences about a population based on sample data. Statistics answers the question, “What is the evidence that X is related to Y?” Machine learning has the goal of optimizing predictive accuracy rather than inference. Machine learning answers the question, “Given X, what prediction should we make for Y?”\nLet us see the use of statsmodels for logistic regression. We’ll see scikit-learn later in the course, when we learn methods that focus on prediction."
  },
  {
    "objectID": "Lec7_logistic_regression.html#training-a-logistic-regression-model",
    "href": "Lec7_logistic_regression.html#training-a-logistic-regression-model",
    "title": "7  Logistic regression",
    "section": "7.3 Training a logistic regression model",
    "text": "7.3 Training a logistic regression model\nRead the data on social network ads. The data shows if the person purchased a product when targeted with an ad on social media. Fit a logistic regression model to predict if a user will purchase the product based on their characteristics such as age, gender and estimated salary.\n\ntrain = pd.read_csv('./Datasets/Social_Network_Ads_train.csv') #Develop the model on train data\ntest = pd.read_csv('./Datasets/Social_Network_Ads_test.csv') #Test the model on test data\n\n\ntrain.head()\n\n\n\n\n\n\n\n\nUser ID\nGender\nAge\nEstimatedSalary\nPurchased\n\n\n\n\n0\n15755018\nMale\n36\n33000\n0\n\n\n1\n15697020\nFemale\n39\n61000\n0\n\n\n2\n15796351\nMale\n36\n118000\n1\n\n\n3\n15665760\nMale\n39\n122000\n1\n\n\n4\n15794661\nFemale\n26\n118000\n0\n\n\n\n\n\n\n\n\n7.3.1 Examining the Distribution of the Target Column\nMake sure our target is not severely imbalanced.\n\ntrain.Purchased.value_counts()\n\n0    194\n1    106\nName: Purchased, dtype: int64\n\n\n\nsns.countplot(x = 'Purchased',data = train);\n\n\n\n\nLet us try to fit a linear regression model, instead of logistic regression. We fit a linear regression model to predict probability of purchase based on age.\n\nsns.scatterplot(x = 'Age', y = 'Purchased', data = train, color = 'orange') #Visualizing data\nlm = sm.ols(formula = 'Purchased~Age', data = train).fit() #Developing linear regression model\nsns.lineplot(x = 'Age', y= lm.predict(train), data = train, color = 'blue') #Visualizing model\n\n&lt;AxesSubplot:xlabel='Age', ylabel='Purchased'&gt;\n\n\n\n\n\nNote the issues with the linear regression model:\n\nThe regression line goes below 0 and over 1. However, probability of purchase must be in [0,1].\nThe linear regression model does not seem to fit the data well.\n\n\n\n7.3.2 Fitting the logistic regression model\nNow, let us fit a logistic regression model to predict probability of purchase based on Age.\n\nsns.scatterplot(x = 'Age', y = 'Purchased', data = train, color = 'orange') #Visualizing data\nlogit_model = sm.logit(formula = 'Purchased~Age', data = train).fit() #Developing logistic regression model\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') #Visualizing model\n\nOptimization terminated successfully.\n         Current function value: 0.430107\n         Iterations 7\n\n\n&lt;AxesSubplot:xlabel='Age', ylabel='Purchased'&gt;\n\n\n\n\n\nAs logistic regression uses the sigmoid function, the probability stays in [0,1]. Also, it seems to better fit the points as compared to linear regression.\n\nlogit_model.summary()\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n298\n\n\nMethod:\nMLE\nDf Model:\n1\n\n\nDate:\nTue, 19 Apr 2022\nPseudo R-squ.:\n0.3378\n\n\nTime:\n16:46:02\nLog-Likelihood:\n-129.03\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.805e-30\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-7.8102\n0.885\n-8.825\n0.000\n-9.545\n-6.076\n\n\nAge\n0.1842\n0.022\n8.449\n0.000\n0.141\n0.227\n\n\n\n\n\nInterpret the coefficient of age\nFor a unit increase in age, the log odds of purchase increase by 0.18, or the odds of purchase get multiplied by exp(0.18) = 1.2\nIs the increase in probability of purchase constant with a unit increase in age?\nNo, it depends on age.\nIs gender associated with probability of purchase?\n\nlogit_model_gender = sm.logit(formula = 'Purchased~Gender', data = train).fit()\nlogit_model_gender.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.648804\n         Iterations 4\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n298\n\n\nMethod:\nMLE\nDf Model:\n1\n\n\nDate:\nTue, 19 Apr 2022\nPseudo R-squ.:\n0.001049\n\n\nTime:\n16:46:04\nLog-Likelihood:\n-194.64\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n0.5225\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-0.5285\n0.168\n-3.137\n0.002\n-0.859\n-0.198\n\n\nGender[T.Male]\n-0.1546\n0.242\n-0.639\n0.523\n-0.629\n0.319\n\n\n\n\n\nNo, assuming a significance level of \\(\\alpha = 5\\%\\), Gender is not associated with probability of default, as the \\(p\\)-value for Male is greater than 0.05."
  },
  {
    "objectID": "Lec7_logistic_regression.html#confusion-matrix-and-classification-accuracy",
    "href": "Lec7_logistic_regression.html#confusion-matrix-and-classification-accuracy",
    "title": "7  Logistic regression",
    "section": "7.4 Confusion matrix and classification accuracy",
    "text": "7.4 Confusion matrix and classification accuracy\nA confusion matrix is a summary of prediction results on a classification problem. The number of correct and incorrect predictions are summarized with count values and broken down by each class.\n\n#Function to compute confusion matrix and prediction accuracy on training data\ndef confusion_matrix_train(model,cutoff=0.5):\n    # Confusion matrix\n    cm_df = pd.DataFrame(model.pred_table(threshold = cutoff))\n    #Formatting the confusion matrix\n    cm_df.columns = ['Predicted 0', 'Predicted 1'] \n    cm_df = cm_df.rename(index={0: 'Actual 0',1: 'Actual 1'})\n    cm = np.array(cm_df)\n    # Calculate the accuracy\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n\nFind the confusion matrix and classification accuracy of the model with Age as the predictor on training data.\n\ncm = confusion_matrix_train(logit_model)\n\nClassification accuracy = 83.3%\n\n\n\n\n\nConfusion matrix:\n\nEach row: actual class\nEach column: predicted class\n\nFirst row: Non-purchasers, the negative class:\n\n181 were correctly classified as Non-purchasers. True negatives.\nRemaining 13 were wrongly classified as Non-purchasers. False positive\n\nSecond row: Purchasers, the positive class:\n\n37 were incorrectly classified as Non-purchasers. False negatives\n69 were correctly classified Purchasers. True positives\n\n\n#Function to compute confusion matrix and prediction accuracy on test data\ndef confusion_matrix_test(data,actual_values,model,cutoff=0.5):\n#Predict the values using the Logit model\n    pred_values = model.predict(data)\n# Specify the bins\n    bins=np.array([0,cutoff,1])\n#Confusion matrix\n    cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]\n    cm_df = pd.DataFrame(cm)\n    cm_df.columns = ['Predicted 0','Predicted 1']\n    cm_df = cm_df.rename(index={0: 'Actual 0',1:'Actual 1'})\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n\nFind the confusion matrix and classification accuracy of the model with Age as the predictor on test data.\n\nconfusion_matrix_test(test,test.Purchased,logit_model)\n\nClassification accuracy = 86.0%\n\n\n\n\n\nThe model classifies a bit more accurately on test data as compared to the training data, which is a bit unusual. However, it shows that the model did not overfit on training data.\nInclude EstimatedSalary as a predictor in the above model\n\nlogit_model2 = sm.logit(formula = 'Purchased~Age+EstimatedSalary', data = train).fit()\nlogit_model2.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.358910\n         Iterations 7\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n297\n\n\nMethod:\nMLE\nDf Model:\n2\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.4474\n\n\nTime:\n12:03:29\nLog-Likelihood:\n-107.67\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.385e-38\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-11.9432\n1.424\n-8.386\n0.000\n-14.735\n-9.152\n\n\nAge\n0.2242\n0.028\n7.890\n0.000\n0.168\n0.280\n\n\nEstimatedSalary\n3.48e-05\n6.15e-06\n5.660\n0.000\n2.27e-05\n4.68e-05\n\n\n\n\n\n\nconfusion_matrix_train(logit_model2)\n\nClassification accuracy = 83.3%\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Purchased,logit_model2)\n\nClassification accuracy = 89.0%\n\n\n\n\n\nThe log likelihood of the model has increased, while also increasing the prediction accuracy on test data, which shows that the additional predictor is helping explain the response better, without overfitting the data.\nInclude Gender as a predictor in the above model\n\nlogit_model = sm.logit(formula = 'Purchased~Age+EstimatedSalary+Gender', data = train).fit()\nlogit_model.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.357327\n         Iterations 7\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n296\n\n\nMethod:\nMLE\nDf Model:\n3\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.4498\n\n\nTime:\n12:17:28\nLog-Likelihood:\n-107.20\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n9.150e-38\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-12.2531\n1.478\n-8.293\n0.000\n-15.149\n-9.357\n\n\nGender[T.Male]\n0.3356\n0.346\n0.970\n0.332\n-0.342\n1.013\n\n\nAge\n0.2275\n0.029\n7.888\n0.000\n0.171\n0.284\n\n\nEstimatedSalary\n3.494e-05\n6.17e-06\n5.666\n0.000\n2.29e-05\n4.7e-05\n\n\n\n\n\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 84.3%\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Purchased,logit_model)\n\nClassification accuracy = 88.0%\n\n\n\n\n\nGender is a statistically insignificant predictor, and including it slightly lowers the classification accuracy on test data. Note that the classification accuracy on training data will continue to increase on adding more predictors, irrespective of their relevance (similar to the idea of RSS on training data in linear regression).\nIs there a residual in logistic regression?\nNo, since the response is assumed to have a Bernoulli distribution, instead of a normal distribution.\nIs the odds ratio for a unit increase in a predictor \\(X_j\\), a constant (assuming that the rest of the predictors are held constant)?\nYes, the odds ratio in this case will \\(e^{\\beta_j}\\)"
  },
  {
    "objectID": "Lec7_logistic_regression.html#variable-transformations-in-logistic-regression",
    "href": "Lec7_logistic_regression.html#variable-transformations-in-logistic-regression",
    "title": "7  Logistic regression",
    "section": "7.5 Variable transformations in logistic regression",
    "text": "7.5 Variable transformations in logistic regression\nRead the dataset diabetes.csv that contains if a person has diabetes (Outcome = 1) based on health parameters such as BMI, blood pressure, age etc. Develop a model to predict the probability of a person having diabetes based on their age.\n\ndata = pd.read_csv('./Datasets/diabetes.csv')\n\n\ndata.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\nRandomly select 80% of the observations to create a training dataset. Create a test dataset with the remaining 20% observations.\n\n#Creating training and test datasets\nnp.random.seed(2)\ntrain = data.sample(round(data.shape[0]*0.8))\ntest = data.drop(train.index)\n\nDoes Age seem to distinguish Outcome levels?\n\nsns.boxplot(x = 'Outcome', y = 'Age', data = train)\n\n&lt;AxesSubplot:xlabel='Outcome', ylabel='Age'&gt;\n\n\n\n\n\nYes it does!\nDevelop and visualize a logistic regression model to predict Outcome using Age.\n\n#Jittering points to better see the density of points in any given region of the plot\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~Age', data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \nprint(logit_model.llf) #Printing the log likelihood to compare it with the next model we build\n\nOptimization terminated successfully.\n         Current function value: 0.612356\n         Iterations 5\n-375.9863802089716\n\n\n\n\n\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 65.6%\n\n\n\n\n\nClassification accuracy on train data = 66%\n\nconfusion_matrix_test(test,test.Outcome,logit_model)\n\nClassification accuracy = 59.7%\n\n\n\n\n\nClassification accuracy on test data = 60%\nCan a tranformation of Age provide a more accurate model?\nLet us visualize how the probability of people having diabetes varies with Age. We will bin Age to get the percentage of people having diabetes within different Age bins.\n\n#Binning Age\nbinned_age = pd.qcut(train['Age'],11,retbins=True)\ntrain['age_binned'] = binned_age[0]\n\n\n#Finding percentage of people having diabetes in each Age bin\nage_data = train.groupby('age_binned')['Outcome'].agg([('diabetes_percent','mean'),('nobs','count')]).reset_index(drop=False)\nage_data\n\n\n\n\n\n\n\n\nage_binned\ndiabetes_percent\nnobs\n\n\n\n\n0\n(20.999, 22.0]\n0.110092\n109\n\n\n1\n(22.0, 23.0]\n0.206897\n29\n\n\n2\n(23.0, 25.0]\n0.243243\n74\n\n\n3\n(25.0, 26.0]\n0.259259\n27\n\n\n4\n(26.0, 28.0]\n0.271186\n59\n\n\n5\n(28.0, 31.0]\n0.415094\n53\n\n\n6\n(31.0, 35.0]\n0.434783\n46\n\n\n7\n(35.0, 39.0]\n0.450980\n51\n\n\n8\n(39.0, 43.545]\n0.500000\n54\n\n\n9\n(43.545, 52.0]\n0.576271\n59\n\n\n10\n(52.0, 81.0]\n0.415094\n53\n\n\n\n\n\n\n\n\n#Visualizing percentage of people having diabetes with increasing Age (or Age bins)\nsns.lineplot(x = age_data.index, y= age_data['diabetes_percent'])\nplt.xlabel('Age_bin')\n\nText(0.5, 0, 'Age_bin')\n\n\n\n\n\nWe observe that the probability of people having diabetes does not keep increasing monotonically with age. People with ages 52 and more have a lower probability of having diabetes than people in the immediately younger Age bin.\nA quadratic transformation of Age may better fit the above trend\n\n#Model with the quadratic transformation of Age\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~Age+I(Age**2)', data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \nlogit_model.llf\n\nOptimization terminated successfully.\n         Current function value: 0.586025\n         Iterations 6\n\n\n-359.81925590230185\n\n\n\n\n\n\nlogit_model.summary()\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n611\n\n\nMethod:\nMLE\nDf Model:\n2\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.08307\n\n\nTime:\n12:25:54\nLog-Likelihood:\n-359.82\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n6.965e-15\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-6.6485\n0.908\n-7.320\n0.000\n-8.429\n-4.868\n\n\nAge\n0.2936\n0.048\n6.101\n0.000\n0.199\n0.388\n\n\nI(Age ** 2)\n-0.0031\n0.001\n-5.280\n0.000\n-0.004\n-0.002\n\n\n\n\n\nThe log likelihood of the model is higher and both the predictors are statistically significant indicating a better model fit. However, the model may also be overfitting. Let us check the model accuracy on test data.\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 68.1%\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Outcome,logit_model)\n\nClassification accuracy = 68.8%\n\n\n\n\n\nThe classification accuracy on test data has increased to 69%. However, the number of false positives have increased. But in case of diabetes, false negatives are more concerning than false positives. This is because if a person has diabetes, and is told that they do not have diabetes, their condition may deteriorate. If a person does not have diabetes, and is told that they have diabetes, they may take unnecessary precautions or tests, but it will not be as harmful to the person as in the previous case. So, in this problem, we will be more focused on reducing the number of false negatives, instead of reducing the false positives or increasing the overall classification accuracy.\nWe can decrease the cutoff for classifying a person as having diabetes to reduce the number of false negatives.\n\n#Reducing the cutoff for classifying a person as diabetic to 0.3 (instead of 0.5)\nconfusion_matrix_test(test,test.Outcome,logit_model,0.3)\n\nClassification accuracy = 69.5%\n\n\n\n\n\nNote that the changed cut-off reduced the number of false negatives, but at the cost of increasing the false positives. However, the stakeholders may prefer the reduced cut-off to be safer.\nIs there another way to transform Age?\nYes, binning age into bins that have similar proportion of people with diabetes may provide a better model fit.\n\n#Creating a function to bin age so that it can be applied to both the test and train datasets\ndef var_transform(data):\n    binned_age = pd.qcut(train['Age'],10,retbins=True)\n    bins = binned_age[1]\n    data['age_binned'] = pd.cut(data['Age'],bins = bins)\n    dum = pd.get_dummies(data.age_binned,drop_first = True)\n    dum.columns = ['age'+str(x) for x in range(1,len(bins)-1)]\n    data = pd.concat([data,dum], axis = 1)\n    return data\n\n\n#Binning age using the function var_transform()\ntrain = var_transform(train)\ntest = var_transform(test)\n\n\n#Re-creating the plot of diabetes_percent vs age created earlier, just to check if the function binned age correctly. Yes, it did.\nage_data = train.groupby('age_binned')['Outcome'].agg([('diabetes_percent','mean'),('nobs','count')]).reset_index(drop=False)\nsns.lineplot(x = age_data.index, y= age_data['diabetes_percent'])\nplt.xlabel('Age_bin')\n\nText(0.5, 0, 'Age_bin')\n\n\n\n\n\n\n#Model with binned Age\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~' + '+'.join(['age'+str(x) for x in range(1,10)]), data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \n\nOptimization terminated successfully.\n         Current function value: 0.585956\n         Iterations 6\n\n\n&lt;AxesSubplot:xlabel='Age', ylabel='Outcome'&gt;\n\n\n\n\n\n\nlogit_model.summary()\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n604\n\n\nMethod:\nMLE\nDf Model:\n9\n\n\nDate:\nSun, 19 Feb 2023\nPseudo R-squ.:\n0.08318\n\n\nTime:\n14:19:51\nLog-Likelihood:\n-359.78\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.273e-10\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-2.0898\n0.306\n-6.829\n0.000\n-2.690\n-1.490\n\n\nage1\n0.7461\n0.551\n1.354\n0.176\n-0.334\n1.826\n\n\nage2\n0.9548\n0.409\n2.336\n0.019\n0.154\n1.756\n\n\nage3\n1.0602\n0.429\n2.471\n0.013\n0.219\n1.901\n\n\nage4\n1.3321\n0.438\n3.044\n0.002\n0.474\n2.190\n\n\nage5\n1.9606\n0.398\n4.926\n0.000\n1.180\n2.741\n\n\nage6\n1.8303\n0.399\n4.586\n0.000\n1.048\n2.612\n\n\nage7\n1.7596\n0.410\n4.288\n0.000\n0.955\n2.564\n\n\nage8\n2.4544\n0.402\n6.109\n0.000\n1.667\n3.242\n\n\nage9\n1.8822\n0.404\n4.657\n0.000\n1.090\n2.674\n\n\n\n\n\nNote that the probability of having diabetes for each age bin is a constant, as per the above plot.\n\nconfusion_matrix_test(test,test.Outcome,logit_model,0.3)\n\nClassification accuracy = 67.5%\n\n\n\n\n\nBinning Age provides a similar result as compared to the model with the quadratic transformation of Age.\n\ntrain.head()\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\nage_binned\nage1\nage2\nage3\nage4\nage5\nage6\nage7\nage8\nage9\n\n\n\n\n158\n2\n88\n74\n19\n53\n29.0\n0.229\n22\n0\n(21.0, 22.0]\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n251\n2\n129\n84\n0\n0\n28.0\n0.284\n27\n0\n(25.0, 27.0]\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n631\n0\n102\n78\n40\n90\n34.5\n0.238\n24\n0\n(23.0, 25.0]\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n757\n0\n123\n72\n0\n0\n36.3\n0.258\n52\n1\n(51.0, 81.0]\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n689\n1\n144\n82\n46\n180\n46.1\n0.335\n46\n1\n(42.0, 51.0]\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n#Model with the quadratic transformation of Age and more predictors\nlogit_model_diabetes = sm.logit(formula = 'Outcome~Age+I(Age**2)+Glucose+BloodPressure+BMI+DiabetesPedigreeFunction', data = train).fit()\nlogit_model_diabetes.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.470478\n         Iterations 6\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n607\n\n\nMethod:\nMLE\nDf Model:\n6\n\n\nDate:\nThu, 23 Feb 2023\nPseudo R-squ.:\n0.2639\n\n\nTime:\n10:26:00\nLog-Likelihood:\n-288.87\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n5.878e-42\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-12.3347\n1.282\n-9.621\n0.000\n-14.847\n-9.822\n\n\nAge\n0.2852\n0.056\n5.121\n0.000\n0.176\n0.394\n\n\nI(Age ** 2)\n-0.0030\n0.001\n-4.453\n0.000\n-0.004\n-0.002\n\n\nGlucose\n0.0309\n0.004\n8.199\n0.000\n0.024\n0.038\n\n\nBloodPressure\n-0.0141\n0.006\n-2.426\n0.015\n-0.025\n-0.003\n\n\nBMI\n0.0800\n0.016\n4.978\n0.000\n0.049\n0.112\n\n\nDiabetesPedigreeFunction\n0.7138\n0.322\n2.213\n0.027\n0.082\n1.346\n\n\n\n\n\nAdding more predictors has increased the log likelihood of the model as expected.\n\nconfusion_matrix_train(logit_model_diabetes,cutoff=0.3)\n\nClassification accuracy = 74.3%\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Outcome,logit_model_diabetes,0.3)\n\nClassification accuracy = 80.5%\n\n\n\n\n\nThe model with more predictors also has lesser number of false negatives, and higher overall classification accuracy.\nHow many bins must you make for Age to get the most accurate model?\nIf the number of bins are too less, the trend may not be captured accurately. If the number of bins are too many, it may lead to overfitting of the model. There is an optimal value of the number of bins that captures the trend, but does not overfit. A couple of ways of estimating the optimal number of bins can be:\n\nThe number of bins for which the trend continues to be “almost” the same for several samples of the data.\nTesting the model on multiple test datasets.\n\nOptimizing the number of bins for each predictor may be a time-consuming exercises. You may do it for your course project. However, we will not do it here in the class notes."
  },
  {
    "objectID": "Lec7_logistic_regression.html#performance-measurement",
    "href": "Lec7_logistic_regression.html#performance-measurement",
    "title": "7  Logistic regression",
    "section": "7.6 Performance Measurement",
    "text": "7.6 Performance Measurement\nWe have already seen the confusion matrix, and classification accuracy. Now, let us see some other useful performance metrics that can be computed from the confusion matrix. The metrics below are computed for the confusion matrix immediately above this section (or the confusion matrix on test data corresponding to the model logit_model_diabetes).\n\n7.6.1 Precision-recall\nPrecision measures the accuracy of positive predictions. Also called the precision of the classifier\n\\[\\textrm{precision} = \\frac{\\textrm{True Positives}}{\\textrm{True Positives} + \\textrm{False Positives}}\\]\n==&gt; 70.13%\nPrecision is typically used with recall (Sensitivity or True Positive Rate). The ratio of positive instances that are correctly detected by the classifier.\n\\[\\textrm{recall} = \\frac{\\textrm{True Positives}}{\\textrm{True Positives} + \\textrm{False Negatives}}\\] ==&gt; 88.52%\nPrecision / Recall Tradeoff: Increasing precision reduces recall and vice versa.\nVisualize the precision-recall curve for the model logit_model_diabetes.\n\nfrom sklearn.metrics import precision_recall_curve\ny=train.Outcome\nypred = logit_model_diabetes.predict(train)\np, r, thresholds = precision_recall_curve(y, ypred)\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.figure(figsize=(8, 8))\n    plt.title(\"Precision and Recall Scores as a function of the decision threshold\")\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")\n    plt.ylabel(\"Score\")\n    plt.xlabel(\"Decision Threshold\")\n    plt.legend(loc='best')\n    plt.legend()\nplot_precision_recall_vs_threshold(p, r, thresholds)\n\n\n\n\nAs the decision threshold probability increases, the precision increases, while the recall decreases.\nQ: How are the values of the thresholds chosen to make the precision-recall curve?\nHint: Look at the documentation for precision_recall_curve.\n\n\n7.6.2 The Receiver Operating Characteristics (ROC) Curve\nA ROC(Receiver Operator Characteristic Curve) is a plot of sensitivity (True Positive Rate) on the y axis against (1−specificity) (False Positive Rate) on the x axis for varying values of the threshold t. The 45° diagonal line connecting (0,0) to (1,1) is the ROC curve corresponding to random chance. The ROC curve for the gold standard is the line connecting (0,0) to (0,1) and (0,1) to (1,1).\n\n\n\n\n\n\n\n\n\n\nAn animation to demonstrate how an ROC curve relates to sensitivity and specificity for all possible cutoffs (Source)\nHigh Threshold:\n\nHigh specificity\nLow sensitivity\n\nLow Threshold\n\nLow specificity\nHigh sensitivity\n\nThe area under ROC is called Area Under the Curve(AUC). AUC gives the rate of successful classification by the logistic model. To get a more in-depth idea of what a ROC-AUC curve is and how is it calculated, here is a good blog link.\nHere is good post by google developers on interpreting ROC-AUC, and its advantages / disadvantages.\nVisualize the ROC curve and compute the ROC-AUC for the model logit_model_diabetes.\n\nfrom sklearn.metrics import roc_curve, auc\ny=train.Outcome\nypred = logit_model_diabetes.predict(train)\nfpr, tpr, auc_thresholds = roc_curve(y, ypred)\nprint(auc(fpr, tpr))# AUC of ROC\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(8,8))\n    plt.title('ROC Curve')\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.005, 1, 0, 1.005])\n    plt.xticks(np.arange(0,1, 0.05), rotation=90)\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate (Recall)\")\n\nfpr, tpr, auc_thresholds = roc_curve(y, ypred)\nplot_roc_curve(fpr, tpr)\n\n0.8325914847653979\n\n\n\n\n\nQ: How are the values of the auc_thresholds chosen to make the ROC curve? Why does it look like a step function?\nBelow is a function that prints the confusion matrix along with all the performance metrics we discussed above for a given decision threshold probability, on train / test data. Note that ROC-AUC does not depend on a decision threshold probability.\n\n#Function to compute confusion matrix and prediction accuracy on test/train data\ndef confusion_matrix_data(data,actual_values,model,cutoff=0.5):\n#Predict the values using the Logit model\n    pred_values = model.predict(data)\n# Specify the bins\n    bins=np.array([0,cutoff,1])\n#Confusion matrix\n    cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]\n    cm_df = pd.DataFrame(cm)\n    cm_df.columns = ['Predicted 0','Predicted 1']\n    cm_df = cm_df.rename(index={0: 'Actual 0',1:'Actual 1'})\n# Calculate the accuracy\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    fnr = (cm[1,0])/(cm[1,0]+cm[1,1])\n    precision = (cm[1,1])/(cm[0,1]+cm[1,1])\n    fpr = (cm[0,1])/(cm[0,0]+cm[0,1])\n    tpr = (cm[1,1])/(cm[1,0]+cm[1,1])\n    fpr_roc, tpr_roc, auc_thresholds = roc_curve(actual_values, pred_values)\n    auc_value = (auc(fpr_roc, tpr_roc))# AUC of ROC\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n    print(\"Precision = {:.1%}\".format(precision))\n    print(\"TPR or Recall = {:.1%}\".format(tpr))\n    print(\"FNR = {:.1%}\".format(fnr))\n    print(\"FPR = {:.1%}\".format(fpr))\n    print(\"ROC-AUC = {:.1%}\".format(auc_value))\n\n\nconfusion_matrix_data(test,test.Outcome,logit_model_diabetes,0.3)\n\nClassification accuracy = 80.5%\nPrecision = 70.1%\nTPR or Recall = 88.5%\nFNR = 11.5%\nFPR = 24.7%\nROC-AUC = 90.1%"
  },
  {
    "objectID": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#best-subsets-selection",
    "href": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#best-subsets-selection",
    "title": "8  Best subset and Stepwise selection",
    "section": "8.1 Best subsets selection",
    "text": "8.1 Best subsets selection\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport itertools\nimport time\n\n\ntrainf = pd.read_csv('./Datasets/house_feature_train.csv')\ntrainp = pd.read_csv('./Datasets/house_price_train.csv')\ntestf = pd.read_csv('./Datasets/house_feature_test.csv')\ntestp = pd.read_csv('./Datasets/house_price_test.csv')\ntrain = pd.merge(trainf,trainp)\ntest = pd.merge(testf,testp)\ntrain.head()\n\n\n\n\n\n\n\n\nhouse_id\nhouse_age\ndistance_MRT\nnumber_convenience_stores\nlatitude\nlongitude\nhouse_price\n\n\n\n\n0\n210\n5.2\n390.5684\n5\n24.97937\n121.54245\n2724.84\n\n\n1\n190\n35.3\n616.5735\n8\n24.97945\n121.53642\n1789.29\n\n\n2\n328\n15.9\n1497.7130\n3\n24.97003\n121.51696\n556.96\n\n\n3\n5\n7.1\n2175.0300\n3\n24.96305\n121.51254\n1030.41\n\n\n4\n412\n8.1\n104.8101\n5\n24.96674\n121.54067\n2756.25\n\n\n\n\n\n\n\nDevelop a model to predict house price using the rest of the columns as predictors (except house_id).\n\n#Model with log house price as the response and the remaining variables as predictors\nmodel = sm.ols('np.log(house_price)~house_age+distance_MRT+number_convenience_stores+latitude+\\\nlongitude', data = train).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.772\n\n\nModel:\nOLS\nAdj. R-squared:\n0.767\n\n\nMethod:\nLeast Squares\nF-statistic:\n181.8\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n4.47e-84\n\n\nTime:\n18:31:07\nLog-Likelihood:\n-118.47\n\n\nNo. Observations:\n275\nAIC:\n248.9\n\n\nDf Residuals:\n269\nBIC:\n270.6\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-482.9401\n312.000\n-1.548\n0.123\n-1097.212\n131.332\n\n\nhouse_age\n-0.0131\n0.002\n-6.437\n0.000\n-0.017\n-0.009\n\n\ndistance_MRT\n-0.0003\n3.69e-05\n-8.318\n0.000\n-0.000\n-0.000\n\n\nnumber_convenience_stores\n0.0598\n0.010\n6.247\n0.000\n0.041\n0.079\n\n\nlatitude\n18.7044\n2.353\n7.951\n0.000\n14.073\n23.336\n\n\nlongitude\n0.1923\n2.465\n0.078\n0.938\n-4.660\n5.045\n\n\n\n\n\n\nOmnibus:\n4.413\nDurbin-Watson:\n2.260\n\n\nProb(Omnibus):\n0.110\nJarque-Bera (JB):\n5.515\n\n\nSkew:\n0.077\nProb(JB):\n0.0634\n\n\nKurtosis:\n3.677\nCond. No.\n2.28e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 2.28e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nFind the best subset of predictors that can predict house price in a linear regression model.\n\n#Creating a set of predictors from which we need to find the best subset of predictors\nX = train[['house_age','number_convenience_stores','latitude', 'longitude','distance_MRT']]\n\n\n8.1.1 Best subset selection algorithm\nNow, we will implement the algorithm of finding the best subset of predictors from amongst all sets of predictors.\n\n#Function to develop a model based on all predictors in predictor_subset\ndef processSubset(predictor_subset):\n    # Fit model on feature_set and calculate R-squared\n    model = sm.ols('np.log(house_price)~' + '+'.join(predictor_subset),data = train).fit()\n    Rsquared = model.rsquared\n    return {\"model\":model, \"Rsquared\":Rsquared}\n\n\n#Function to select the best model amongst all models with 'k' predictors\ndef getBest_model(k):\n    tic = time.time()\n    results = []\n    for combo in itertools.combinations(X.columns, k):\n        results.append(processSubset((list(combo))))\n\n    # Wrap everything up in a dataframe\n    models = pd.DataFrame(results)\n\n    # Choose the model with the highest RSS\n    best_model = models.loc[models['Rsquared'].argmax()]\n    \n    toc = time.time()\n    print(\"Processed\", models.shape[0], \"models on\", k, \"predictors in\", (toc-tic), \"seconds.\")\n    return best_model\n\n\n#Function to select the best model amongst the best models for 'k' predictors, where k = 1,2,3,..\nmodels_best = pd.DataFrame(columns=[\"Rsquared\", \"model\"])\n\ntic = time.time()\nfor i in range(1,1+X.shape[1]):\n    models_best.loc[i] = getBest_model(i)\n\ntoc = time.time()\nprint(\"Total elapsed time:\", (toc-tic), \"seconds.\")\n\nProcessed 5 models on 1 predictors in 0.02393651008605957 seconds.\nProcessed 10 models on 2 predictors in 0.04688239097595215 seconds.\nProcessed 10 models on 3 predictors in 0.04986691474914551 seconds.\nProcessed 5 models on 4 predictors in 0.029920578002929688 seconds.\nProcessed 1 models on 5 predictors in 0.008975982666015625 seconds.\nTotal elapsed time: 0.17253828048706055 seconds.\n\n\n\ndef best_sub_plots():\n    plt.figure(figsize=(20,10))\n    plt.rcParams.update({'font.size': 18, 'lines.markersize': 10})\n\n    # Set up a 2x2 grid so we can look at 4 plots at once\n    plt.subplot(2, 2, 1)\n\n    # We will now plot a red dot to indicate the model with the largest adjusted R^2 statistic.\n    # The argmax() function can be used to identify the location of the maximum point of a vector\n    plt.plot(models_best[\"Rsquared\"])\n    plt.xlabel('# Predictors')\n    plt.ylabel('Rsquared')\n\n    # We will now plot a red dot to indicate the model with the largest adjusted R^2 statistic.\n    # The argmax() function can be used to identify the location of the maximum point of a vector\n\n    rsquared_adj = models_best.apply(lambda row: row[1].rsquared_adj, axis=1)\n\n    plt.subplot(2, 2, 2)\n    plt.plot(rsquared_adj)\n    plt.plot(1+rsquared_adj.argmax(), rsquared_adj.max(), \"or\")\n    plt.xlabel('# Predictors')\n    plt.ylabel('adjusted rsquared')\n\n    # We'll do the same for AIC and BIC, this time looking for the models with the SMALLEST statistic\n    aic = models_best.apply(lambda row: row[1].aic, axis=1)\n\n    plt.subplot(2, 2, 3)\n    plt.plot(aic)\n    plt.plot(1+aic.argmin(), aic.min(), \"or\")\n    plt.xlabel('# Predictors')\n    plt.ylabel('AIC')\n\n    bic = models_best.apply(lambda row: row[1].bic, axis=1)\n\n    plt.subplot(2, 2, 4)\n    plt.plot(bic)\n    plt.plot(1+bic.argmin(), bic.min(), \"or\")\n    plt.xlabel('# Predictors')\n    plt.ylabel('BIC')\nbest_sub_plots()\n\n\n\n\nThe model with 4 predictors is the best model, according to all 3 criteria - Adjusted R-squared, AIC and BIC.\nNote that we have not considered the null model (i.e., the model with only the intercept and no predictors) explicitly in the best subsets algorithm. However, the null model is considered when selecting the best model. The R-squared and the adjusted R-squared for the null model is 0. So, if the adjusted R-squared of all the models with at least one predictor is negative, then the null model will be the best model.\n\nbest_subset_model = models_best.loc[4,'model']\nmodels_best.loc[4,'model'].summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.772\n\n\nModel:\nOLS\nAdj. R-squared:\n0.768\n\n\nMethod:\nLeast Squares\nF-statistic:\n228.0\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n2.79e-85\n\n\nTime:\n19:51:50\nLog-Likelihood:\n-118.47\n\n\nNo. Observations:\n275\nAIC:\n246.9\n\n\nDf Residuals:\n270\nBIC:\n265.0\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-459.0262\n58.231\n-7.883\n0.000\n-573.671\n-344.381\n\n\nhouse_age\n-0.0131\n0.002\n-6.451\n0.000\n-0.017\n-0.009\n\n\nnumber_convenience_stores\n0.0597\n0.010\n6.271\n0.000\n0.041\n0.078\n\n\nlatitude\n18.6828\n2.332\n8.012\n0.000\n14.092\n23.274\n\n\ndistance_MRT\n-0.0003\n2.53e-05\n-12.221\n0.000\n-0.000\n-0.000\n\n\n\n\n\n\nOmnibus:\n4.422\nDurbin-Watson:\n2.261\n\n\nProb(Omnibus):\n0.110\nJarque-Bera (JB):\n5.555\n\n\nSkew:\n0.073\nProb(JB):\n0.0622\n\n\nKurtosis:\n3.681\nCond. No.\n4.25e+06\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 4.25e+06. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Finding the RMSE of the model selected using the best subset selection procedure\npred_price = np.exp(best_subset_model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n403.4635674362065\n\n\n\n#RMSE of the model using all the predictors\nmodel = sm.ols('np.log(house_price)~' + '+'.join(X.columns),data = train).fit()\npred_price = np.exp(model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n403.8409399214197\n\n\nThe RMSE of the best subset model is similar to the RMSE of the model with all the predictors. This is because longitude varies only in [121.47, 121.57]. The coefficient of longitude is 0.1923 in the model with all the predictors. So, the change in the response due to longitude is in [23.36, 23.38 ]. This change in the response due to longitude is almost a constant, and hence is adjusted in the intercept of the model without longitude. Note the intercept of the model without longitude is 23.91 more than the intercept of the model with longitude.\n\n[0.1923*train.longitude.min(),0.1923*train.longitude.max()]\n\n[23.359359818999998, 23.377193721]\n\n\n\n\n8.1.2 Including interactions for best subset selection\nLet’s perform best subset selection including all the predictors and their 2-factor interactions\n\n#Creating a dataframe with all the predictors\nX = train[['house_age', 'distance_MRT', 'number_convenience_stores','latitude','longitude']]\n#Since 'X' will change when we include interactions, we need a backup containing all individual predictors\nX_backup = train[['house_age', 'distance_MRT', 'number_convenience_stores','latitude','longitude']]\n\n\n#Including 2-factor interactions of predictors in train and 'X'. Note that we need train to develop the model, and X to \n#find 'k' variable subsets from amongst all the predictors under consideration\nfor combo in itertools.combinations(X_backup.columns, 2):    \n    train['_'.join(combo)] = train[combo[0]]*train[combo[1]]\n    test['_'.join(combo)] = test[combo[0]]*test[combo[1]]\n    X.loc[:,'_'.join(combo)] = train.loc[:,'_'.join(combo)] \n\n\nmodels_best = pd.DataFrame(columns=[\"Rsquared\", \"model\"])\n\ntic = time.time()\nfor i in range(1,1+X.shape[1]):\n    models_best.loc[i] = getBest_model(i)\n\ntoc = time.time()\nprint(\"Total elapsed time:\", (toc-tic), \"seconds.\")\n\nProcessed 15 models on 1 predictors in 0.07200050354003906 seconds.\nProcessed 105 models on 2 predictors in 0.536522388458252 seconds.\nProcessed 455 models on 3 predictors in 2.6639997959136963 seconds.\nProcessed 1365 models on 4 predictors in 9.176022052764893 seconds.\nProcessed 3003 models on 5 predictors in 24.184194803237915 seconds.\nProcessed 5005 models on 6 predictors in 43.54697918891907 seconds.\nProcessed 6435 models on 7 predictors in 65.83688187599182 seconds.\nProcessed 6435 models on 8 predictors in 78.97277760505676 seconds.\nProcessed 5005 models on 9 predictors in 64.53991365432739 seconds.\nProcessed 3003 models on 10 predictors in 38.39328980445862 seconds.\nProcessed 1365 models on 11 predictors in 18.715795755386353 seconds.\nProcessed 455 models on 12 predictors in 6.93279504776001 seconds.\nProcessed 105 models on 13 predictors in 1.6240253448486328 seconds.\nProcessed 15 models on 14 predictors in 0.256000280380249 seconds.\nProcessed 1 models on 15 predictors in 0.024001121520996094 seconds.\nTotal elapsed time: 356.2638840675354 seconds.\n\n\n\nbest_sub_plots()\n\n\n\n\nThe model with 7 predictors is the best model based on the BIC criterion, and very close to the best model based on the AIC and Adjusted R-squared criteria. Let us select the model with 7 predictors.\n\nbest_interaction_model = models_best['model'][7]\nbest_interaction_model.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.818\n\n\nModel:\nOLS\nAdj. R-squared:\n0.814\n\n\nMethod:\nLeast Squares\nF-statistic:\n171.7\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n5.29e-95\n\n\nTime:\n20:17:02\nLog-Likelihood:\n-87.046\n\n\nNo. Observations:\n275\nAIC:\n190.1\n\n\nDf Residuals:\n267\nBIC:\n219.0\n\n\nDf Model:\n7\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-1316.6156\n135.152\n-9.742\n0.000\n-1582.716\n-1050.515\n\n\ndistance_MRT\n0.2424\n0.044\n5.539\n0.000\n0.156\n0.329\n\n\nnumber_convenience_stores\n152.0179\n23.356\n6.509\n0.000\n106.033\n198.003\n\n\nlatitude\n53.0284\n5.413\n9.797\n0.000\n42.371\n63.686\n\n\nhouse_age_longitude\n-0.0001\n1.51e-05\n-6.842\n0.000\n-0.000\n-7.36e-05\n\n\ndistance_MRT_number_convenience_stores\n-5.691e-05\n1.19e-05\n-4.763\n0.000\n-8.04e-05\n-3.34e-05\n\n\ndistance_MRT_latitude\n-0.0097\n0.002\n-5.544\n0.000\n-0.013\n-0.006\n\n\nnumber_convenience_stores_latitude\n-6.0847\n0.935\n-6.506\n0.000\n-7.926\n-4.243\n\n\n\n\n\n\nOmnibus:\n5.350\nDurbin-Watson:\n2.136\n\n\nProb(Omnibus):\n0.069\nJarque-Bera (JB):\n7.524\n\n\nSkew:\n0.045\nProb(JB):\n0.0232\n\n\nKurtosis:\n3.805\nCond. No.\n2.78e+08\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 2.78e+08. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that only 3 of the 10 two factor interactions are included in the best subset model, and the predictor longitude has been dropped.\n\n#Finding the RMSE of the model selected using the best subset selection procedure, where the predictors\n#include 2-factor interactions\npred_price = np.exp(best_interaction_model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n346.4100962681362\n\n\n\n#Model with the predictors and all their 2-factor interactions\nmodel = sm.ols('np.log(house_price)~' + '+'.join(X.columns),data = train).fit()\nmodel.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.825\n\n\nModel:\nOLS\nAdj. R-squared:\n0.814\n\n\nMethod:\nLeast Squares\nF-statistic:\n81.14\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n1.33e-88\n\n\nTime:\n20:13:01\nLog-Likelihood:\n-82.228\n\n\nNo. Observations:\n275\nAIC:\n196.5\n\n\nDf Residuals:\n259\nBIC:\n254.3\n\n\nDf Model:\n15\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n7.455e+05\n1.03e+06\n0.725\n0.469\n-1.28e+06\n2.77e+06\n\n\nhouse_age\n83.1021\n40.562\n2.049\n0.041\n3.228\n162.976\n\n\ndistance_MRT\n0.1391\n0.174\n0.798\n0.425\n-0.204\n0.482\n\n\nnumber_convenience_stores\n252.5261\n212.276\n1.190\n0.235\n-165.481\n670.533\n\n\nlatitude\n-2.992e+04\n4.12e+04\n-0.727\n0.468\n-1.11e+05\n5.12e+04\n\n\nlongitude\n-6144.1732\n8454.331\n-0.727\n0.468\n-2.28e+04\n1.05e+04\n\n\nhouse_age_distance_MRT\n-2.904e-06\n4.44e-06\n-0.654\n0.514\n-1.16e-05\n5.84e-06\n\n\nhouse_age_number_convenience_stores\n0.0011\n0.001\n1.409\n0.160\n-0.000\n0.003\n\n\nhouse_age_latitude\n0.2119\n0.261\n0.811\n0.418\n-0.303\n0.726\n\n\nhouse_age_longitude\n-0.7274\n0.330\n-2.207\n0.028\n-1.376\n-0.078\n\n\ndistance_MRT_number_convenience_stores\n-6.192e-05\n1.99e-05\n-3.115\n0.002\n-0.000\n-2.28e-05\n\n\ndistance_MRT_latitude\n-0.0082\n0.003\n-2.387\n0.018\n-0.015\n-0.001\n\n\ndistance_MRT_longitude\n0.0005\n0.001\n0.417\n0.677\n-0.002\n0.003\n\n\nnumber_convenience_stores_latitude\n-6.4014\n1.113\n-5.753\n0.000\n-8.592\n-4.210\n\n\nnumber_convenience_stores_longitude\n-0.7620\n1.700\n-0.448\n0.654\n-4.109\n2.585\n\n\nlatitude_longitude\n246.5995\n338.773\n0.728\n0.467\n-420.500\n913.699\n\n\n\n\n\n\nOmnibus:\n3.911\nDurbin-Watson:\n2.134\n\n\nProb(Omnibus):\n0.142\nJarque-Bera (JB):\n4.552\n\n\nSkew:\n0.090\nProb(JB):\n0.103\n\n\nKurtosis:\n3.604\nCond. No.\n1.05e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The smallest eigenvalue is 1.07e-13. This might indicate that there arestrong multicollinearity problems or that the design matrix is singular.\n\n\n\n# RMSE of the model using all the predictors and their 2-factor interactions\npred_price = np.exp(model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n360.40099598821615\n\n\nThe best subset model seems to be slightly better than the model with all the predictors, based on the RMSE on test data."
  },
  {
    "objectID": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#stepwise-selection",
    "href": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#stepwise-selection",
    "title": "8  Best subset and Stepwise selection",
    "section": "8.2 Stepwise selection",
    "text": "8.2 Stepwise selection\nBest subset selection cannot be used in case of even a slightly large number of predictors. In the previous example, we had 15 predictors. The number of models that we developed to find the best subset of predictors from the set of 15 predictors was \\(2^{15} \\approx 32,000\\). In case of 20 predictors, the number of models to use the best subset selection approach will be \\(2^{20} \\approx 1\\) million, which is computationally too expensive. Due to this limitation of the best subsets selection method, we will use stepwise regression, which explores a far more restricted set of models, and thus is an attractive alternative to the best subset selection method."
  },
  {
    "objectID": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#forward-stepwise-selection",
    "href": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#forward-stepwise-selection",
    "title": "8  Best subset and Stepwise selection",
    "section": "8.3 Forward stepwise selection",
    "text": "8.3 Forward stepwise selection\nSource - Page 229: “Forward stepwise selection is a computationally efficient alternative to best subset selection. While the best subset selection procedure considers all \\(2^p\\) possible models containing subsets of the \\(p\\) predictors, forward stepwise considers a much smaller set of models. Forward stepwise selection begins with a model containing no predictors, and then adds predictors to the model, one-at-a-time, until all of the predictors are in the model. In particular, at each step the variable that gives the greatest additional improvement to the fit is added to the model.”\n\n#Function to find the best predictor out of p-k predictors and add it to the model containing the k predictors\ndef forward(predictors):\n\n    # Pull out predictors we still need to process\n    remaining_predictors = [p for p in X.columns if p not in predictors]\n    \n    tic = time.time()\n    \n    results = []\n    \n    for p in remaining_predictors:\n        results.append(processSubset(predictors+[p]))\n    \n    # Wrap everything up in a nice dataframe\n    models = pd.DataFrame(results)\n    \n    # Choose the model with the highest RSS\n    best_model = models.loc[models['Rsquared'].argmax()]\n    \n    toc = time.time()\n    print(\"Processed \", models.shape[0], \"models on\", len(predictors)+1, \"predictors in\", (toc-tic), \"seconds.\")\n    \n    # Return the best model, along with some other useful information about the model\n    return best_model\n\n\ndef forward_selection():\n    models_best = pd.DataFrame(columns=[\"Rsquared\", \"model\"])\n\n    tic = time.time()\n    predictors = []\n\n    for i in range(1,len(X.columns)+1):    \n        models_best.loc[i] = forward(predictors)\n        predictors = list(models_best.loc[i][\"model\"].params.index[1:])\n\n    toc = time.time()\n    print(\"Total elapsed time:\", (toc-tic), \"seconds.\")\n    return models_best\n\n\nmodels_best = forward_selection()\n\nProcessed  15 models on 1 predictors in 0.06280803680419922 seconds.\nProcessed  14 models on 2 predictors in 0.054885149002075195 seconds.\nProcessed  13 models on 3 predictors in 0.05983686447143555 seconds.\nProcessed  12 models on 4 predictors in 0.06781768798828125 seconds.\nProcessed  11 models on 5 predictors in 0.07380270957946777 seconds.\nProcessed  10 models on 6 predictors in 0.07380390167236328 seconds.\nProcessed  9 models on 7 predictors in 0.06981182098388672 seconds.\nProcessed  8 models on 8 predictors in 0.07480072975158691 seconds.\nProcessed  7 models on 9 predictors in 0.0718071460723877 seconds.\nProcessed  6 models on 10 predictors in 0.06380081176757812 seconds.\nProcessed  5 models on 11 predictors in 0.054854631423950195 seconds.\nProcessed  4 models on 12 predictors in 0.05385565757751465 seconds.\nProcessed  3 models on 13 predictors in 0.04188799858093262 seconds.\nProcessed  2 models on 14 predictors in 0.027925491333007812 seconds.\nProcessed  1 models on 15 predictors in 0.016956090927124023 seconds.\nTotal elapsed time: 0.9055600166320801 seconds.\n\n\n\nbest_sub_plots()\n\n\n\n\nThe model with 8 predictors is the best model based on the BIC criterion, and very close to the best model based on the AIC and Adjusted R-squared criteria. Let us select the model with 8 predictors.\n\nbest_fwd_reg_model = models_best['model'][8]\nbest_fwd_reg_model.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.820\n\n\nModel:\nOLS\nAdj. R-squared:\n0.815\n\n\nMethod:\nLeast Squares\nF-statistic:\n151.6\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n1.91e-94\n\n\nTime:\n20:35:14\nLog-Likelihood:\n-85.667\n\n\nNo. Observations:\n275\nAIC:\n189.3\n\n\nDf Residuals:\n266\nBIC:\n221.9\n\n\nDf Model:\n8\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-1365.5045\n154.113\n-8.860\n0.000\n-1668.942\n-1062.067\n\n\ndistance_MRT_longitude\n0.0021\n0.000\n5.062\n0.000\n0.001\n0.003\n\n\nlatitude\n54.9844\n6.171\n8.909\n0.000\n42.833\n67.136\n\n\nhouse_age_longitude\n-0.3240\n0.119\n-2.725\n0.007\n-0.558\n-0.090\n\n\nnumber_convenience_stores_longitude\n1.3242\n0.212\n6.246\n0.000\n0.907\n1.742\n\n\ndistance_MRT_number_convenience_stores\n-4.805e-05\n1.21e-05\n-3.973\n0.000\n-7.19e-05\n-2.42e-05\n\n\nnumber_convenience_stores_latitude\n-6.4419\n1.032\n-6.243\n0.000\n-8.473\n-4.410\n\n\ndistance_MRT_latitude\n-0.0101\n0.002\n-5.067\n0.000\n-0.014\n-0.006\n\n\nhouse_age\n39.3625\n14.450\n2.724\n0.007\n10.911\n67.814\n\n\n\n\n\n\nOmnibus:\n5.017\nDurbin-Watson:\n2.176\n\n\nProb(Omnibus):\n0.081\nJarque-Bera (JB):\n6.923\n\n\nSkew:\n0.022\nProb(JB):\n0.0314\n\n\nKurtosis:\n3.776\nCond. No.\n1.56e+09\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.56e+09. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Finding the RMSE of the model selected using the forward selection procedure, where the predictors\n#include 2-factor interactions\npred_price = np.exp(best_fwd_reg_model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n364.2004089481364\n\n\nWe get a different model than what we got with the best subsets selection method. However, we got it in 0.9 seconds, instead of 6 minutes taken by the best subset selection algorithm. Note that this model has a higher RMSE as compared to the model obtained with the best subset selection procedure, which is expected. However, the RMSE is even slightly higher than the model that includes all the two factor interactions. This may be due to the following reasons:\n\nThis may be due to chance - the test data set may be biased.\nThe stepwise variable selection algorithms are greedy algorithms, and certainly don’t guarantee the best model, or even a model better than the one without variable selection. However, in general, they are likely to provide a better model than the base model that includes all the predictors, especially if there are several predictors that are not associated with the response.\nFor metrics such as adjusted R-squared, the adjustment is not directly tied to the model being more accurate on test data. The adjustment only ensures that the adjusted R-squared increases if the added predictor sufficiently reduces the RSS (Residual sum of squares) on training data.\nAIC is an unbiased estimate of test error. However, AIC will have some variance as we are using sample data for training the model."
  },
  {
    "objectID": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#backward-stepwise-selection",
    "href": "Lec8_ModelSelection_BestSubset_FwdBwd_stepwise.html#backward-stepwise-selection",
    "title": "8  Best subset and Stepwise selection",
    "section": "8.4 Backward Stepwise Selection",
    "text": "8.4 Backward Stepwise Selection\nSource - Page 231: “Like forward stepwise selection, backward stepwise selection provides an efficient alternative to best subset selection. However, unlike forward stepwise selection, it begins with the full least squares model containing all \\(p\\) predictors, and then iteratively removes the least useful predictor, one-at-a-time.”\nLet us try the backward selection procedure on the model with 15 predictors - house_age, distance_MRT, number_convenience_stores, latitude, longitude and their 2-factor interactions.\n\ndef backward(predictors):\n    \n    tic = time.time()\n    \n    results = []\n    \n    for combo in itertools.combinations(predictors, len(predictors)-1):\n        results.append(processSubset(combo))\n    \n    # Wrap everything up in a nice dataframe\n    models = pd.DataFrame(results)\n    \n    # Choose the model with the highest RSS\n    best_model = models.loc[models['Rsquared'].argmax()]\n    \n    toc = time.time()\n    print(\"Processed \", models.shape[0], \"models on\", len(predictors)-1, \"predictors in\", (toc-tic), \"seconds.\")\n    \n    # Return the best model, along with some other useful information about the model\n    return best_model\n\n\ndef backward_selection():\n    models_best = pd.DataFrame(columns=[\"Rsquared\", \"model\"], index = range(1,len(X.columns)))\n\n    tic = time.time()\n    predictors = X.columns\n    models_best.loc[len(predictors)] = processSubset(predictors)\n    \n    while(len(predictors) &gt; 1):  \n        models_best.loc[len(predictors)-1] = backward(predictors)\n        predictors = models_best.loc[len(predictors)-1][\"model\"].params.index[1:]\n\n    toc = time.time()\n    print(\"Total elapsed time:\", (toc-tic), \"seconds.\")\n    return models_best\n\n\nmodels_best = backward_selection()\n\nProcessed  15 models on 14 predictors in 0.24733757972717285 seconds.\nProcessed  14 models on 13 predictors in 0.1765275001525879 seconds.\nProcessed  13 models on 12 predictors in 0.16356277465820312 seconds.\nProcessed  12 models on 11 predictors in 0.13364267349243164 seconds.\nProcessed  11 models on 10 predictors in 0.11968183517456055 seconds.\nProcessed  10 models on 9 predictors in 0.09571337699890137 seconds.\nProcessed  9 models on 8 predictors in 0.08377647399902344 seconds.\nProcessed  8 models on 7 predictors in 0.06981253623962402 seconds.\nProcessed  7 models on 6 predictors in 0.048902273178100586 seconds.\nProcessed  6 models on 5 predictors in 0.04088902473449707 seconds.\nProcessed  5 models on 4 predictors in 0.029920101165771484 seconds.\nProcessed  4 models on 3 predictors in 0.020944595336914062 seconds.\nProcessed  3 models on 2 predictors in 0.013962507247924805 seconds.\nProcessed  2 models on 1 predictors in 0.007978677749633789 seconds.\nTotal elapsed time: 1.286529779434204 seconds.\n\n\n\nbest_sub_plots()\n\n\n\n\n\nbest_bwd_reg_model = models_best['model'][8]\nbest_bwd_reg_model.summary()\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(house_price)\nR-squared:\n0.820\n\n\nModel:\nOLS\nAdj. R-squared:\n0.815\n\n\nMethod:\nLeast Squares\nF-statistic:\n151.5\n\n\nDate:\nThu, 16 Feb 2023\nProb (F-statistic):\n2.00e-94\n\n\nTime:\n20:40:43\nLog-Likelihood:\n-85.714\n\n\nNo. Observations:\n275\nAIC:\n189.4\n\n\nDf Residuals:\n266\nBIC:\n222.0\n\n\nDf Model:\n8\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-1317.5329\n145.605\n-9.049\n0.000\n-1604.218\n-1030.847\n\n\nhouse_age\n57.3124\n14.583\n3.930\n0.000\n28.600\n86.025\n\n\ndistance_MRT\n0.2365\n0.047\n5.044\n0.000\n0.144\n0.329\n\n\nnumber_convenience_stores\n154.8362\n24.984\n6.197\n0.000\n105.644\n204.029\n\n\nhouse_age_longitude\n-0.4717\n0.120\n-3.931\n0.000\n-0.708\n-0.235\n\n\ndistance_MRT_number_convenience_stores\n-4.789e-05\n1.24e-05\n-3.869\n0.000\n-7.23e-05\n-2.35e-05\n\n\ndistance_MRT_latitude\n-0.0095\n0.002\n-5.050\n0.000\n-0.013\n-0.006\n\n\nnumber_convenience_stores_latitude\n-6.1977\n1.001\n-6.194\n0.000\n-8.168\n-4.228\n\n\nlatitude_longitude\n0.4366\n0.048\n9.100\n0.000\n0.342\n0.531\n\n\n\n\n\n\nOmnibus:\n4.945\nDurbin-Watson:\n2.137\n\n\nProb(Omnibus):\n0.084\nJarque-Bera (JB):\n6.228\n\n\nSkew:\n0.110\nProb(JB):\n0.0444\n\n\nKurtosis:\n3.703\nCond. No.\n3.01e+08\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.01e+08. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nWe get a slightly different model than what we got with the best subsets selection method and the forward selection method. As in forward selection, we got it relatively very quickly (in 1.28 seconds), instead of 6 minutes taken by the best subset selection algorithm.\n\n#Finding the RMSE of the model selected using the backward selection procedure, where the predictors\n#include 2-factor interactions\npred_price = np.exp(best_bwd_reg_model.predict(test))\nnp.sqrt(((pred_price - test.house_price)**2).mean())\n\n363.63365786020694\n\n\nNote that we have not considered the null model (i.e., the model with only the intercept and no predictors) explicitly in the forward and backward stepwise algorithms. However, the null model is considered when selecting the best model. The R-squared and the adjusted R-squared for the null model is 0. So, if the adjusted R-squared of all the models with at least one predictor is negative, then the null model will be the best model."
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html#ridge-regression",
    "href": "Lec9_RidgeRegression_Lasso.html#ridge-regression",
    "title": "9  Ridge regression and Lasso",
    "section": "9.1 Ridge regression",
    "text": "9.1 Ridge regression\nLet us develop a ridge regression model to predict house price based on the five house features.\n\n#Taking the log transform of house_price as house prices have a right-skewed distribution\ny = np.log(train.house_price)\n\n\n9.1.1 Standardizing the predictors\n\n#Standardizing predictors so that each of them have zero mean and unit variance\n\n#Filtering all predictors\nX = train.iloc[:,1:6]; \n\n#Defining a scaler object\nscaler = StandardScaler()\n\n#The scaler object will contain the mean and variance of each column (predictor) of X. \n#These values will be useful to scale test data based on the same mean and variance as obtained on train data\nscaler.fit(X)\n\n#Using the scaler object (or the values of mean and variance stored in it) to standardize X (or train data)\nXstd = scaler.transform(X)\n\n\n\n9.1.2 Optimizing the tuning parameter λ\n\n#The tuning parameter lambda is referred as alpha in sklearn\n\n#Creating a range of values of the tuning parameter to visualize the ridge regression coefficients\n#for different values of the tuning parameter\nalphas = 10**np.linspace(10,-2,200)*0.5\n\n\n#Finding the ridge regression coefficients for increasing values of the tuning parameter\ncoefs = []\nfor a in alphas:        \n    ridge = Ridge(alpha = a)\n    ridge.fit(Xstd, y)\n    coefs.append(ridge.coef_)\n\n\n#Visualizing the shrinkage in ridge regression coefficients with increasing values of the tuning parameter lambda\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n#Let us use cross validation to find the optimal value of the tuning parameter - lambda\n#For the optimal lambda, the cross validation error will be the least\n\n#Note that we are reducing the range of alpha so as to better visualize the minimum\nalphas = 10**np.linspace(1.5,-3,200)*0.5\nridgecv = RidgeCV(alphas = alphas,store_cv_values=True)\nridgecv.fit(Xstd, y)\n\n#Optimal value of the tuning parameter - lambda\nridgecv.alpha_\n\n3.87629874431473\n\n\n\n#Visualizing the LOOCV (leave one out cross validatation error vs lambda)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(ridgecv.alphas,ridgecv.cv_values_.sum(axis=0))\nplt.plot([ridgecv.alpha_,ridgecv.alpha_],[40,40.2],':')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Cross-validation error')\n\nText(0, 0.5, 'Cross-validation error')\n\n\n\n\n\nNote that the cross validation error is minimum at the optimal value of the tuning parameter.\n\n#Visualizing the shrinkage in ridge regression coefficients with increasing values of the tuning parameter lambda\nalphas = 10**np.linspace(10,-2,200)*0.5\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.plot([ridgecv.alpha_,ridgecv.alpha_],[-0.4,0.2],':')\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n9.1.3 RMSE on test data\n\n#Test dataset\nXtest = test.iloc[:,1:6]\n\n#Standardizing test data\nXtest_std = scaler.transform(Xtest)\n\n\n#Using the developed ridge regression model to predict on test data\nridge = Ridge(alpha = ridgecv.alpha_)\nridge.fit(Xstd, y)\npred=ridge.predict(Xtest_std)\n\n\n#RMSE on test data\nnp.sqrt(((np.exp(pred)-test.house_price)**2).mean())\n\n405.6227485138042\n\n\nNote that the RMSE is similar to the one obtained using least squares regression on all the five predictors. This is because the coefficients were required to shrink very slightly for the best ridge regression fit. This may happen when we have a low number of predictors, where most of them are significant. Ridge regression is likely to perform better than least squares in case of a large number of predictors, where an OLS model will be prone to overfitting.\n\n\n9.1.4 Model coefficients & \\(R\\)-squared\n\n#Checking the coefficients of the ridge regression model\nridge.coef_\n\narray([-0.1444778 , -0.36856553,  0.17986479,  0.22566444,  0.01413125])\n\n\nNote that none of the coefficients are shrunk to zero. The coefficient of longitude is smaller than the rest, but not zero.\n\n#R-squared on train data for the ridge regression model\nr2_score(ridge.predict(Xstd),y)\n\n0.6994484432136066\n\n\n\n#R-squared on test data for the ridge regression model\nr2_score(pred,np.log(test.house_price))\n\n0.7573027646359806"
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html#lasso",
    "href": "Lec9_RidgeRegression_Lasso.html#lasso",
    "title": "9  Ridge regression and Lasso",
    "section": "9.2 Lasso",
    "text": "9.2 Lasso\nLet us develop a lasso model to predict house price based on the five house features.\n\n9.2.1 Standardizing the predictors\nWe have already standardized the predictors in the previous section. The standardized predictors are the NumPy array object Xstd.\n\n\n9.2.2 Optimizing the tuning parameter λ\n\n#Creating a range of values of the tuning parameter to visualize the lasso coefficients\n#for different values of the tuning parameter\nalphas = 10**np.linspace(10,-2,100)*0.1\n\n\n#Finding the lasso coefficients for increasing values of the tuning parameter\nlasso = Lasso(max_iter = 10000)\ncoefs = []\n\nfor a in alphas:\n    lasso.set_params(alpha=a)\n    lasso.fit(Xstd, y)\n    coefs.append(lasso.coef_)\n\n\n#Visualizing the shrinkage in lasso coefficients with increasing values of the tuning parameter lambda\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\nNote that lasso performs variable selection. For certain values of lambda, some of the predictor coefficients are zero, while others are non-zero. This is different than ridge regression, which only shrinks the coefficients, but doesn’t do variable selection.\n\n#Let us use cross validation to find the optimal value of the tuning parameter - lambda\n#For the optimal lambda, the cross validation error will be the least\n\n#Note that we are reducing the range of alpha so as to better visualize the minimum\nalphas = 10**np.linspace(-1,-5,200)*0.5\nlassocv = LassoCV(alphas = alphas, cv = 10, max_iter = 100000)\nlassocv.fit(Xstd, y)\n\n#Optimal value of the tuning parameter - lamda\nlassocv.alpha_\n\n0.009020932046960358\n\n\n\n#Visualizing the LOOCV (leave one out cross validatation error vs lambda)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(lassocv.alphas_,lassocv.mse_path_.mean(axis=1))\nplt.plot([lassocv.alpha_,lassocv.alpha_],[0.145,0.151],':')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Cross-validation error')\n\nText(0, 0.5, 'Cross-validation error')\n\n\n\n\n\nThe 10-fold cross validation error minimizes at lambda = 0.009.\n\n#Visualizing the shrinkage in lasso coefficients with increasing values of the tuning parameter lambda\nalphas = 10**np.linspace(10,-2,100)*0.1\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n9.2.3 RMSE on test data\n\n#Using the developed lasso model to predict on test data\nlasso = Lasso(alpha = lassocv.alpha_)\nlasso.fit(Xstd, y)\npred=lasso.predict(Xtest_std)\n\n\n#RMSE on test data\nnp.sqrt(((np.exp(pred)-test.house_price)**2).mean())\n\n400.77289943396534\n\n\n\n\n9.2.4 Model coefficients & \\(R\\)-squared\n\n#Checking the coefficients of the lasso model\nlasso.coef_\n\narray([-0.13720237, -0.38405197,  0.17252859,  0.21949239,  0.        ])\n\n\nNote that the coefficient of longitude is shrunk to zero. Lasso performs variable selection.\n\n#R-squared on train data for the lasso model\nr2_score(lasso.predict(Xstd),y)\n\n0.692606850601813\n\n\n\n#R-squared on test data for the lasso model\nr2_score(pred,np.log(test.house_price))\n\n0.7524177148260849"
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix A — Datasets, assignment and project files",
    "section": "",
    "text": "Datasets used in the book, assignment files, project files, and prediction problems report tempate can be found here"
  }
]