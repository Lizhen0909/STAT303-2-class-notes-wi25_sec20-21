[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science II with python (Class notes)",
    "section": "",
    "text": "Preface\nThese are class notes for the course STAT303-2. This is not the course text-book. You are required to read the relevant sections of the book as mentioned on the course website.\nThe course notes are currently being written, and will continue to being developed as the course progresses (just like the course textbook last quarter). Please report any typos / mistakes / inconsistencies / issues with the class notes / class presentations in your comments here. Thank you!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Lec1_SimpleLinearRegression.html",
    "href": "Lec1_SimpleLinearRegression.html",
    "title": "1  Simple Linear Regression",
    "section": "",
    "text": "1.1 Simple Linear Regression\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Patch\nfrom matplotlib.lines import Line2D\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nDevelop a simple linear regression model that predicts car price based on engine size. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n# We are reading training data ONLY at this point.\n# Test data is already separated in another file\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv') # Predictors\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv') # Response\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Simple Linear Regression</span>"
    ]
  },
  {
    "objectID": "Lec1_SimpleLinearRegression.html#simple-linear-regression",
    "href": "Lec1_SimpleLinearRegression.html#simple-linear-regression",
    "title": "1  Simple Linear Regression",
    "section": "",
    "text": "1.1.1 Training with statsmodels\nHere, we will use the statsmodels.formula.api module of the statsmodels library. The use of “API” here doesn’t refer to a traditional external web API but rather an interface within the library for users to interact with and perform specific tasks. The statsmodels.formula.api module provides a formulaic interface to the statsmodels library. A formula is a compact way to specify statistical models using a formula language. This module allows users to define statistical models using formulas similar to those used in R.\nSo, in summary, the statsmodels.formula.api module provides a formulaic interface as part of the statsmodels library, allowing users to specify statistical models using a convenient and concise formula syntax.\n\n# Let's create the model\n    \n# ols stands for Ordinary Least Squares - the name of the algorithm that optimizes Linear Regression models\n\n# data input needs the dataframe that has the predictor and the response\n# formula input needs to:\n    # be a string\n    # have the following syntax: \"response~predictor\"\n    \n# Using engineSize to predict price\nols_object = smf.ols(formula = 'price~engineSize', data = train)\n\n\n#Using the fit() function of the 'ols' class to fit the model, i.e., train the model\nmodel = ols_object.fit()\n\n\n#Printing model summary which contains among other things, the model coefficients\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.390\n\n\nModel:\nOLS\nAdj. R-squared:\n0.390\n\n\nMethod:\nLeast Squares\nF-statistic:\n3177.\n\n\nDate:\nTue, 16 Jan 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n16:46:33\nLog-Likelihood:\n-53949.\n\n\nNo. Observations:\n4960\nAIC:\n1.079e+05\n\n\nDf Residuals:\n4958\nBIC:\n1.079e+05\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-4122.0357\n522.260\n-7.893\n0.000\n-5145.896\n-3098.176\n\n\nengineSize\n1.299e+04\n230.450\n56.361\n0.000\n1.25e+04\n1.34e+04\n\n\n\n\n\n\nOmnibus:\n1271.986\nDurbin-Watson:\n0.517\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n6490.719\n\n\nSkew:\n1.137\nProb(JB):\n0.00\n\n\nKurtosis:\n8.122\nCond. No.\n7.64\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe model equation is: \\(\\hat{price}\\) = -4122.0357 + 12990 * engineSize\n\nR-squared is 39%. This is the proportion of variance in car price explained by engineSize.\nThe coef of engineSize (\\(\\hat{\\beta}_1\\)) is statistically significant (\\(p\\)-value = 0). There is a linear relationship between X and Y.\nThe 95% CI of \\(\\hat{\\beta}_1\\) is [1.25e+04, 1.34e+04].\nPI is not shown here.\n\nThe coefficient of engineSize is 1.299e+04. - Unit change in engineSize increases the expected price by \\(\\$\\) 12,990. - An increase of 3 increases the price by \\(\\$\\) (3*1.299e+04) = \\(\\$\\) 38,970.\nThe coefficients can also be returned directly usign the params attribute of the model object returned by the fit() method of the ols class:\n\nmodel.params\n\nIntercept     -4122.035744\nengineSize    12988.281021\ndtype: float64\n\n\nVisualize the regression line\n\nsns.set(font_scale=1.25)\nax = sns.scatterplot(x = train.engineSize, y = train.price,color = 'orange')\nsns.lineplot(x = train.engineSize, y = model.fittedvalues,color = 'blue')\nplt.xlim(-1,7)\nplt.xlabel('Engine size (in litres)')\nplt.ylabel('Car price')\nlegend_elements = [Line2D([0], [0], color='blue', lw=4, label='Predicted (Model)'),\n                   Line2D([0], [0], marker='o', color='w', label='Actual',\n                          markerfacecolor='orange', markersize=10)]\nax.legend(handles=legend_elements, loc='upper left');\n\n\n\n\n\n\n\n\nNote that the above plot can be made directly using the seaborn function regplot(). The function regplot() fits a simple linear regression model with y as the response, and x as the predictor, and then plots the model over a scatteplot of the data.\n\nax = sns.regplot(x = 'engineSize', y = 'price', data = train, color = 'orange',line_kws={\"color\": \"blue\"})\nplt.xlim(-1,7)\nplt.xlabel('Engine size (in litres)')\nplt.ylabel('Car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.legend(handles=legend_elements, loc='upper left');\n#Note that some of the engineSize values are 0. They are incorrect, and should ideally be imputed before developing the model.\n\n\n\n\n\n\n\n\nThe light shaded region around the blue line in the above plot is the confidence interval.\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\nNow that the model has been trained, let us evaluate it on unseen data. Make sure that the columns names of the predictors are the same in train and test datasets.\n\n# Read the test data\ntestf = pd.read_csv('./Datasets/Car_features_test.csv') # Predictors\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv') # Response\ntest = pd.merge(testf, testp)\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs its values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price, color = 'orange')\n#In case of a perfect prediction, all the points must lie on the line x = y.\nax = sns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='blue') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('${x:,.0f}')\nplt.xticks(rotation=20);\n\n\n\n\n\n\n\n\nThe prediction doesn’t look too good. This is because we are just using one predictor - engine size. We can probably improve the model by adding more predictors when we learn multiple linear regression.\nWhat is the RMSE of the predicted car price on unseen data?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n12995.106451548696\n\n\nThe root mean squared error in predicting car price is around $13k.\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n12810.109175214138\n\n\nThe residual standard error on the training data is close to the RMSE on the test data. This shows that the performance of the model on unknown data is comparable to its performance on known data. This implies that the model is not overfitting, which is good! In case we overfit a model on the training data, its performance on unknown data is likely to be worse than that on the training data.\nFind the confidence and prediction intervals of the predicted car price\n\n#Using the get_prediction() function associated with the 'model' object to get the intervals\nintervals = model.get_prediction(testf)\n\n\n#The function requires specifying alpha (probability of Type 1 error) instead of the confidence level to get the intervals\nintervals.summary_frame(alpha=0.05)\n\n\n\n\n\n\n\n\n\nmean\nmean_se\nmean_ci_lower\nmean_ci_upper\nobs_ci_lower\nobs_ci_upper\n\n\n\n\n0\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n1\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n2\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n3\n8866.245277\n316.580850\n8245.606701\n9486.883853\n-16254.905974\n33987.396528\n\n\n4\n47831.088340\n468.949360\n46911.740050\n48750.436631\n22700.782946\n72961.393735\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n2667\n47831.088340\n468.949360\n46911.740050\n48750.436631\n22700.782946\n72961.393735\n\n\n2668\n34842.807319\n271.666459\n34310.220826\n35375.393812\n9723.677232\n59961.937406\n\n\n2669\n8866.245277\n316.580850\n8245.606701\n9486.883853\n-16254.905974\n33987.396528\n\n\n2670\n21854.526298\n184.135754\n21493.538727\n22215.513869\n-3261.551421\n46970.604017\n\n\n2671\n21854.526298\n184.135754\n21493.538727\n22215.513869\n-3261.551421\n46970.604017\n\n\n\n\n2672 rows × 6 columns\n\n\n\n\nShow the regression line predicting car price based on engine size for test data. Also show the confidence and prediction intervals for the car price.\n\ninterval_table = intervals.summary_frame(alpha=0.05)\n\n\nax = sns.scatterplot(x = testf.engineSize, y = pred_price,color = 'orange', s = 10)\nsns.lineplot(x = testf.engineSize, y = pred_price, color = 'red')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_lower, color = 'blue')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_upper, color = 'blue')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_lower, color = 'green')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_upper, color = 'green')\n\nlegend_elements = [Line2D([0], [0], color='red', label='Mean prediction'),\n                   Line2D([0], [0], color='blue', label='Confidence interval'),\n                  Line2D([0], [0], color='green', label='Prediction interval')]\nax.legend(handles=legend_elements, loc='upper left')\nplt.xlabel('Engine size (in litres)')\nplt.ylabel('Car price')\nax.yaxis.set_major_formatter('${x:,.0f}');\n\n\n\n\n\n\n\n\n\n\n1.1.2 Training with sklearn\n\n# Create the model as an object\n\nmodel = LinearRegression() # No inputs, this will change for other models\n\n# Train the model - separate the predictor(s) and the response for this!\nX_train = train[['engineSize']]\ny_train = train[['price']]\n\n# Note that both are dfs, NOT series - necessary to avoid errors\n\nmodel.fit(X_train, y_train)\n\n# Check the slight syntax differences\n    # predictors and response separate\n    # We need to manually slice the predictor column(s) we want to include\n    # No need to assign to an output\n    \n# Return the parameters\nprint(\"Coefficient of engine size = \", model.coef_) # slope\nprint(\"Intercept = \", model.intercept_) # intercept\n\n# No .summary() here! - impossible to do much inference; this is a shortcoming of sklearn\n\nCoefficient of engine size =  [[12988.28102112]]\nIntercept =  [-4122.03574424]\n\n\n\n# Prediction\n\n# Again, separate the predictor(s) and the response of interest\nX_test = test[['engineSize']]\ny_test = test[['price']].to_numpy() # Easier to handle with calculations as np array\n\ny_pred = model.predict(X_test)\n\n# Evaluate\nmodel_rmse = np.sqrt(np.mean((y_pred - y_test)**2)) # RMSE\nmodel_mae = np.mean(np.abs(y_pred - y_test)) # MAE\n\nprint('Test RMSE: ', model_rmse)\n\nTest RMSE:  12995.106451548696\n\n\n\n# Easier way to calculate metrics with sklearn tools\n\n# Note that we have imported the functions 'mean_squared_error' and 'mean_absolute_error'\n# from the sklearn.metrics module (check top of the code)\n\nmodel_rmse = np.sqrt(mean_squared_error(y_test,y_pred))\nmodel_mae = mean_absolute_error(y_test,y_pred)\nprint('Test RMSE: ', model_rmse)\nprint('Test MAE: ', model_mae)\n\nTest RMSE:  12995.106451548696\nTest MAE:  9411.325912951994\n\n\n\ny_pred_train = model.predict(X_train)\nprint('Train R-squared:', r2_score(y_train, y_pred_train))\nprint('Test R-squared:', r2_score(y_test, y_pred))\n\nTrain R-squared: 0.39049842625794573\nTest R-squared: 0.3869900378620146\n\n\nNote: Why did we repeat the same task in two different libraries?\n\nstatsmodels and sklearn have different advantages - we will use both for our purposes\n\nstatsmodels returns a lot of statistical output, which is very helpful for inference (coming up next) but it has a limited variety of models.\nWith statsmodels, you may have columns in your DataFrame in addition to predictors and response, while with sklearn you need to make separate objects consisting of only the predictors and the response.\nsklearn includes many models (Lasso and Ridge this quarter, many others next quarter) and helpful tools/functions (like metrics) that statsmodels does not but it does not have any inference tools.\n\n\n\n\n1.1.3 Training with statsmodels.api\nEarlier we had used the statsmodels.formula.api module, where we had to put the regression model as a formula. We can also use the statsmodels.api module to develop a regression model. The syntax of training a model with the OLS() function in this module is similar to that of sklearn’s LinearRegression() function. However, the order in which the predictors and response are specified is different. The formula-style syntax of the statsmodels.formula.api module is generally preferred. However, depending on the situation, the OLS() syntax of statsmodels.api may be preferred.\nNote that you will manually need to add the predictor (a column of ones) corresponding to the intercept to train the model with this method.\n\n# Create the model as an object\n\n# Train the model - separate the predictor(s) and the response for this!\nX_train = train[['engineSize']]\ny_train = train[['price']]\n\nX_train_with_intercept = np.concatenate((np.ones(X_train.shape[0]).reshape(-1,1), X_train), axis = 1)\n\nmodel = sm.OLS(y_train, X_train_with_intercept).fit()\n    \n# Return the parameters\nprint(model.params) \n\nconst    -4122.035744\nx1       12988.281021\ndtype: float64\n\n\nThe model summary and all other attributes and methods of the model object are the same as that with the object created using the statsmodels.formula.api module.\n\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.390\n\n\nModel:\nOLS\nAdj. R-squared:\n0.390\n\n\nMethod:\nLeast Squares\nF-statistic:\n3177.\n\n\nDate:\nMon, 08 Jan 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n11:17:55\nLog-Likelihood:\n-53949.\n\n\nNo. Observations:\n4960\nAIC:\n1.079e+05\n\n\nDf Residuals:\n4958\nBIC:\n1.079e+05\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nconst\n-4122.0357\n522.260\n-7.893\n0.000\n-5145.896\n-3098.176\n\n\nx1\n1.299e+04\n230.450\n56.361\n0.000\n1.25e+04\n1.34e+04\n\n\n\n\n\n\nOmnibus:\n1271.986\nDurbin-Watson:\n0.517\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n6490.719\n\n\nSkew:\n1.137\nProb(JB):\n0.00\n\n\nKurtosis:\n8.122\nCond. No.\n7.64\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Simple Linear Regression</span>"
    ]
  },
  {
    "objectID": "Lec2_MultipleLinearRegression.html",
    "href": "Lec2_MultipleLinearRegression.html",
    "title": "2  Multiple Linear Regression",
    "section": "",
    "text": "2.1 Multiple Linear Regression\n# importing libraries \nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nDevelop a multiple linear regression model that predicts car price based on engine size, year, mileage, and mpg. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n# Reading datasets\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multiple Linear Regression</span>"
    ]
  },
  {
    "objectID": "Lec2_MultipleLinearRegression.html#multiple-linear-regression",
    "href": "Lec2_MultipleLinearRegression.html#multiple-linear-regression",
    "title": "2  Multiple Linear Regression",
    "section": "",
    "text": "2.1.1 Training the model\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.660\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n2410.\n\n\nDate:\nMon, 29 Jan 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n03:10:20\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.050e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.661e+06\n1.49e+05\n-24.593\n0.000\n-3.95e+06\n-3.37e+06\n\n\nyear\n1817.7366\n73.751\n24.647\n0.000\n1673.151\n1962.322\n\n\nmileage\n-0.1474\n0.009\n-16.817\n0.000\n-0.165\n-0.130\n\n\nmpg\n-79.3126\n9.338\n-8.493\n0.000\n-97.620\n-61.006\n\n\nengineSize\n1.218e+04\n189.969\n64.107\n0.000\n1.18e+04\n1.26e+04\n\n\n\n\n\n\nOmnibus:\n2450.973\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31060.548\n\n\nSkew:\n2.045\nProb(JB):\n0.00\n\n\nKurtosis:\n14.557\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nThe model equation is: estimated car price = -3.661e6 + 1818 * year -0.15 * mileage - 79.31 * mpg + 12180 * engineSize\nThe procedure to fit the model using sklearn will be similar to that in simple linear regression.\n\nmodel = LinearRegression()\n\nX_train = train[['year','engineSize','mpg','mileage']] # Slice out the predictors\ny_train = train[['price']]\n\nmodel.fit(X_train,y_train)\n\n\n\n2.1.2 Hypothesis test for a relationship between the response and a subset of predictors\nLet us test the hypothesis if there is relationship between car price and the set of predictors: mpg and year.\n\nhypothesis = '(mpg = 0, year = 0)'     \n    \nmodel.f_test(hypothesis) # the F test of these two predictors is stat. sig.\n\n&lt;class 'statsmodels.stats.contrast.ContrastResults'&gt;\n&lt;F test: F=325.9206432972666, p=1.0499509223096256e-133, df_denom=4.96e+03, df_num=2&gt;\n\n\nAs the \\(p\\)-value is low, we reject the null hypothesis, i.e., at least one of the predictors among mpg and year has a statistically significant relationship with car price.\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n\n2.1.3 Prediction\n\npred_price = model.predict(testf)\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.set(font_scale=1.25)\nsns.scatterplot(x = testp.price, y = pred_price, color = 'orange')\n#In case of a perfect prediction, all the points must lie on the line x = y.\nax = sns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='blue') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\nplt.ylim([-10000, 160000])\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('${x:,.0f}')\nplt.xticks(rotation=20);\n\n\n\n\n\n\n\n\nThe prediction looks better as compared to the one with simple linear regression. This is because we have four predictors to help explain the variation in car price, instead of just one in the case of simple linear regression. Also, all the predictors have a significant relationship with price as evident from their p-values. Thus, all four of them are contributing in explaining the variation. Note the higher values of \\(R^2\\) as compared to the one in the case of simple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9956.82497993548\n\n\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n9563.74782917604\n\n\n\ntrainp.describe()\n\n\n\n\n\n\n\n\n\ncarID\nprice\n\n\n\n\ncount\n4960.000000\n4960.000000\n\n\nmean\n15832.446169\n23469.943750\n\n\nstd\n2206.717006\n16406.714563\n\n\nmin\n12002.000000\n450.000000\n\n\n25%\n13929.250000\n12000.000000\n\n\n50%\n15840.000000\n18999.000000\n\n\n75%\n17765.750000\n30335.750000\n\n\nmax\n19629.000000\n145000.000000\n\n\n\n\n\n\n\n\n\nsns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nax = sns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Predicted price')\nplt.ylabel('Residual')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('${x:,.0f}')\nplt.xticks(rotation=20);\n\n\n\n\n\n\n\n\n\n\n2.1.4 Effect of adding noisy predictors on \\(R^2\\)\nWill the explained variation (R-squared) in car price always increase if we add a variable?\nShould we keep on adding variables as long as the explained variation (R-squared) is increasing?\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nnp.random.seed(1)\ntrain['rand_col'] = np.random.rand(train.shape[0])\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize+rand_col', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.661\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n1928.\n\n\nDate:\nTue, 27 Dec 2022\nProb (F-statistic):\n0.00\n\n\nTime:\n01:07:38\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4954\nBIC:\n1.050e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.662e+06\n1.49e+05\n-24.600\n0.000\n-3.95e+06\n-3.37e+06\n\n\nyear\n1818.1672\n73.753\n24.652\n0.000\n1673.578\n1962.756\n\n\nmileage\n-0.1474\n0.009\n-16.809\n0.000\n-0.165\n-0.130\n\n\nmpg\n-79.2837\n9.338\n-8.490\n0.000\n-97.591\n-60.976\n\n\nengineSize\n1.218e+04\n189.972\n64.109\n0.000\n1.18e+04\n1.26e+04\n\n\nrand_col\n451.1226\n471.897\n0.956\n0.339\n-474.004\n1376.249\n\n\n\n\n\n\nOmnibus:\n2451.728\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31040.331\n\n\nSkew:\n2.046\nProb(JB):\n0.00\n\n\nKurtosis:\n14.552\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nAdding a variable with random values to the model (rand_col) increased the explained variation (\\(R^2\\)). This is because the model has one more parameter to tune to reduce the residual squared error \\((RSS)\\). However, the \\(p\\)-value of rand_col suggests that its coefficient is zero. Thus, using the model with rand_col may give poorer performance on unknown data, as compared to the model without rand_col. This implies that it is not a good idea to blindly add variables in the model to increase \\(R^2\\).",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Multiple Linear Regression</span>"
    ]
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html",
    "href": "Lec3_VariableTransformations_and_Interactions.html",
    "title": "3  Variable interactions and transformations",
    "section": "",
    "text": "3.1 Variable interactions\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\ntrain = pd.merge(trainf,trainp)\ntest = pd.merge(testf,testp)\ntrain.head()\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n0\n18473\nbmw\n6 Series\n2020\nSemi-Auto\n11\nDiesel\n145\n53.3282\n3.0\n37980\n\n\n1\n15064\nbmw\n6 Series\n2019\nSemi-Auto\n10813\nDiesel\n145\n53.0430\n3.0\n33980\n\n\n2\n18268\nbmw\n6 Series\n2020\nSemi-Auto\n6\nDiesel\n145\n53.4379\n3.0\n36850\n\n\n3\n18480\nbmw\n6 Series\n2017\nSemi-Auto\n18895\nDiesel\n145\n51.5140\n3.0\n25998\n\n\n4\n18492\nbmw\n6 Series\n2015\nAutomatic\n62953\nDiesel\n160\n51.4903\n3.0\n18990\nUntil now, we have assumed that the association between a predictor \\(X_j\\) and response \\(Y\\) does not depend on the value of other predictors. For example, the multiple linear regression model that we developed in Chapter 2 assumes that the average increase in price associated with a unit increase in engineSize is always $12,180, regardless of the value of other predictors. However, this assumption may be incorrect.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variable interactions and transformations</span>"
    ]
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "title": "3  Variable interactions and transformations",
    "section": "",
    "text": "3.1.1 Variable interaction between continuous predictors\nWe can relax this assumption by considering another predictor, called an interaction term. Let us assume that the average increase in price associated with a one-unit increase in engineSize depends on the model year of the car. In other words, there is an interaction between engineSize and year. This interaction can be included as a predictor, which is the product of engineSize and year. Note that there are several possible interactions that we can consider. Here the interaction between engineSize and year is just an example.\n\n#Considering interaction between engineSize and year\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.682\n\n\nModel:\nOLS\nAdj. R-squared:\n0.681\n\n\nMethod:\nLeast Squares\nF-statistic:\n2121.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:11\nLog-Likelihood:\n-52338.\n\n\nNo. Observations:\n4960\nAIC:\n1.047e+05\n\n\nDf Residuals:\n4954\nBIC:\n1.047e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n5.606e+05\n2.74e+05\n2.048\n0.041\n2.4e+04\n1.1e+06\n\n\nyear\n-275.3833\n135.695\n-2.029\n0.042\n-541.405\n-9.361\n\n\nengineSize\n-1.796e+06\n9.97e+04\n-18.019\n0.000\n-1.99e+06\n-1.6e+06\n\n\nyear:engineSize\n896.7687\n49.431\n18.142\n0.000\n799.861\n993.676\n\n\nmileage\n-0.1525\n0.008\n-17.954\n0.000\n-0.169\n-0.136\n\n\nmpg\n-84.3417\n9.048\n-9.322\n0.000\n-102.079\n-66.604\n\n\n\n\n\n\nOmnibus:\n2330.413\nDurbin-Watson:\n0.524\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n29977.437\n\n\nSkew:\n1.908\nProb(JB):\n0.00\n\n\nKurtosis:\n14.423\nCond. No.\n7.66e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.66e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nNote that the R-squared has increased as compared to the model in Chapter 2 since we added a predictor.\nThe model equation is:\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\beta_2*engineSize + \\beta_3*(year * engineSize) + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + (\\beta_2+\\beta_3*year)*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\tilde \\beta*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]\nSince \\(\\tilde \\beta\\) is a function of year, the association between engineSize and price is no longer a constant. A change in the value of year will change the association between price and engineSize.\nSubstituting the values of the coefficients:\nprice = 5.606e5 - 275.3833year + (-1.796e6+896.7687year)engineSize -0.1525mileage -84.3417mpg\nThus, for cars launched in the year 2010, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687 * 2010 \\(\\approx\\) \\$6,500, assuming all the other predictors are constant. However, for cars launched in the year 2020, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687*2020 \\(\\approx\\) \\$15,500 , assuming all the other predictors are constant.\nSimilarly, the equation can be re-arranged as:\nprice = 5.606e5 +(-275.3833+896.7687engineSize)year -1.796e6engineSize -0.1525mileage -84.3417*mpg\nThus, for cars with an engine size of 2 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 2 \\(\\approx\\) \\$1500, assuming all the other predictors are constant. However, for cars with an engine size of 3 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 3 \\(\\approx\\) \\$2400, assuming all the other predictors are constant.\n\n#Computing the RMSE of the model with the interaction term\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9423.598872501092\n\n\nNote that the RMSE is lower than that of the model in Chapter 2. This is because the interaction term between engineSize and year is significant and relaxes the assumption of constant association between price and engine size, and between price and year. This added flexibility makes the model better fit the data. Caution: Too much flexibility may lead to overfitting!\nNote that interaction terms corresponding to other variable pairs, and higher order interaction terms (such as those containing 3 or 4 variables) may also be significant and improve the model fit & thereby the prediction accuracy of the model.\n\n\n3.1.2 Including qualitative predictors in the model\nLet us develop a model for predicting price based on engineSize and the qualitative predictor transmission.\n\n#checking the distribution of values of transmission\ntrain.transmission.value_counts()\n\nManual       1948\nAutomatic    1660\nSemi-Auto    1351\nOther           1\nName: transmission, dtype: int64\n\n\nNote that the Other category of the variable transmission contains only a single observation, which is likely to be insufficient to train the model. We’ll remove that observation from the training data. Another option may be to combine the observation in the Other category with the nearest category, and keep it in the data.\n\ntrain_updated = train[train.transmission!='Other']\n\n\nols_object = smf.ols(formula = 'price ~ engineSize + transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.459\n\n\nModel:\nOLS\nAdj. R-squared:\n0.458\n\n\nMethod:\nLeast Squares\nF-statistic:\n1400.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:21\nLog-Likelihood:\n-53644.\n\n\nNo. Observations:\n4959\nAIC:\n1.073e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.073e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3042.6765\n661.190\n4.602\n0.000\n1746.451\n4338.902\n\n\ntransmission[T.Manual]\n-6770.6165\n442.116\n-15.314\n0.000\n-7637.360\n-5903.873\n\n\ntransmission[T.Semi-Auto]\n4994.3112\n442.989\n11.274\n0.000\n4125.857\n5862.765\n\n\nengineSize\n1.023e+04\n247.485\n41.323\n0.000\n9741.581\n1.07e+04\n\n\n\n\n\n\nOmnibus:\n1575.518\nDurbin-Watson:\n0.579\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n11006.609\n\n\nSkew:\n1.334\nProb(JB):\n0.00\n\n\nKurtosis:\n9.793\nCond. No.\n11.4\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nNote that there is no coefficient for the Automatic level of the variable Transmission. If a car doesn’t have Manual or Semi-Automatic transmission, then it has an Automatic transmission. Thus, the coefficient of Automatic will be redundant, and the dummy variable corresponding to Automatic transmission is dropped from the model.\nThe level of the categorical variable that is dropped from the model is called the baseline level. Here Automatic transmission is the baseline level. The coefficients of other levels of transmission should be interpreted with respect to the baseline level.\nQ: Interpret the intercept term\nAns: For the hypothetical scenario of a car with zero engine size and Automatic transmission, the estimated mean car price is \\(\\approx\\) \\$3042.\nQ: Interpret the coefficient of transmission[T.Manual]\nAns: The estimated mean price of a car with manual transmission is \\(\\approx\\) \\$6770 less than that of a car with Automatic transmission.\nLet us visualize the developed model.\n\n#Visualizing the developed model\nplt.rcParams[\"figure.figsize\"] = (9,6)\nsns.set(font_scale = 1.3)\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nax = sns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept'], color = 'red')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], color = 'blue')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Manual]'], color = 'green')\nplt.legend(labels=[\"Automatic\",\"Semi-Automatic\", \"Manual\"])\nplt.xlabel('Engine size (in litre)')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\n\n\n\n\nBased on the developed model, for a given engine size, the car with a semi-automatic transmission is estimated to be the most expensive on average, while the car with a manual transmission is estimated to be the least expensive on average.\nChanging the baseline level: By default, the baseline level is chosen as the one that comes first if the levels are arranged in alphabetical order. However, you can change the baseline level by specifying one explicitly.\nInternally, statsmodels uses the patsy package to convert formulas and data to the matrices that are used in model fitting. You may refer to this section in the patsy documentation to specify a particular level of the categorical variable as the baseline.\nFor example, suppose we wish to change the baseline level to Manual transmission. We can specify this in the formula as follows:\n\nols_object = smf.ols(formula = 'price~engineSize+C(transmission, Treatment(\"Manual\"))', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.459\n\n\nModel:\nOLS\nAdj. R-squared:\n0.458\n\n\nMethod:\nLeast Squares\nF-statistic:\n1400.\n\n\nDate:\nTue, 24 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n15:28:39\nLog-Likelihood:\n-53644.\n\n\nNo. Observations:\n4959\nAIC:\n1.073e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.073e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3727.9400\n492.917\n-7.563\n0.000\n-4694.275\n-2761.605\n\n\nC(transmission, Treatment(\"Manual\"))[T.Automatic]\n6770.6165\n442.116\n15.314\n0.000\n5903.873\n7637.360\n\n\nC(transmission, Treatment(\"Manual\"))[T.Semi-Auto]\n1.176e+04\n473.110\n24.867\n0.000\n1.08e+04\n1.27e+04\n\n\nengineSize\n1.023e+04\n247.485\n41.323\n0.000\n9741.581\n1.07e+04\n\n\n\n\n\n\nOmnibus:\n1575.518\nDurbin-Watson:\n0.579\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n11006.609\n\n\nSkew:\n1.334\nProb(JB):\n0.00\n\n\nKurtosis:\n9.793\nCond. No.\n8.62\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\n3.1.3 Including qualitative predictors and their interaction with continuous predictors in the model\nNote that the qualitative predictor leads to fitting 3 parallel lines to the data, as there are 3 categories.\nHowever, note that we have made the constant association assumption. The fact that the lines are parallel means that the average increase in car price for one litre increase in engine size does not depend on the type of transmission. This represents a potentially serious limitation of the model, since in fact a change in engine size may have a very different association on the price of an automatic car versus a semi-automatic or manual car.\nThis limitation can be addressed by adding an interaction variable, which is the product of engineSize and the dummy variables for semi-automatic and manual transmissions.\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~engineSize*transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.479\n\n\nModel:\nOLS\nAdj. R-squared:\n0.478\n\n\nMethod:\nLeast Squares\nF-statistic:\n909.9\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n22:55:55\nLog-Likelihood:\n-53550.\n\n\nNo. Observations:\n4959\nAIC:\n1.071e+05\n\n\nDf Residuals:\n4953\nBIC:\n1.072e+05\n\n\nDf Model:\n5\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3754.7238\n895.221\n4.194\n0.000\n1999.695\n5509.753\n\n\ntransmission[T.Manual]\n1768.5856\n1294.071\n1.367\n0.172\n-768.366\n4305.538\n\n\ntransmission[T.Semi-Auto]\n-5282.7164\n1416.472\n-3.729\n0.000\n-8059.628\n-2505.805\n\n\nengineSize\n9928.6082\n354.511\n28.006\n0.000\n9233.610\n1.06e+04\n\n\nengineSize:transmission[T.Manual]\n-5285.9059\n646.175\n-8.180\n0.000\n-6552.695\n-4019.117\n\n\nengineSize:transmission[T.Semi-Auto]\n4162.2428\n552.597\n7.532\n0.000\n3078.908\n5245.578\n\n\n\n\n\n\nOmnibus:\n1379.846\nDurbin-Watson:\n0.622\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n9799.471\n\n\nSkew:\n1.139\nProb(JB):\n0.00\n\n\nKurtosis:\n9.499\nCond. No.\n30.8\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nThe model equation for the model with interactions is:\nAutomatic transmission: price = 3754.7238 + 9928.6082 * engineSize,\nSemi-Automatic transmission: price = 3754.7238 + 9928.6082 * engineSize + (-5282.7164+4162.2428*engineSize),\n\nManual transmission: price = 3754.7238 + 9928.6082 * engineSize +(1768.5856-5285.9059 * engineSize),\nor\nAutomatic transmission: price = 3754.7238 + 9928.6082 * engineSize,\nSemi-Automatic transmission: price = -1527 + 7046 * engineSize,\nManual transmission: price = 5523 + 4642 * engineSize\nQ: Interpret the coefficient of manual tranmission, i.e., the coefficient of transmission[T.Manual].\nA: For a hypothetical scenario of zero engine size, the estimated mean price of a car with Manual transmission is \\(\\approx\\) \\$1768 more than the estimated mean price of a car with Automatic transmission.\nQ: Interpret the coefficient of the interaction between engine size and manual transmission, i.e., the coefficient of engineSize:transmission[T.Manual].\nA: For a unit (or a litre) increase in engineSize , the increase in estimated mean price of a car with Manual transmission is \\(\\approx\\) \\$5285 less than the increase in estimated mean price of a car with Automatic transmission.\n\n#Visualizing the developed model with interaction terms\nplt.rcParams[\"figure.figsize\"] = (9,6)\nsns.set(font_scale = 1.3)\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nax = sns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept'], label='Automatic', color = 'red')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Semi-Auto]'])*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], '-b', label='Semi-Automatic')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Manual]'])*x+model.params['Intercept']+model.params['transmission[T.Manual]'], '-g', label='Manual')\nplt.legend(loc='upper left')\nplt.xlabel('Engine size (in litre)')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\n\n\n\n\n\n\n\n\nNote the interaction term adds flexibility to the model.\nThe slope of the regression line for semi-automatic cars is the largest. This suggests that increase in engine size is associated with a higher increase in car price for semi-automatic cars, as compared to other cars.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variable interactions and transformations</span>"
    ]
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "title": "3  Variable interactions and transformations",
    "section": "3.2 Variable transformations",
    "text": "3.2 Variable transformations\nSo far we have considered only a linear relationship between the predictors and the response. However, the relationship may be non-linear.\nConsider the regression plot of price on mileage.\n\nax = sns.regplot(x = train_updated.mileage, y =train_updated.price,color = 'orange', line_kws = {'color':'blue'})\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\n\n\n\n\n\n#R-squared of the model with just mileage\nmodel = smf.ols('price~mileage', data = train_updated).fit()\nmodel.rsquared\n\n0.22928048993376182\n\n\nFrom the first scatterplot, we see that the relationship between price and mileage doesn’t seem to be linear, as the points do not lie on a straight line. Also, we see the regression line (or the curve), which is the best fit line doesn’t seem to fit the points well. However, price on average seems to decrease with mileage, albeit in a non-linear manner.\n\n3.2.1 Quadratic transformation\nSo, we guess that if we model price as a quadratic function of mileage, the model may better fit the points (or the curve may better fit the points). Let us transform the predictor mileage to include \\(mileage^2\\) (i.e., perform a quadratic transformation on the predictor).\n\n#Including mileage squared as a predictor and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.271\n\n\nModel:\nOLS\nAdj. R-squared:\n0.271\n\n\nMethod:\nLeast Squares\nF-statistic:\n920.6\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:26:05\nLog-Likelihood:\n-54382.\n\n\nNo. Observations:\n4959\nAIC:\n1.088e+05\n\n\nDf Residuals:\n4956\nBIC:\n1.088e+05\n\n\nDf Model:\n2\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.44e+04\n332.710\n103.382\n0.000\n3.37e+04\n3.5e+04\n\n\nmileage\n-0.5662\n0.017\n-33.940\n0.000\n-0.599\n-0.534\n\n\nI(mileage ** 2)\n2.629e-06\n1.56e-07\n16.813\n0.000\n2.32e-06\n2.94e-06\n\n\n\n\n\n\nOmnibus:\n2362.973\nDurbin-Watson:\n0.325\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n22427.952\n\n\nSkew:\n2.052\nProb(JB):\n0.00\n\n\nKurtosis:\n12.576\nCond. No.\n4.81e+09\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 4.81e+09. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nNote that in the formula specified within the ols() function, the I() operator isolates or insulates the contents within I(…) from the regular formula operators. Without the I() operator, mileage**2 will be treated as the interaction of mileage with itself, which is mileage. Thus, to add the square of mileage as a separate predictor, we need to use the I() operator.\nLet us visualize the model fit with the quadratic transformation of the predictor - mileage.\n\n#Visualizing the regression line with the model consisting of the quadratic transformation of the predictor - mileage\npred_price = model.predict(train_updated)\nax = sns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\n\n\n\n\nThe above model seems to better fit the data (as compared to the model without transformation) at least upto mileage around 125,000. The \\(R^2\\) of the model with the quadratic transformation of mileage is also higher than that of the model without transformation indicating a better fit.\n\n\n3.2.2 Cubic transformation\nLet us see if a cubic transformation of mileage can further improve the model fit.\n\n#Including mileage squared and mileage cube as predictors and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)+I(mileage**3)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.283\n\n\nModel:\nOLS\nAdj. R-squared:\n0.283\n\n\nMethod:\nLeast Squares\nF-statistic:\n652.3\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:33:27\nLog-Likelihood:\n-54340.\n\n\nNo. Observations:\n4959\nAIC:\n1.087e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.087e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n3.598e+04\n371.926\n96.727\n0.000\n3.52e+04\n3.67e+04\n\n\nmileage\n-0.7742\n0.028\n-27.634\n0.000\n-0.829\n-0.719\n\n\nI(mileage ** 2)\n6.875e-06\n4.87e-07\n14.119\n0.000\n5.92e-06\n7.83e-06\n\n\nI(mileage ** 3)\n-1.823e-11\n1.98e-12\n-9.199\n0.000\n-2.21e-11\n-1.43e-11\n\n\n\n\n\n\nOmnibus:\n2380.788\nDurbin-Watson:\n0.321\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n23039.307\n\n\nSkew:\n2.065\nProb(JB):\n0.00\n\n\nKurtosis:\n12.719\nCond. No.\n7.73e+14\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.73e+14. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n\n#Visualizing the model with the cubic transformation of mileage\npred_price = model.predict(train_updated)\nax = sns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\nplt.xlabel('Mileage')\nplt.ylabel('Predicted car price')\nax.yaxis.set_major_formatter('${x:,.0f}')\nax.xaxis.set_major_formatter('{x:,.0f}')\n\n\n\n\n\n\n\n\nNote that the model fit with the cubic transformation of mileage seems slightly better as compared to the models with the quadratic transformation, and no transformation of mileage, for mileage up to 180k. However, the model should not be used to predict car prices of cars with a mileage higher than 180k.\nLet’s update the model created earlier (in the beginning of this chapter) to include the transformed predictor.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.702\n\n\nModel:\nOLS\nAdj. R-squared:\n0.702\n\n\nMethod:\nLeast Squares\nF-statistic:\n1947.\n\n\nDate:\nSun, 22 Jan 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n23:42:13\nLog-Likelihood:\n-52162.\n\n\nNo. Observations:\n4959\nAIC:\n1.043e+05\n\n\nDf Residuals:\n4952\nBIC:\n1.044e+05\n\n\nDf Model:\n6\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n1.53e+06\n2.7e+05\n5.671\n0.000\n1e+06\n2.06e+06\n\n\nyear\n-755.7419\n133.791\n-5.649\n0.000\n-1018.031\n-493.453\n\n\nengineSize\n-2.022e+06\n9.72e+04\n-20.803\n0.000\n-2.21e+06\n-1.83e+06\n\n\nyear:engineSize\n1008.6993\n48.196\n20.929\n0.000\n914.215\n1103.184\n\n\nmileage\n-0.3548\n0.014\n-25.973\n0.000\n-0.382\n-0.328\n\n\nmpg\n-54.7450\n8.896\n-6.154\n0.000\n-72.185\n-37.305\n\n\nI(mileage ** 2)\n1.926e-06\n1.04e-07\n18.536\n0.000\n1.72e-06\n2.13e-06\n\n\n\n\n\n\nOmnibus:\n2355.448\nDurbin-Watson:\n0.562\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n38317.404\n\n\nSkew:\n1.857\nProb(JB):\n0.00\n\n\nKurtosis:\n16.101\nCond. No.\n6.40e+12\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 6.4e+12. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nNote that the R-squared has increased as compared to the model with just the interaction term.\n\n#Computing RMSE on test data\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9074.494088619422\n\n\nNote that the prediction accuracy of the model has further increased, as the RMSE has reduced. The transformed predictor is statistically significant and provides additional flexibility to better capture the trend in the data, leading to an increase in prediction accuracy.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variable interactions and transformations</span>"
    ]
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#polynomialfeatures",
    "href": "Lec3_VariableTransformations_and_Interactions.html#polynomialfeatures",
    "title": "3  Variable interactions and transformations",
    "section": "3.3 PolynomialFeatures()",
    "text": "3.3 PolynomialFeatures()\nThe function PolynomialFeatures() from the sklearn library can be used to generate a predictor matrix that includes all interactions and transformations upto a degree d.\n\nX_train = train[['mileage', 'engineSize', 'year', 'mpg']]\ny_train = train[['price']]\nX_test = test[['mileage', 'engineSize', 'year', 'mpg']]\ny_test = test[['price']]\n\n\n3.3.1 Generating polynomial features\nLet us generate polynomial features upto degree 2. This will include all the two-factor interactions, and all squared terms of degree 2.\n\npoly = PolynomialFeatures(2, include_bias = False) # Create the object - degree is 2\n\n# Generate the polynomial features\nX_train_poly = poly.fit_transform(X_train) \n\nNote that the LinearRegression() function adds the intercept by default (check the fit_intercept argument). Thus, we have put include_bias = False while generating the polynomial features, as we don’t need the intercept. The term bias here refers to the intercept (you will learn about bias in detail in STAT303-3). Another option is to include the intercept while generating the polynomial features, and put fit_intercept = False in the LinearRegression() function.\nBelow are the polynomial features generated by the PolynomialFeatures() functions.\n\npoly.get_feature_names_out()\n\narray(['mileage', 'engineSize', 'year', 'mpg', 'mileage^2',\n       'mileage engineSize', 'mileage year', 'mileage mpg',\n       'engineSize^2', 'engineSize year', 'engineSize mpg', 'year^2',\n       'year mpg', 'mpg^2'], dtype=object)\n\n\n\n\n3.3.2 Fitting the model\n\nmodel = LinearRegression() \nmodel.fit(X_train_poly, y_train) \n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\n\n\n3.3.3 Testing the model\n\nX_test_poly = poly.fit_transform(X_test)\n\n\n#RMSE\nnp.sqrt(mean_squared_error(y_test, model.predict(X_test_poly)))\n\n8896.175508213777\n\n\nNote that the polynomial features have helped reduced the RMSE further.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Variable interactions and transformations</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html",
    "href": "Lec7_logistic_regression.html",
    "title": "4  Logistic regression",
    "section": "",
    "text": "4.1 Theory Behind Logistic Regression\nLogistic regression is the go-to linear classification algorithm for two-class problems. It is easy to implement, easy to understand and gets great results on a wide variety of problems, even when the expectations the method has for your data are violated.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#theory-behind-logistic-regression",
    "href": "Lec7_logistic_regression.html#theory-behind-logistic-regression",
    "title": "4  Logistic regression",
    "section": "",
    "text": "4.1.1 Description\nLogistic regression is named for the function used at the core of the method, the logistic function.\nThe logistic function, also called the Sigmoid function was developed by statisticians to describe properties of population growth in ecology, rising quickly and maxing out at the carrying capacity of the environment. It’s an S-shaped curve that can take any real-valued number and map it into a value between 0 and 1, but never exactly at those limits.\n\\[\\frac{1}{1 + e^{-x}}\\]\n\\(e\\) is the base of the natural logarithms and \\(x\\) is value that you want to transform via the logistic function.\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.formula.api as sm\nfrom sklearn.metrics import precision_recall_curve, roc_curve, auc, accuracy_score\nfrom sklearn.linear_model import LogisticRegression\n\n\n%matplotlib inline\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\nx = np.linspace(-6, 6, num=1000)\nplt.figure(figsize=(10, 6))\nplt.plot(x, (1 / (1 + np.exp(-x))))\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Sigmoid Function\")\n\nText(0.5, 1.0, 'Sigmoid Function')\n\n\n\n\n\n\n\n\n\nThe logistic regression equation has a very similar representation like linear regression. The difference is that the output value being modelled is binary in nature.\n\\[\\hat{p}=\\frac{e^{\\hat{\\beta_0}+\\hat{\\beta_1}x_1}}{1+e^{\\hat{\\beta_0}+\\hat{\\beta_1}x_1}}\\]\nor\n\\[\\hat{p}=\\frac{1.0}{1.0+e^{-(\\hat{\\beta_0}+\\hat{\\beta_1}x_1)}}\\]\n\\(\\hat{\\beta_0}\\) is the estimated intercept term\n\\(\\hat{\\beta_1}\\) is the estimated coefficient for \\(x_1\\)\n\\(\\hat{p}\\) is the predicted output with real value between 0 and 1. To convert this to binary output of 0 or 1, this would either need to be rounded to an integer value or a cutoff point be provided to specify the class segregation point.\n\n\n4.1.2 Learning the Logistic Regression Model\nThe coefficients (Beta values b) of the logistic regression algorithm must be estimated from your training data. This is done using maximum-likelihood estimation.\nMaximum-likelihood estimation is a common learning algorithm used by a variety of machine learning algorithms, although it does make assumptions about the distribution of your data (more on this when we talk about preparing your data).\nThe best coefficients should result in a model that would predict a value very close to 1 (e.g. male) for the default class and a value very close to 0 (e.g. female) for the other class. The intuition for maximum-likelihood for logistic regression is that a search procedure seeks values for the coefficients (Beta values) that maximize the likelihood of the observed data. In other words, in MLE, we estimate the parameter values (Beta values) which are the most likely to produce that data at hand.\nHere is an analogy to understand the idea behind Maximum Likelihood Estimation (MLE). Let us say, you are listening to a song (data). You are not aware of the singer (parameter) of the song. With just the musical piece at hand, you try to guess the singer (parameter) who you feel is the most likely (MLE) to have sung that song. Your are making a maximum likelihood estimate! Out of all the singers (parameter space) you have chosen them as the one who is the most likely to have sung that song (data).\nWe are not going to go into the math of maximum likelihood. It is enough to say that a minimization algorithm is used to optimize the best values for the coefficients for your training data. This is often implemented in practice using efficient numerical optimization algorithm (like the Quasi-newton method).\nWhen you are learning logistic, you can implement it yourself from scratch using the much simpler gradient descent algorithm.\n\n\n4.1.3 Preparing Data for Logistic Regression\nThe assumptions made by logistic regression about the distribution and relationships in your data are much the same as the assumptions made in linear regression.\nMuch study has gone into defining these assumptions and precise probabilistic and statistical language is used. My advice is to use these as guidelines or rules of thumb and experiment with different data preparation schemes.\nUltimately in predictive modeling machine learning projects you are laser focused on making accurate predictions rather than interpreting the results. As such, you can break some assumptions as long as the model is robust and performs well.\n\nBinary Output Variable: This might be obvious as we have already mentioned it, but logistic regression is intended for binary (two-class) classification problems. It will predict the probability of an instance belonging to the default class, which can be snapped into a 0 or 1 classification.\nRemove Noise: Logistic regression assumes no error in the output variable (y), consider removing outliers and possibly misclassified instances from your training data.\nGaussian Distribution: Logistic regression is a linear algorithm (with a non-linear transform on output). It does assume a linear relationship between the input variables with the output. Data transforms of your input variables that better expose this linear relationship can result in a more accurate model. For example, you can use log, root, Box-Cox and other univariate transforms to better expose this relationship.\nRemove Correlated Inputs: Like linear regression, the model can overfit if you have multiple highly-correlated inputs. Consider calculating the pairwise correlations between all inputs and removing highly correlated inputs.\nFail to Converge: It is possible for the expected likelihood estimation process that learns the coefficients to fail to converge. This can happen if there are many highly correlated inputs in your data or the data is very sparse (e.g. lots of zeros in your input data).",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#logistic-regression-scikit-learn-vs-statsmodels",
    "href": "Lec7_logistic_regression.html#logistic-regression-scikit-learn-vs-statsmodels",
    "title": "4  Logistic regression",
    "section": "4.2 Logistic Regression: Scikit-learn vs Statsmodels",
    "text": "4.2 Logistic Regression: Scikit-learn vs Statsmodels\nPython gives us two ways to do logistic regression. Statsmodels offers modeling from the perspective of statistics. Scikit-learn offers some of the same models from the perspective of machine learning.\nSo we need to understand the difference between statistics and machine learning! Statistics makes mathematically valid inferences about a population based on sample data. Statistics answers the question, “What is the evidence that X is related to Y?” Machine learning has the goal of optimizing predictive accuracy rather than inference. Machine learning answers the question, “Given X, what prediction should we make for Y?”\nLet us see the use of statsmodels for logistic regression. We’ll see scikit-learn later in the course, when we learn methods that focus on prediction.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#training-a-logistic-regression-model",
    "href": "Lec7_logistic_regression.html#training-a-logistic-regression-model",
    "title": "4  Logistic regression",
    "section": "4.3 Training a logistic regression model",
    "text": "4.3 Training a logistic regression model\nRead the data on social network ads. The data shows if the person purchased a product when targeted with an ad on social media. Fit a logistic regression model to predict if a user will purchase the product based on their characteristics such as age, gender and estimated salary.\n\ntrain = pd.read_csv('./Datasets/Social_Network_Ads_train.csv') #Develop the model on train data\ntest = pd.read_csv('./Datasets/Social_Network_Ads_test.csv') #Test the model on test data\n\n\ntrain.head()\n\n\n\n\n\n\n\n\n\nUser ID\nGender\nAge\nEstimatedSalary\nPurchased\n\n\n\n\n0\n15755018\nMale\n36\n33000\n0\n\n\n1\n15697020\nFemale\n39\n61000\n0\n\n\n2\n15796351\nMale\n36\n118000\n1\n\n\n3\n15665760\nMale\n39\n122000\n1\n\n\n4\n15794661\nFemale\n26\n118000\n0\n\n\n\n\n\n\n\n\n\n4.3.1 Examining the Distribution of the Target Column\nMake sure our target is not severely imbalanced.\n\ntrain.Purchased.value_counts()\n\n0    194\n1    106\nName: Purchased, dtype: int64\n\n\n\nsns.countplot(x = 'Purchased',data = train);\n\n\n\n\n\n\n\n\nLet us try to fit a linear regression model, instead of logistic regression. We fit a linear regression model to predict probability of purchase based on age.\n\nsns.scatterplot(x = 'Age', y = 'Purchased', data = train, color = 'orange') #Visualizing data\nlm = sm.ols(formula = 'Purchased~Age', data = train).fit() #Developing linear regression model\nsns.lineplot(x = 'Age', y= lm.predict(train), data = train, color = 'blue') #Visualizing model\n\n\n\n\n\n\n\n\nNote the issues with the linear regression model:\n\nThe regression line goes below 0 and over 1. However, probability of purchase must be in [0,1].\nThe linear regression model does not seem to fit the data well.\n\n\n\n4.3.2 Fitting the logistic regression model\nNow, let us fit a logistic regression model to predict probability of purchase based on Age.\n\nsns.scatterplot(x = 'Age', y = 'Purchased', data = train, color = 'orange') #Visualizing data\nlogit_model = sm.logit(formula = 'Purchased~Age', data = train).fit() #Developing logistic regression model\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') #Visualizing model\n\nOptimization terminated successfully.\n         Current function value: 0.430107\n         Iterations 7\n\n\n\n\n\n\n\n\n\nAs logistic regression uses the sigmoid function, the probability stays in [0,1]. Also, it seems to better fit the points as compared to linear regression.\n\nlogit_model.summary()\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n298\n\n\nMethod:\nMLE\nDf Model:\n1\n\n\nDate:\nTue, 19 Apr 2022\nPseudo R-squ.:\n0.3378\n\n\nTime:\n16:46:02\nLog-Likelihood:\n-129.03\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.805e-30\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-7.8102\n0.885\n-8.825\n0.000\n-9.545\n-6.076\n\n\nAge\n0.1842\n0.022\n8.449\n0.000\n0.141\n0.227\n\n\n\n\n\n\nInterpret the coefficient of age\nFor a unit increase in age, the log odds of purchase increase by 0.18, or the odds of purchase get multiplied by exp(0.18) = 1.2\nIs the increase in probability of purchase constant with a unit increase in age?\nNo, it depends on age.\nIs gender associated with probability of purchase?\n\nlogit_model_gender = sm.logit(formula = 'Purchased~Gender', data = train).fit()\nlogit_model_gender.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.648804\n         Iterations 4\n\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n298\n\n\nMethod:\nMLE\nDf Model:\n1\n\n\nDate:\nTue, 19 Apr 2022\nPseudo R-squ.:\n0.001049\n\n\nTime:\n16:46:04\nLog-Likelihood:\n-194.64\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n0.5225\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-0.5285\n0.168\n-3.137\n0.002\n-0.859\n-0.198\n\n\nGender[T.Male]\n-0.1546\n0.242\n-0.639\n0.523\n-0.629\n0.319\n\n\n\n\n\n\nNo, assuming a significance level of \\(\\alpha = 5\\%\\), Gender is not associated with probability of default, as the \\(p\\)-value for Male is greater than 0.05.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#confusion-matrix-and-classification-accuracy",
    "href": "Lec7_logistic_regression.html#confusion-matrix-and-classification-accuracy",
    "title": "4  Logistic regression",
    "section": "4.4 Confusion matrix and classification accuracy",
    "text": "4.4 Confusion matrix and classification accuracy\nA confusion matrix is a summary of prediction results on a classification problem. The number of correct and incorrect predictions are summarized with count values and broken down by each class.\n\n#Function to compute confusion matrix and prediction accuracy on training data\ndef confusion_matrix_train(model,cutoff=0.5):\n    # Confusion matrix\n    cm_df = pd.DataFrame(model.pred_table(threshold = cutoff))\n    #Formatting the confusion matrix\n    cm_df.columns = ['Predicted 0', 'Predicted 1'] \n    cm_df = cm_df.rename(index={0: 'Actual 0',1: 'Actual 1'})\n    cm = np.array(cm_df)\n    # Calculate the accuracy\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n\nFind the confusion matrix and classification accuracy of the model with Age as the predictor on training data.\n\ncm = confusion_matrix_train(logit_model)\n\nClassification accuracy = 83.3%\n\n\n\n\n\n\n\n\n\nConfusion matrix:\n\nEach row: actual class\nEach column: predicted class\n\nFirst row: Non-purchasers, the negative class:\n\n181 were correctly classified as Non-purchasers. True negatives.\nRemaining 13 were wrongly classified as Non-purchasers. False positive\n\nSecond row: Purchasers, the positive class:\n\n37 were incorrectly classified as Non-purchasers. False negatives\n69 were correctly classified Purchasers. True positives\n\n\n#Function to compute confusion matrix and prediction accuracy on test data\ndef confusion_matrix_test(data,actual_values,model,cutoff=0.5):\n#Predict the values using the Logit model\n    pred_values = model.predict(data)\n# Specify the bins\n    bins=np.array([0,cutoff,1])\n#Confusion matrix\n    cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]\n    cm_df = pd.DataFrame(cm)\n    cm_df.columns = ['Predicted 0','Predicted 1']\n    cm_df = cm_df.rename(index={0: 'Actual 0',1:'Actual 1'})\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n\nFind the confusion matrix and classification accuracy of the model with Age as the predictor on test data.\n\nconfusion_matrix_test(test,test.Purchased,logit_model)\n\nClassification accuracy = 86.0%\n\n\n\n\n\n\n\n\n\nThe model classifies a bit more accurately on test data as compared to the training data, which is a bit unusual. However, it shows that the model did not overfit on training data.\nInclude EstimatedSalary as a predictor in the above model\n\nlogit_model2 = sm.logit(formula = 'Purchased~Age+EstimatedSalary', data = train).fit()\nlogit_model2.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.358910\n         Iterations 7\n\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n297\n\n\nMethod:\nMLE\nDf Model:\n2\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.4474\n\n\nTime:\n12:03:29\nLog-Likelihood:\n-107.67\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.385e-38\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-11.9432\n1.424\n-8.386\n0.000\n-14.735\n-9.152\n\n\nAge\n0.2242\n0.028\n7.890\n0.000\n0.168\n0.280\n\n\nEstimatedSalary\n3.48e-05\n6.15e-06\n5.660\n0.000\n2.27e-05\n4.68e-05\n\n\n\n\n\n\n\nconfusion_matrix_train(logit_model2)\n\nClassification accuracy = 83.3%\n\n\n\n\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Purchased,logit_model2)\n\nClassification accuracy = 89.0%\n\n\n\n\n\n\n\n\n\nThe log likelihood of the model has increased, while also increasing the prediction accuracy on test data, which shows that the additional predictor is helping explain the response better, without overfitting the data.\nInclude Gender as a predictor in the above model\n\nlogit_model = sm.logit(formula = 'Purchased~Age+EstimatedSalary+Gender', data = train).fit()\nlogit_model.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.357327\n         Iterations 7\n\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nPurchased\nNo. Observations:\n300\n\n\nModel:\nLogit\nDf Residuals:\n296\n\n\nMethod:\nMLE\nDf Model:\n3\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.4498\n\n\nTime:\n12:17:28\nLog-Likelihood:\n-107.20\n\n\nconverged:\nTrue\nLL-Null:\n-194.85\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n9.150e-38\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-12.2531\n1.478\n-8.293\n0.000\n-15.149\n-9.357\n\n\nGender[T.Male]\n0.3356\n0.346\n0.970\n0.332\n-0.342\n1.013\n\n\nAge\n0.2275\n0.029\n7.888\n0.000\n0.171\n0.284\n\n\nEstimatedSalary\n3.494e-05\n6.17e-06\n5.666\n0.000\n2.29e-05\n4.7e-05\n\n\n\n\n\n\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 84.3%\n\n\n\n\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Purchased,logit_model)\n\nClassification accuracy = 88.0%\n\n\n\n\n\n\n\n\n\nGender is a statistically insignificant predictor, and including it slightly lowers the classification accuracy on test data. Note that the classification accuracy on training data will continue to increase on adding more predictors, irrespective of their relevance (similar to the idea of RSS on training data in linear regression).\nIs there a residual in logistic regression?\nNo, since the response is assumed to have a Bernoulli distribution, instead of a normal distribution.\nIs the odds ratio for a unit increase in a predictor \\(X_j\\), a constant (assuming that the rest of the predictors are held constant)?\nYes, the odds ratio in this case will \\(e^{\\beta_j}\\)",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#variable-transformations-in-logistic-regression",
    "href": "Lec7_logistic_regression.html#variable-transformations-in-logistic-regression",
    "title": "4  Logistic regression",
    "section": "4.5 Variable transformations in logistic regression",
    "text": "4.5 Variable transformations in logistic regression\nRead the dataset diabetes.csv that contains if a person has diabetes (Outcome = 1) based on health parameters such as BMI, blood pressure, age etc. Develop a model to predict the probability of a person having diabetes based on their age.\n\ndata = pd.read_csv('./Datasets/diabetes.csv')\n\n\ndata.head()\n\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\n\n\n\n\n0\n6\n148\n72\n35\n0\n33.6\n0.627\n50\n1\n\n\n1\n1\n85\n66\n29\n0\n26.6\n0.351\n31\n0\n\n\n2\n8\n183\n64\n0\n0\n23.3\n0.672\n32\n1\n\n\n3\n1\n89\n66\n23\n94\n28.1\n0.167\n21\n0\n\n\n4\n0\n137\n40\n35\n168\n43.1\n2.288\n33\n1\n\n\n\n\n\n\n\n\nRandomly select 80% of the observations to create a training dataset. Create a test dataset with the remaining 20% observations.\n\n#Creating training and test datasets\nnp.random.seed(2)\ntrain = data.sample(round(data.shape[0]*0.8))\ntest = data.drop(train.index)\n\nDoes Age seem to distinguish Outcome levels?\n\nsns.boxplot(x = 'Outcome', y = 'Age', data = train)\n\n\n\n\n\n\n\n\nYes it does!\nDevelop and visualize a logistic regression model to predict Outcome using Age.\n\n#Jittering points to better see the density of points in any given region of the plot\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~Age', data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \nprint(logit_model.llf) #Printing the log likelihood to compare it with the next model we build\n\nOptimization terminated successfully.\n         Current function value: 0.612356\n         Iterations 5\n-375.9863802089716\n\n\n\n\n\n\n\n\n\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 65.6%\n\n\n\n\n\n\n\n\n\nClassification accuracy on train data = 66%\n\nconfusion_matrix_test(test,test.Outcome,logit_model)\n\nClassification accuracy = 59.7%\n\n\n\n\n\n\n\n\n\nClassification accuracy on test data = 60%\nCan a tranformation of Age provide a more accurate model?\nLet us visualize how the probability of people having diabetes varies with Age. We will bin Age to get the percentage of people having diabetes within different Age bins.\n\n#Binning Age\nbinned_age = pd.qcut(train['Age'],11,retbins=True)\ntrain['age_binned'] = binned_age[0]\n\n\n#Finding percentage of people having diabetes in each Age bin\nage_data = train.groupby('age_binned')['Outcome'].agg([('diabetes_percent','mean'),('nobs','count')]).reset_index(drop=False)\nage_data\n\n\n\n\n\n\n\n\n\nage_binned\ndiabetes_percent\nnobs\n\n\n\n\n0\n(20.999, 22.0]\n0.110092\n109\n\n\n1\n(22.0, 23.0]\n0.206897\n29\n\n\n2\n(23.0, 25.0]\n0.243243\n74\n\n\n3\n(25.0, 26.0]\n0.259259\n27\n\n\n4\n(26.0, 28.0]\n0.271186\n59\n\n\n5\n(28.0, 31.0]\n0.415094\n53\n\n\n6\n(31.0, 35.0]\n0.434783\n46\n\n\n7\n(35.0, 39.0]\n0.450980\n51\n\n\n8\n(39.0, 43.545]\n0.500000\n54\n\n\n9\n(43.545, 52.0]\n0.576271\n59\n\n\n10\n(52.0, 81.0]\n0.415094\n53\n\n\n\n\n\n\n\n\n\n#Visualizing percentage of people having diabetes with increasing Age (or Age bins)\nsns.lineplot(x = age_data.index, y= age_data['diabetes_percent'])\nplt.xlabel('Age_bin')\n\nText(0.5, 0, 'Age_bin')\n\n\n\n\n\n\n\n\n\nWe observe that the probability of people having diabetes does not keep increasing monotonically with age. People with ages 52 and more have a lower probability of having diabetes than people in the immediately younger Age bin.\nA quadratic transformation of Age may better fit the above trend\n\n#Model with the quadratic transformation of Age\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~Age+I(Age**2)', data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \nlogit_model.llf\n\nOptimization terminated successfully.\n         Current function value: 0.586025\n         Iterations 6\n\n\n-359.81925590230185\n\n\n\n\n\n\n\n\n\n\nlogit_model.summary()\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n611\n\n\nMethod:\nMLE\nDf Model:\n2\n\n\nDate:\nTue, 14 Feb 2023\nPseudo R-squ.:\n0.08307\n\n\nTime:\n12:25:54\nLog-Likelihood:\n-359.82\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n6.965e-15\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-6.6485\n0.908\n-7.320\n0.000\n-8.429\n-4.868\n\n\nAge\n0.2936\n0.048\n6.101\n0.000\n0.199\n0.388\n\n\nI(Age ** 2)\n-0.0031\n0.001\n-5.280\n0.000\n-0.004\n-0.002\n\n\n\n\n\n\nThe log likelihood of the model is higher and both the predictors are statistically significant indicating a better model fit. However, the model may also be overfitting. Let us check the model accuracy on test data.\n\nconfusion_matrix_train(logit_model)\n\nClassification accuracy = 68.1%\n\n\n\n\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Outcome,logit_model)\n\nClassification accuracy = 68.8%\n\n\n\n\n\n\n\n\n\nThe classification accuracy on test data has increased to 69%. However, the number of false positives have increased. But in case of diabetes, false negatives are more concerning than false positives. This is because if a person has diabetes, and is told that they do not have diabetes, their condition may deteriorate. If a person does not have diabetes, and is told that they have diabetes, they may take unnecessary precautions or tests, but it will not be as harmful to the person as in the previous case. So, in this problem, we will be more focused on reducing the number of false negatives, instead of reducing the false positives or increasing the overall classification accuracy.\nWe can decrease the cutoff for classifying a person as having diabetes to reduce the number of false negatives.\n\n#Reducing the cutoff for classifying a person as diabetic to 0.3 (instead of 0.5)\nconfusion_matrix_test(test,test.Outcome,logit_model,0.3)\n\nClassification accuracy = 69.5%\n\n\n\n\n\n\n\n\n\nNote that the changed cut-off reduced the number of false negatives, but at the cost of increasing the false positives. However, the stakeholders may prefer the reduced cut-off to be safer.\nIs there another way to transform Age?\nYes, binning age into bins that have similar proportion of people with diabetes may provide a better model fit.\n\n#Creating a function to bin age so that it can be applied to both the test and train datasets\ndef var_transform(data):\n    binned_age = pd.qcut(train['Age'],10,retbins=True)\n    bins = binned_age[1]\n    data['age_binned'] = pd.cut(data['Age'],bins = bins)\n    dum = pd.get_dummies(data.age_binned,drop_first = True)\n    dum.columns = ['age'+str(x) for x in range(1,len(bins)-1)]\n    data = pd.concat([data,dum], axis = 1)\n    return data\n\n\n#Binning age using the function var_transform()\ntrain = var_transform(train)\ntest = var_transform(test)\n\n\n#Re-creating the plot of diabetes_percent vs age created earlier, just to check if the function binned age correctly. Yes, it did.\nage_data = train.groupby('age_binned')['Outcome'].agg([('diabetes_percent','mean'),('nobs','count')]).reset_index(drop=False)\nsns.lineplot(x = age_data.index, y= age_data['diabetes_percent'])\nplt.xlabel('Age_bin')\n\nText(0.5, 0, 'Age_bin')\n\n\n\n\n\n\n\n\n\n\n#Model with binned Age\ndef jitter(values,j):\n    return values + np.random.normal(j,0.02,values.shape)\nsns.scatterplot(x = jitter(train.Age,0), y = jitter(train.Outcome,0), data = train, color = 'orange')\nlogit_model = sm.logit(formula = 'Outcome~' + '+'.join(['age'+str(x) for x in range(1,10)]), data = train).fit()\nsns.lineplot(x = 'Age', y= logit_model.predict(train), data = train, color = 'blue') \n\nOptimization terminated successfully.\n         Current function value: 0.585956\n         Iterations 6\n\n\n\n\n\n\n\n\n\n\nlogit_model.summary()\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n604\n\n\nMethod:\nMLE\nDf Model:\n9\n\n\nDate:\nSun, 19 Feb 2023\nPseudo R-squ.:\n0.08318\n\n\nTime:\n14:19:51\nLog-Likelihood:\n-359.78\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n1.273e-10\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-2.0898\n0.306\n-6.829\n0.000\n-2.690\n-1.490\n\n\nage1\n0.7461\n0.551\n1.354\n0.176\n-0.334\n1.826\n\n\nage2\n0.9548\n0.409\n2.336\n0.019\n0.154\n1.756\n\n\nage3\n1.0602\n0.429\n2.471\n0.013\n0.219\n1.901\n\n\nage4\n1.3321\n0.438\n3.044\n0.002\n0.474\n2.190\n\n\nage5\n1.9606\n0.398\n4.926\n0.000\n1.180\n2.741\n\n\nage6\n1.8303\n0.399\n4.586\n0.000\n1.048\n2.612\n\n\nage7\n1.7596\n0.410\n4.288\n0.000\n0.955\n2.564\n\n\nage8\n2.4544\n0.402\n6.109\n0.000\n1.667\n3.242\n\n\nage9\n1.8822\n0.404\n4.657\n0.000\n1.090\n2.674\n\n\n\n\n\n\nNote that the probability of having diabetes for each age bin is a constant, as per the above plot.\n\nconfusion_matrix_test(test,test.Outcome,logit_model,0.3)\n\nClassification accuracy = 67.5%\n\n\n\n\n\n\n\n\n\nBinning Age provides a similar result as compared to the model with the quadratic transformation of Age.\n\ntrain.head()\n\n\n\n\n\n\n\n\n\nPregnancies\nGlucose\nBloodPressure\nSkinThickness\nInsulin\nBMI\nDiabetesPedigreeFunction\nAge\nOutcome\nage_binned\nage1\nage2\nage3\nage4\nage5\nage6\nage7\nage8\nage9\n\n\n\n\n158\n2\n88\n74\n19\n53\n29.0\n0.229\n22\n0\n(21.0, 22.0]\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n251\n2\n129\n84\n0\n0\n28.0\n0.284\n27\n0\n(25.0, 27.0]\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n631\n0\n102\n78\n40\n90\n34.5\n0.238\n24\n0\n(23.0, 25.0]\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n757\n0\n123\n72\n0\n0\n36.3\n0.258\n52\n1\n(51.0, 81.0]\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n\n689\n1\n144\n82\n46\n180\n46.1\n0.335\n46\n1\n(42.0, 51.0]\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n\n#Model with the quadratic transformation of Age and more predictors\nlogit_model_diabetes = sm.logit(formula = 'Outcome~Age+I(Age**2)+Glucose+BloodPressure+BMI+DiabetesPedigreeFunction', data = train).fit()\nlogit_model_diabetes.summary()\n\nOptimization terminated successfully.\n         Current function value: 0.470478\n         Iterations 6\n\n\n\n\nLogit Regression Results\n\n\nDep. Variable:\nOutcome\nNo. Observations:\n614\n\n\nModel:\nLogit\nDf Residuals:\n607\n\n\nMethod:\nMLE\nDf Model:\n6\n\n\nDate:\nThu, 23 Feb 2023\nPseudo R-squ.:\n0.2639\n\n\nTime:\n10:26:00\nLog-Likelihood:\n-288.87\n\n\nconverged:\nTrue\nLL-Null:\n-392.42\n\n\nCovariance Type:\nnonrobust\nLLR p-value:\n5.878e-42\n\n\n\n\n\n\n\ncoef\nstd err\nz\nP&gt;|z|\n[0.025\n0.975]\n\n\nIntercept\n-12.3347\n1.282\n-9.621\n0.000\n-14.847\n-9.822\n\n\nAge\n0.2852\n0.056\n5.121\n0.000\n0.176\n0.394\n\n\nI(Age ** 2)\n-0.0030\n0.001\n-4.453\n0.000\n-0.004\n-0.002\n\n\nGlucose\n0.0309\n0.004\n8.199\n0.000\n0.024\n0.038\n\n\nBloodPressure\n-0.0141\n0.006\n-2.426\n0.015\n-0.025\n-0.003\n\n\nBMI\n0.0800\n0.016\n4.978\n0.000\n0.049\n0.112\n\n\nDiabetesPedigreeFunction\n0.7138\n0.322\n2.213\n0.027\n0.082\n1.346\n\n\n\n\n\n\nAdding more predictors has increased the log likelihood of the model as expected.\n\nconfusion_matrix_train(logit_model_diabetes,cutoff=0.3)\n\nClassification accuracy = 74.3%\n\n\n\n\n\n\n\n\n\n\nconfusion_matrix_test(test,test.Outcome,logit_model_diabetes,0.3)\n\nClassification accuracy = 80.5%\n\n\n\n\n\n\n\n\n\nThe model with more predictors also has lesser number of false negatives, and higher overall classification accuracy.\nHow many bins must you make for Age to get the most accurate model?\nIf the number of bins are too less, the trend may not be captured accurately. If the number of bins are too many, it may lead to overfitting of the model. There is an optimal value of the number of bins that captures the trend, but does not overfit. A couple of ways of estimating the optimal number of bins can be:\n\nThe number of bins for which the trend continues to be “almost” the same for several samples of the data.\nTesting the model on multiple test datasets.\n\nOptimizing the number of bins for each predictor may be a time-consuming exercises. You may do it for your course project. However, we will not do it here in the class notes.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#performance-measurement",
    "href": "Lec7_logistic_regression.html#performance-measurement",
    "title": "4  Logistic regression",
    "section": "4.6 Performance Measurement",
    "text": "4.6 Performance Measurement\nWe have already seen the confusion matrix, and classification accuracy. Now, let us see some other useful performance metrics that can be computed from the confusion matrix. The metrics below are computed for the confusion matrix immediately above this section (or the confusion matrix on test data corresponding to the model logit_model_diabetes).\n\n4.6.1 Precision-recall\nPrecision measures the accuracy of positive predictions. Also called the precision of the classifier\n\\[\\textrm{precision} = \\frac{\\textrm{True Positives}}{\\textrm{True Positives} + \\textrm{False Positives}}\\]\n==&gt; 70.13%\nPrecision is typically used with recall (Sensitivity or True Positive Rate). The ratio of positive instances that are correctly detected by the classifier.\n\\[\\textrm{recall} = \\frac{\\textrm{True Positives}}{\\textrm{True Positives} + \\textrm{False Negatives}}\\] ==&gt; 88.52%\nPrecision / Recall Tradeoff: Increasing precision reduces recall and vice versa.\nVisualize the precision-recall curve for the model logit_model_diabetes.\n\ny=train.Outcome\nypred = logit_model_diabetes.predict(train)\np, r, thresholds = precision_recall_curve(y, ypred)\ndef plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n    plt.figure(figsize=(8, 8))\n    plt.title(\"Precision and Recall Scores as a function of the decision threshold\")\n    plt.plot(thresholds, precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds, recalls[:-1], \"g-\", label=\"Recall\")\n    plt.ylabel(\"Score\")\n    plt.xlabel(\"Decision Threshold\")\n    plt.legend(loc='best')\n    plt.legend()\nplot_precision_recall_vs_threshold(p, r, thresholds)\n\n\n\n\n\n\n\n\nAs the decision threshold probability increases, the precision increases, while the recall decreases.\nQ: How are the values of the thresholds chosen to make the precision-recall curve?\nHint: Look at the documentation for precision_recall_curve.\n\n\n4.6.2 The Receiver Operating Characteristics (ROC) Curve\nA ROC(Receiver Operator Characteristic Curve) is a plot of sensitivity (True Positive Rate) on the y axis against (1−specificity) (False Positive Rate) on the x axis for varying values of the threshold t. The 45° diagonal line connecting (0,0) to (1,1) is the ROC curve corresponding to random chance. The ROC curve for the gold standard is the line connecting (0,0) to (0,1) and (0,1) to (1,1).\n\n\n\n\n\n\n\n\n\n\nAn animation to demonstrate how an ROC curve relates to sensitivity and specificity for all possible cutoffs (Source)\nHigh Threshold:\n\nHigh specificity\nLow sensitivity\n\nLow Threshold\n\nLow specificity\nHigh sensitivity\n\nThe area under ROC is called Area Under the Curve(AUC). AUC gives the rate of successful classification by the logistic model. To get a more in-depth idea of what a ROC-AUC curve is and how is it calculated, here is a good blog link.\nHere is good post by google developers on interpreting ROC-AUC, and its advantages / disadvantages.\nVisualize the ROC curve and compute the ROC-AUC for the model logit_model_diabetes.\n\ny=train.Outcome\nypred = logit_model_diabetes.predict(train)\nfpr, tpr, auc_thresholds = roc_curve(y, ypred)\nprint(auc(fpr, tpr))# AUC of ROC\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(8,8))\n    plt.title('ROC Curve')\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.005, 1, 0, 1.005])\n    plt.xticks(np.arange(0,1, 0.05), rotation=90)\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate (Recall)\")\n\nfpr, tpr, auc_thresholds = roc_curve(y, ypred)\nplot_roc_curve(fpr, tpr)\n\n0.8325914847653979\n\n\n\n\n\n\n\n\n\nQ: How are the values of the auc_thresholds chosen to make the ROC curve? Why does it look like a step function?\nBelow is a function that prints the confusion matrix along with all the performance metrics we discussed above for a given decision threshold probability, on train / test data. Note that ROC-AUC does not depend on a decision threshold probability.\n\n#Function to compute confusion matrix and prediction accuracy on test/train data\ndef confusion_matrix_data(data,actual_values,model,cutoff=0.5):\n#Predict the values using the Logit model\n    pred_values = model.predict(data)\n# Specify the bins\n    bins=np.array([0,cutoff,1])\n#Confusion matrix\n    cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]\n    cm_df = pd.DataFrame(cm)\n    cm_df.columns = ['Predicted 0','Predicted 1']\n    cm_df = cm_df.rename(index={0: 'Actual 0',1:'Actual 1'})\n# Calculate the accuracy\n    accuracy = (cm[0,0]+cm[1,1])/cm.sum()\n    fnr = (cm[1,0])/(cm[1,0]+cm[1,1])\n    precision = (cm[1,1])/(cm[0,1]+cm[1,1])\n    fpr = (cm[0,1])/(cm[0,0]+cm[0,1])\n    tpr = (cm[1,1])/(cm[1,0]+cm[1,1])\n    fpr_roc, tpr_roc, auc_thresholds = roc_curve(actual_values, pred_values)\n    auc_value = (auc(fpr_roc, tpr_roc))# AUC of ROC\n    sns.heatmap(cm_df, annot=True, cmap='Blues', fmt='g')\n    plt.ylabel(\"Actual Values\")\n    plt.xlabel(\"Predicted Values\")\n    print(\"Classification accuracy = {:.1%}\".format(accuracy))\n    print(\"Precision = {:.1%}\".format(precision))\n    print(\"TPR or Recall = {:.1%}\".format(tpr))\n    print(\"FNR = {:.1%}\".format(fnr))\n    print(\"FPR = {:.1%}\".format(fpr))\n    print(\"ROC-AUC = {:.1%}\".format(auc_value))\n\n\nconfusion_matrix_data(test,test.Outcome,logit_model_diabetes,0.3)\n\nClassification accuracy = 80.5%\nPrecision = 70.1%\nTPR or Recall = 88.5%\nFNR = 11.5%\nFPR = 24.7%\nROC-AUC = 90.1%",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec7_logistic_regression.html#sklearn",
    "href": "Lec7_logistic_regression.html#sklearn",
    "title": "4  Logistic regression",
    "section": "4.7 sklearn",
    "text": "4.7 sklearn\nThe LogisticRegression() function from the linear_model module of the sklearn library is used for fitting a logistic regression model. Note that the function as a default regularization parameter value set as C = 1. We’ll understand the purpose of regularization later in the course.\n\ntrain = pd.read_csv('./Datasets/Social_Network_Ads_train.csv') #Develop the model on train data\ntest = pd.read_csv('./Datasets/Social_Network_Ads_test.csv') #Test the model on test data\n\nX_train = train[['Age']]\ny_train = train['Purchased']\n\nX_test = test[['Age']]\ny_test = test['Purchased']\n\nmodel = LogisticRegression(penalty=None) # We will talk about this input later in the quarter.\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test) # Note that in sklearn, .predict returns the classes directly, with 0.5 threshold\n\nprint(\"Accuracy = \",accuracy_score(test.Purchased, y_pred)*100, \"%\")\n\n# To return the prediction probabilities, we need .predict_proba\n\ny_pred_probs = model.predict_proba(X_test)\n\n# First col: class 0 prob, second col: class 1 prob\n\n# We will need the probs to try different thresholds - this will be necessary for the other metrics.\n\nAccuracy =  86.0 %",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Logistic regression</span>"
    ]
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html",
    "href": "Lec9_RidgeRegression_Lasso.html",
    "title": "5  Ridge regression and Lasso",
    "section": "",
    "text": "5.1 Ridge regression\nLet us develop a ridge regression model to predict house price based on the five house features.\n#Taking the log transform of house_price as house prices have a right-skewed distribution\ny = np.log(train.house_price)",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridge regression and Lasso</span>"
    ]
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html#ridge-regression",
    "href": "Lec9_RidgeRegression_Lasso.html#ridge-regression",
    "title": "5  Ridge regression and Lasso",
    "section": "",
    "text": "5.1.1 Standardizing the predictors\n\n#Standardizing predictors so that each of them have zero mean and unit variance\n\n#Filtering all predictors\nX = train.iloc[:,1:6]; \n\n#Defining a scaler object\nscaler = StandardScaler()\n\n#The scaler object will contain the mean and variance of each column (predictor) of X. \n#These values will be useful to scale test data based on the same mean and variance as obtained on train data\nscaler.fit(X)\n\n#Using the scaler object (or the values of mean and variance stored in it) to standardize X (or train data)\nXstd = scaler.transform(X)\n\n\n\n5.1.2 Optimizing the tuning parameter λ\n\n#The tuning parameter lambda is referred as alpha in sklearn\n\n#Creating a range of values of the tuning parameter to visualize the ridge regression coefficients\n#for different values of the tuning parameter\nalphas = np.logspace(10,-2,200)\n\n\n#Finding the ridge regression coefficients for increasing values of the tuning parameter\ncoefs = []\nfor a in alphas:        \n    ridge = Ridge(alpha = a)\n    ridge.fit(Xstd, y)\n    coefs.append(ridge.coef_)\n\n\n#Visualizing the shrinkage in ridge regression coefficients with increasing values of the tuning parameter lambda\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n\n\n\n#Let us use cross validation to find the optimal value of the tuning parameter - lambda\n#For the optimal lambda, the cross validation error will be the least\n\n#Note that we are reducing the range of alpha so as to better visualize the minimum\nalphas = np.logspace(1.5,-3,200)\nridgecv = RidgeCV(alphas = alphas,store_cv_values=True)\nridgecv.fit(Xstd, y)\n\n#Optimal value of the tuning parameter - lambda\nridgecv.alpha_\n\n3.939829130085526\n\n\n\n#Visualizing the LOOCV (leave one out cross validatation error vs lambda)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(ridgecv.alphas,ridgecv.cv_values_.sum(axis=0))\nplt.plot([ridgecv.alpha_,ridgecv.alpha_],[40,40.2],':')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Cross-validation error');\n\n\n\n\n\n\n\n\nNote that the cross validation error is minimum at the optimal value of the tuning parameter.\n\n#Visualizing the shrinkage in ridge regression coefficients with increasing values of the tuning parameter lambda\nalphas = np.logspace(10,-2,200)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.plot([ridgecv.alpha_,ridgecv.alpha_],[-0.4,0.25],':')\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n\n\n\n\n5.1.3 RMSE on test data\n\n#Test dataset\nXtest = test.iloc[:,1:6]\n\n#Standardizing test data\nXtest_std = scaler.transform(Xtest)\n\n\n#Using the developed ridge regression model to predict on test data\nridge = Ridge(alpha = ridgecv.alpha_)\nridge.fit(Xstd, y)\npred=ridge.predict(Xtest_std)\n\n\n#RMSE on test data\nnp.sqrt(((np.exp(pred)-test.house_price)**2).mean())\n\n405.64878431933295\n\n\nNote that the RMSE is similar to the one obtained using least squares regression on all the five predictors. This is because the coefficients were required to shrink very slightly for the best ridge regression fit. This may happen when we have a low number of predictors, where most of them are significant. Ridge regression is likely to perform better than least squares in case of a large number of predictors, where an OLS model will be prone to overfitting.\n\n\n5.1.4 Model coefficients & \\(R\\)-squared\n\n#Checking the coefficients of the ridge regression model\nridge.coef_\n\narray([-0.14444475, -0.3683359 ,  0.17988341,  0.22567002,  0.01429926])\n\n\nNote that none of the coefficients are shrunk to zero. The coefficient of longitude is smaller than the rest, but not zero.\n\n#R-squared on train data for the ridge regression model\nr2_score(ridge.predict(Xstd),y)\n\n0.6993726041206049\n\n\n\n#R-squared on test data for the ridge regression model\nr2_score(pred,np.log(test.house_price))\n\n0.757276231336096",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridge regression and Lasso</span>"
    ]
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html#lasso",
    "href": "Lec9_RidgeRegression_Lasso.html#lasso",
    "title": "5  Ridge regression and Lasso",
    "section": "5.2 Lasso",
    "text": "5.2 Lasso\nLet us develop a lasso model to predict house price based on the five house features.\n\n5.2.1 Standardizing the predictors\nWe have already standardized the predictors in the previous section. The standardized predictors are the NumPy array object Xstd.\n\n\n5.2.2 Optimizing the tuning parameter λ\n\n#Creating a range of values of the tuning parameter to visualize the lasso coefficients\n#for different values of the tuning parameter\nalphas = np.logspace(2,-2,100)\n\n\n#Finding the lasso coefficients for increasing values of the tuning parameter\nlasso = Lasso(max_iter = 10000)\ncoefs = []\n\nfor a in alphas:\n    lasso.set_params(alpha=a)\n    lasso.fit(Xstd, y)\n    coefs.append(lasso.coef_)\n\n\n#Visualizing the shrinkage in lasso coefficients with increasing values of the tuning parameter lambda\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n\n\nNote that lasso performs variable selection. For certain values of lambda, some of the predictor coefficients are zero, while others are non-zero. This is different than ridge regression, which only shrinks the coefficients, but doesn’t do variable selection.\n\n#Let us use cross validation to find the optimal value of the tuning parameter - lambda\n#For the optimal lambda, the cross validation error will be the least\n\n#Note that we are reducing the range of alpha so as to better visualize the minimum\nalphas = np.logspace(-1.5,-5,200)\nlassocv = LassoCV(alphas = alphas, cv = 10, max_iter = 100000)\nlassocv.fit(Xstd, y)\n\n#Optimal value of the tuning parameter - lamda\nlassocv.alpha_\n\n0.00865338307114046\n\n\n\n#Visualizing the LOOCV (leave one out cross validatation error vs lambda)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(lassocv.alphas_,lassocv.mse_path_.mean(axis=1))\nplt.plot([lassocv.alpha_,lassocv.alpha_],[0.145,0.151],':')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Cross-validation error');\n\n\n\n\n\n\n\n\nThe 10-fold cross validation error minimizes at lambda = 0.009.\n\n#Visualizing the shrinkage in lasso coefficients with increasing values of the tuning parameter lambda\nalphas = np.logspace(2,-2,100)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=18)\nplt.plot(alphas, coefs)\nplt.xscale('log')\nplt.xlabel('$\\lambda$')\nplt.ylabel('Standardized coefficient')\nplt.legend(train.columns[1:6]);\n\n\n\n\n\n\n\n\n\n\n5.2.3 RMSE on test data\n\n#Using the developed lasso model to predict on test data\nlasso = Lasso(alpha = lassocv.alpha_)\nlasso.fit(Xstd, y)\npred=lasso.predict(Xtest_std)\n\n\n#RMSE on test data\nnp.sqrt(((np.exp(pred)-test.house_price)**2).mean())\n\n400.8580108804818\n\n\n\n\n5.2.4 Model coefficients & \\(R\\)-squared\n\n#Checking the coefficients of the lasso model\nlasso.coef_\n\narray([-0.13758288, -0.38414914,  0.17276584,  0.21970825,  0.        ])\n\n\nNote that the coefficient of longitude is shrunk to zero. Lasso performs variable selection.\n\n#R-squared on train data for the lasso model\nr2_score(lasso.predict(Xstd),y)\n\n0.6931007715680897\n\n\n\n#R-squared on test data for the lasso model\nr2_score(pred,np.log(test.house_price))\n\n0.7526968660283655",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridge regression and Lasso</span>"
    ]
  },
  {
    "objectID": "Lec9_RidgeRegression_Lasso.html#lassoridge-classification",
    "href": "Lec9_RidgeRegression_Lasso.html#lassoridge-classification",
    "title": "5  Ridge regression and Lasso",
    "section": "5.3 Lasso/Ridge Classification",
    "text": "5.3 Lasso/Ridge Classification\nThe Ridge and Lasso penalties are added from inside the same LogisticRegression object, they don’t have their own objects like they do in regression.\n\n# Data\ntrain = pd.read_csv('Datasets/Social_Network_Ads_train.csv') \ntest = pd.read_csv('Datasets/Social_Network_Ads_test.csv')\n\n\n# Predictors and response\nX_train = train[['Age', 'EstimatedSalary']]\ny_train = train['Purchased']\n\nX_test = test[['Age', 'EstimatedSalary']]\ny_test = test['Purchased']\n\n\n# Creating the model\n    # penalty=None means regular logistic Regression\n    # penalty=l2 means Ridge Classification\n    # penalty=l1 means Lasso Classification\n    # C = 1/lambda\n    \nmodel = LogisticRegression(penalty='l2', C = 1)\n\n\n# Scale\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_scaled = sc.transform(X_train)\nX_test_scaled = sc.transform(X_test)\n\n# Train\nmodel.fit(X_train_scaled, y_train)\ny_pred = model.predict(X_test_scaled) # threshold = 0.5 here\n\n# Evaluate\nprint(accuracy_score(test.Purchased, y_pred)*100)\n\n# Probs\ny_pred_probs = model.predict_proba(X_test_scaled)\n\n88.0\n\n\n\n5.3.1 Cross-validation to find optimal C\n\n# a list of possible C values\nCs = np.logspace(-1,1)\n\n# Cs =  the C values we want to try out\n# cv = number of folds, 3,5,10 - if no input given, 5-fold\n# penalty = Ridge or Lasso\nmodel_cv = LogisticRegressionCV(Cs = Cs, cv=5, penalty='l2')\n\nmodel_cv.fit(X_train_scaled, y_train)\n\nmodel_cv.C_[0]\n\n1.3894954943731375\n\n\n\nmodel = LogisticRegression(penalty='l2', C = model_cv.C_[0])\nmodel.fit(X_train_scaled, y_train)\ny_pred = model.predict(X_test_scaled) # threshold = 0.5 here\n\n# Evaluate\nprint(accuracy_score(test.Purchased, y_pred)*100)\n\n88.0",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridge regression and Lasso</span>"
    ]
  },
  {
    "objectID": "Crossvalidation.html",
    "href": "Crossvalidation.html",
    "title": "6  Cross-validation",
    "section": "",
    "text": "6.1 Regression\ntrainf = pd.read_csv('Datasets/house_feature_train.csv')\ntrainp = pd.read_csv('Datasets/house_price_train.csv')\ntestf = pd.read_csv('Datasets/house_feature_test.csv')\ntestp = pd.read_csv('Datasets/house_price_test.csv')\ntrain = pd.merge(trainf,trainp)\ntest = pd.merge(testf,testp)\ntrain.head()\n\n\n\n\n\n\n\n\n\nhouse_id\nhouse_age\ndistance_MRT\nnumber_convenience_stores\nlatitude\nlongitude\nhouse_price\n\n\n\n\n0\n210\n5.2\n390.5684\n5\n24.97937\n121.54245\n2724.84\n\n\n1\n190\n35.3\n616.5735\n8\n24.97945\n121.53642\n1789.29\n\n\n2\n328\n15.9\n1497.7130\n3\n24.97003\n121.51696\n556.96\n\n\n3\n5\n7.1\n2175.0300\n3\n24.96305\n121.51254\n1030.41\n\n\n4\n412\n8.1\n104.8101\n5\n24.96674\n121.54067\n2756.25\n# Data\n\n# Train\ny_train = np.log(train.house_price) # Response (log taken to account for the skewed dist. of house prices)\nX_train = train.iloc[:,1:6] # Slice out the predictors\n\n# Test\ny_test = np.log(test.house_price) # Response (log taken to account for the skewed dist. of house prices)\nX_test = test.iloc[:,1:6] # Slice out the predictor\n\n# Scale both\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n# Let's tune the lambda of a Ridge model, with 5-fold CV.\n\n# For that, we need to loop through lambda (alpha) values.\n# However, we don't need to loop through folds - we will use a function for that! - cross_val_score\n\nalphas = np.logspace(-1,1,200)\n\ncv_results = []\n\nfor alpha in alphas: # For each alpha\n    model = Ridge(alpha=alpha) # Create the model\n    cv_results.append(cross_val_score(model, X_train_scaled, y_train, cv=5, scoring='neg_root_mean_squared_error')) # cross validate it\n    \n# Note that the input is the model object, the data, number of folds and the metric\n# If you don't specify the scoring, it will use r-squared for regression and accuracy for classification\n# The output is an array of k values, k being the number of folds (cv input)\n# For each alpha value, 5 RMSE values\n\n# Take the mean of each row to find avg cv score for each alpha\n# Negative sign because the scoring input has \"neg\" in the previous cell\nrmses = -np.array(cv_results).mean(axis=1)\n\n# Index of the minimum CV RMSE\nnp.argmin(rmses)\n\nalphas[np.argmin(rmses)]\n\n# Note the same alpha as in RidgeCV example in the previous notebook\n\n4.768611697714469\n# Now we need to create one final Ridge model with the optimized alpha value\n\nmodel = Ridge(alpha=alphas[np.argmin(rmses)])\n\nmodel.fit(X_train_scaled, y_train)\n\n# Predict\n# Evaluate\n\nRidge(alpha=4.768611697714469)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RidgeRidge(alpha=4.768611697714469)",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-validation</span>"
    ]
  },
  {
    "objectID": "Crossvalidation.html#classification",
    "href": "Crossvalidation.html#classification",
    "title": "6  Cross-validation",
    "section": "6.2 Classification",
    "text": "6.2 Classification\n\n# Data\ntrain = pd.read_csv('Datasets/Social_Network_Ads_train.csv') \ntest = pd.read_csv('Datasets/Social_Network_Ads_test.csv')\n\n# Predictors and response\nX_train = train[['Age', 'EstimatedSalary']]\ny_train = train['Purchased']\n\nX_test = test[['Age', 'EstimatedSalary']]\ny_test = test['Purchased']\n\n# Scale\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_scaled = sc.transform(X_train)\nX_test_scaled = sc.transform(X_test)\n\n\n# CV a logistic regression model\n\n# a list of possible C values\nCs = [0.001, 0.01, 0.1, 1, 10, 100]\n\ncv_results = []\n\nfor C in Cs:\n    model = LogisticRegression(penalty='l2', C=C)\n    cv_results.append(cross_val_score(model, X_train_scaled, y_train, cv=10))\n\n# Scoring not given, default metric is accuracy (you can use recall, precision etc.)\n\n\n# For each C, 10 accuracy values\n\naccs = np.array(cv_results).mean(axis=1)\n\nCs[np.argmax(accs)] # best C - Same as the output of LogisticRegressionCV in the previous notebook\n\n# Train the final model\n# predict\n# Evaluate\n\n1\n\n\n\nImportant question: How were these accuracies calculated? With a threhold of 0.5\nWhat if we want to change/optimize the threshold in this process as well? Then cross_val_score() is not enough, we need to change the function!\n\n\n# CV a logistic regression model - but do not return the accuracy metric for each fold\n    # Return the PREDICTIONS FOR EACH FOLD\n\n# a list of possible C values\nCs = [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n\ncv_results = []\n\nfor C in Cs:\n    model = LogisticRegression(penalty='l2', C=C)\n    cv_results.append(cross_val_predict(model, X_train_scaled, y_train, cv=10, method='predict_proba'))\n    \n# Cross_val_predict function has an optional input: method\n\n\nthreshold_hyperparam_vals = np.arange(0,1.01,0.01)\nC_hyperparam_vals = np.logspace(-3.5, 1)\naccuracy_iter = pd.DataFrame(columns = {'threshold':[], 'C':[], 'accuracy':[]})\niter_number = 0\n\nfor c_val in C_hyperparam_vals:\n    predicted_probability = cross_val_predict(LogisticRegression(C = c_val), X_train_scaled, \n                                                  y_train, cv = 5, method = 'predict_proba')\n\n    for threshold_prob in threshold_hyperparam_vals:\n        predicted_class = predicted_probability[:,1] &gt; threshold_prob\n        predicted_class = predicted_class.astype(int)\n\n        #Computing the accuracy\n        accuracy = accuracy_score(predicted_class, y_train)*100\n        accuracy_iter.loc[iter_number, 'threshold'] = threshold_prob\n        accuracy_iter.loc[iter_number, 'C'] = c_val\n        accuracy_iter.loc[iter_number, 'accuracy'] = accuracy\n        iter_number = iter_number + 1\n\n\n# Parameters for highest accuracy\noptimal_C = accuracy_iter.sort_values(by = 'accuracy', ascending = False).iloc[0,:]['C']\noptimal_threshold = accuracy_iter.sort_values(by = 'accuracy', ascending = False).iloc[0, :]['threshold']\n\n#Optimal decision threshold probability\nprint(\"Optimal decision threshold = \", optimal_threshold)\n\n#Optimal C\nprint(\"Optimal C = \", optimal_C)\n\nOptimal decision threshold =  0.41000000000000003\nOptimal C =  0.06250551925273976\n\n\n\nmodel = LogisticRegression(C = optimal_C).fit(X_train_scaled, y_train)\ntest_pred = model.predict_proba(X_test_scaled)[:,1]\n\ny_pred_optimal_threshold = (test_pred &gt; optimal_threshold).astype(int)\n\n#Computing the accuracy\nprint(\"Accuracy: \",accuracy_score(y_pred_optimal_threshold, y_test)*100)  \n\n#Computing the ROC-AUC\nfpr, tpr, auc_thresholds = roc_curve(y_test, y_pred_optimal_threshold)\nprint(\"ROC-AUC: \",auc(fpr, tpr))# AUC of ROC\n\n#Computing the precision and recall\nprint(\"Precision: \", precision_score(y_test, y_pred_optimal_threshold))\nprint(\"Recall: \", recall_score(y_test, y_pred_optimal_threshold))\n\n#Confusion matrix\ncm = pd.DataFrame(confusion_matrix(y_test, y_pred_optimal_threshold), columns=['Predicted 0', 'Predicted 1'], \n            index = ['Actual 0', 'Actual 1'])\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g');\n\nAccuracy:  87.0\nROC-AUC:  0.868940368940369\nPrecision:  0.8\nRecall:  0.8648648648648649\n\n\n\n\n\n\n\n\n\n\nWe will use cross_val_score() and cross_val_predict() repeatedly next quarter.\nThere is a cross_validate() function that allows us to use multiple metrics at once (for example, accuracy and recall) - next quarter.\n\nFind some more examples of using the cross validation and some other useful functions here.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cross-validation</span>"
    ]
  },
  {
    "objectID": "Lec5_Potential_issues.html",
    "href": "Lec5_Potential_issues.html",
    "title": "7  Potential issues",
    "section": "",
    "text": "7.1 Outliers\nAn outlier is a point for which the true response (\\(y_i\\)) is far from the value predicted by the model. Residual plots can be used to identify outliers.\nIf the the response at the \\(i^{th}\\) observation is \\(y_i\\), the prediction is \\(\\hat{y}_i\\), then the residual \\(e_i\\) is:\n\\[e_i = y_i - \\hat{y_i}\\]\n#Plotting residuals vs fitted values\nsns.set(rc={'figure.figsize':(10,6)})\nsns.scatterplot(x = (model_log.fittedvalues), y=(model_log.resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nplt.xlabel('Fitted values')\nplt.ylabel('Residuals');\nSome of the errors may be high. However, it is difficult to decide how large a residual needs to be before we can consider a point to be an outlier. To address this problem, we have standardized residuals, which are defined as:\n\\[r_i = \\frac{e_i}{RSE(\\sqrt{1-h_{ii}})},\\] where \\(r_i\\) is the standardized residual, \\(RSE\\) is the residual standard error, and \\(h_{ii}\\) is the leverage (introduced in the next section) of the \\(i^{th}\\) observation.\nStandardized residuals, allow the residuals to be compared on a standard scale.\nIssue with standardized residuals:, If the observation corresponding to the standardized residual has a high leverage, then it will drag the regression line / plane / hyperplane towards it, thereby influencing the estimate of the residual itself.\nStudentized residuals: To address the issue with standardized residuals, studentized residual for the \\(i^{th}\\) observation is computed as the standardized residual, but with the \\(RSE\\) (residual standard error) computed after removing the \\(i^{th}\\) observation from the data. Studentized residual, \\(t_i\\) for the \\(i^{th}\\) observation is given as:\n\\[t_i = \\frac{e_i}{RSE_{i}(\\sqrt{1-h_{ii}})},\\] where \\(RSE_{i}\\) is the residual standard error of the model developed on the data without the \\(i^{th}\\) observation.\nDistribution of studentized residuals: If the regression model is appropriate such that no case is outlying because of a change in the model, then each studentized residual will follow a \\(t\\) distribution with \\((n–p–1)\\) degrees of freedom.\nAs the studentized residuals follow a \\(t\\) distribution, we can conduct a hypothesis test to identify whether an observation is an outlier or not for a given sigificance level. Note that the test will be two-sided since we are not concerned with the sign of the residuals, but only their absolute values.\nIn the current example, for a signficance level of 5%, the critical \\(t\\)-statistic is \\(t\\big(1 - \\frac{\\alpha}{2}, n - p - 1\\big)\\), as calculated below.\nn = train.shape[0]\np = model_log.df_model\nalpha = 0.05\n\n# Critical value\nstats.t.ppf(1 - alpha/2, n - p - 1)\n\n1.9604435402730618\nIf we were conducting the test for a single observation, we’ll compare the studentized residual for that observation with the critical \\(t\\)-statistic, and if the residual is greater than the critical value, we’ll consider that observation as an outlier.\nHowever, typically, we’ll be interested in conducting this test for all observations, and thus we’ll need a more conservative critical value for the same signficance level. This critical value is given by the Bonferroni correction as \\(t\\big(1 - \\frac{\\alpha}{2n}, n - p - 1\\big)\\).\nThus, the minimum value of studentized residual for which the observation will be classified as an outlier is:\ncritical_value = stats.t.ppf(1-alpha/(2*n), n - p - 1)\ncritical_value\n\n4.4200129981725365\nThe studentized residuals can be obtained using the outlier_test() method of the object returned by the fit() method of an OLS object. Let us find the studentized residuals in our car price prediction model.\n#Studentized residuals\nout = model_log.outlier_test()\nout\n\n\n\n\n\n\n\n\n\nstudent_resid\nunadj_p\nbonf(p)\n\n\n\n\n0\n-1.164204\n0.244398\n1.0\n\n\n1\n-0.801879\n0.422661\n1.0\n\n\n2\n-1.263820\n0.206354\n1.0\n\n\n3\n-0.614171\n0.539131\n1.0\n\n\n4\n0.027929\n0.977720\n1.0\n\n\n...\n...\n...\n...\n\n\n4955\n-0.523361\n0.600747\n1.0\n\n\n4956\n-0.509538\n0.610398\n1.0\n\n\n4957\n-1.718808\n0.085712\n1.0\n\n\n4958\n-0.077594\n0.938154\n1.0\n\n\n4959\n-0.482388\n0.629551\n1.0\n\n\n\n\n4960 rows × 3 columns\nStudentized residuals are in the first column of the above table. Let us plot the studentized residuals against fitted values. In the figure below, the studentized residuals above the top dotted green line and below the bottom dotted green line are outliers.\n#Plotting studentized residuals vs fitted values\nsns.scatterplot(x = (model_log.fittedvalues), y=(out.student_resid),color = 'orange')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [0,0],color = 'blue')\nax = sns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [critical_value, critical_value],\n             color = 'green')\nsns.lineplot(x = [model_log.fittedvalues.min(),model_log.fittedvalues.max()],y = [-critical_value, -critical_value],\n             color = 'green')\nax.lines[1].set_linestyle(\"--\")\nax.lines[2].set_linestyle(\"--\")\n\nplt.xlabel('Fitted values')\nplt.ylabel('Studentized Residuals');\nOutliers: Observations whose studentized residuals have a magnitude greater than \\(t\\big(1 - \\frac{\\alpha}{2n}, n - p - 1\\big)\\).\nImpact of outliers: Outliers do not have a large impact on the OLS line / plane / hyperplane as long as they don’t have a high leverage (discussed in the next section). However, outliers do inflate the residual standard error (RSE). RSE in turn is used to compute the standard errors of regression coefficients. As a result, statistically significant variables may appear to be insignificant, and \\(R^2\\) may appear to be lower.\nAre there outliers in our example?\n#Number of points with absolute studentized residuals greater than critical_value\nnp.sum(np.abs(out.student_resid) &gt; critical_value)\n\n19\nLet us analyze the outliers.\nind = (np.abs(out.student_resid) &gt; critical_value)\npd.concat([train.loc[ind,:], np.exp(model_log.fittedvalues[ind])], axis = 1)\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n0\n\n\n\n\n2042\n18228\nbmw\ni3\n2017\nAutomatic\n24041\nHybrid\n0\n78.2726\n0.0\n21495\n5537.337460\n\n\n2046\n17362\nbmw\ni3\n2016\nAutomatic\n68000\nHybrid\n0\n78.0258\n0.0\n15990\n4107.811771\n\n\n2050\n19224\nbmw\ni3\n2016\nAutomatic\n20013\nHybrid\n0\n77.9310\n0.0\n19875\n4784.986021\n\n\n2051\n13913\nbmw\ni3\n2014\nAutomatic\n34539\nHybrid\n0\n78.3838\n0.0\n14495\n3269.686113\n\n\n2055\n16512\nbmw\ni3\n2017\nAutomatic\n28169\nHybrid\n0\n77.9799\n0.0\n23751\n5454.207333\n\n\n2059\n15844\nbmw\ni3\n2016\nAutomatic\n19995\nHybrid\n0\n78.2825\n0.0\n19850\n4773.707307\n\n\n2060\n12107\nbmw\ni3\n2016\nAutomatic\n8421\nHybrid\n0\n77.9125\n0.0\n19490\n5028.048305\n\n\n2061\n18215\nbmw\ni3\n2014\nAutomatic\n37161\nHybrid\n0\n77.7505\n0.0\n14182\n3259.101789\n\n\n2063\n15617\nbmw\ni3\n2017\nAutomatic\n41949\nHybrid\n140\n78.1907\n0.0\n19998\n5173.402125\n\n\n2064\n18020\nbmw\ni3\n2015\nAutomatic\n9886\nHybrid\n0\n78.1810\n0.0\n17481\n4214.053932\n\n\n2143\n12972\nbmw\ni8\n2017\nAutomatic\n9992\nHybrid\n135\n69.2767\n1.5\n59950\n14675.519883\n\n\n2144\n13826\nbmw\ni8\n2015\nAutomatic\n43323\nHybrid\n0\n69.2683\n1.5\n44990\n9289.744847\n\n\n2150\n18949\nbmw\ni8\n2015\nAutomatic\n43102\nHybrid\n0\n69.0922\n1.5\n42890\n9300.576839\n\n\n2151\n18977\nbmw\ni8\n2016\nAutomatic\n10087\nHybrid\n0\n68.9279\n1.5\n48998\n12607.867130\n\n\n2744\n18866\nmerc\nM Class\n2004\nAutomatic\n121000\nDiesel\n325\n29.3713\n2.7\n19950\n4068.883513\n\n\n3548\n13149\naudi\nS4\n2019\nAutomatic\n4900\nDiesel\n145\n40.7030\n0.0\n45000\n10679.644966\n\n\n4116\n16420\naudi\nSQ5\n2020\nAutomatic\n1500\nDiesel\n145\n34.7968\n0.0\n56450\n13166.374034\n\n\n4117\n17611\naudi\nSQ5\n2019\nAutomatic\n1500\nDiesel\n145\n34.5016\n0.0\n48800\n11426.005642\n\n\n4851\n16577\nbmw\nZ3\n2002\nAutomatic\n16500\nPetrol\n325\n29.7614\n2.2\n14995\n3426.196256\nDo you notice some unique characteristics of these observations due to which they may be outliers?\nWhat methods you can propose to estimate the price of these outliers more accurately, which will also result in the overall reduction in RMSE?",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Potential issues</span>"
    ]
  },
  {
    "objectID": "Lec5_Potential_issues.html#high-leverage-points",
    "href": "Lec5_Potential_issues.html#high-leverage-points",
    "title": "7  Potential issues",
    "section": "7.2 High leverage points",
    "text": "7.2 High leverage points\nHigh leverage points are those with an unsual value of the predictor(s). They have the potential to have a relatively higher impact on the OLS line / plane / hyperplane, as compared to the outliers.\nLeverage statistic (page 99 of the book): In order to quantify an observation’s leverage, we compute the leverage statistic. A large value of this statistic indicates an observation with high leverage. For simple linear regression, \\[\\begin{equation}\nh_i = \\frac{1}{n} + \\frac{(x_i - \\bar x)^2}{\\sum_{i'=1}^{n}(x_{i'} - \\bar x)^2}.\n\\end{equation}\\]\nIt is clear from this equation that \\(h_i\\) increases with the distance of \\(x_i\\) from \\(\\bar x\\). A large value of \\(h_i\\) indicates that the \\(i^{th}\\) observation is distance from the center of all the other observations in terms of predictor values.\nThe leverage statistic \\(h_i\\) is always between \\(1/n\\) and \\(1\\), and the average leverage for all the observations is always equal to \\((p+1)/n\\):\n\\[\\begin{equation}\n\\bar{h} = \\frac{p+1}{n}\n\\end{equation}\\]\nSo if a given observation has a leverage statistic that greatly exceeds \\((p+1)/n\\), then we may suspect that the corresponding point has high leverage.\nIf the \\(i^{th}\\) observation has a large leverage \\(h_i\\), it may exercise substantial leverage in determining the fitted value \\(\\hat{Y}_i\\), because:\n\nThe fitted value \\(\\hat{Y}_i\\) is a linear combination of the observed \\(Y\\) values, and \\(h_i\\) is the weight of observation \\(Y_i\\) in determining this fitted value.\nThe larger the \\(h_i\\), the smaller is the variance of the residual \\(e_i\\), and the closer the fitted value \\(\\hat{Y}_i\\) will tend to be the observed value \\(Y_i\\).\n\nThumb rules:\n\nA leverage \\(h_i\\) is usually considered large if it is more than twice as large as the mean value \\(\\bar{h}\\).\nAnother suggested guideline is that \\(h_i\\) values exceeding 0.5 indicate very high leverage, whereas those between 0.2 and 0.5 indicate moderate leverage.\n\nInfluential points: Note that if a high leverage point falls in line with the regression line, then it will not affect the regression line. However, it may inflate \\(R\\)-squared and increase the significance of predictors. If a high leverage point falls away from the regression line, then it is also an outlier, and will affect the regression line. The points whose presence significantly affects the regression line are called influential points. A point that is both a high leverage point and an outlier is likely to be an influential point. However, a high leverage point is not necessarily an influential point.\nSource for influential points: https://online.stat.psu.edu/stat501/book/export/html/973\nLet us see if there are any high leverage points in our regression model.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(price)\nR-squared:\n0.803\n\n\nModel:\nOLS\nAdj. R-squared:\n0.803\n\n\nMethod:\nLeast Squares\nF-statistic:\n1834.\n\n\nDate:\nSun, 10 Mar 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n16:53:39\nLog-Likelihood:\n-1173.8\n\n\nNo. Observations:\n4960\nAIC:\n2372.\n\n\nDf Residuals:\n4948\nBIC:\n2450.\n\n\nDf Model:\n11\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-238.2125\n25.790\n-9.237\n0.000\n-288.773\n-187.652\n\n\nyear\n0.1227\n0.013\n9.608\n0.000\n0.098\n0.148\n\n\nengineSize\n13.8349\n5.795\n2.387\n0.017\n2.475\n25.195\n\n\nmileage\n0.0005\n0.000\n3.837\n0.000\n0.000\n0.001\n\n\nmpg\n-1.2446\n0.345\n-3.610\n0.000\n-1.921\n-0.569\n\n\nyear:engineSize\n-0.0067\n0.003\n-2.324\n0.020\n-0.012\n-0.001\n\n\nyear:mileage\n-2.67e-07\n6.8e-08\n-3.923\n0.000\n-4e-07\n-1.34e-07\n\n\nyear:mpg\n0.0006\n0.000\n3.591\n0.000\n0.000\n0.001\n\n\nengineSize:mileage\n-2.668e-07\n4.08e-07\n-0.654\n0.513\n-1.07e-06\n5.33e-07\n\n\nengineSize:mpg\n0.0028\n0.000\n6.842\n0.000\n0.002\n0.004\n\n\nmileage:mpg\n7.235e-08\n1.79e-08\n4.036\n0.000\n3.72e-08\n1.08e-07\n\n\nI(mileage ** 2)\n1.828e-11\n5.64e-12\n3.240\n0.001\n7.22e-12\n2.93e-11\n\n\n\n\n\n\nOmnibus:\n711.514\nDurbin-Watson:\n0.498\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n2545.807\n\n\nSkew:\n0.699\nProb(JB):\n0.00\n\n\nKurtosis:\n6.220\nCond. No.\n1.73e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.73e+13. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n\n#Computing the leverage statistic for each observation\ninfluence = model_log.get_influence()\nleverage = influence.hat_matrix_diag\n\n\n#Visualizng leverage against studentized residuals\nsns.set(rc={'figure.figsize':(15,8)})\nsm.graphics.influence_plot(model_log);\n\n\n\n\n\n\n\n\nLet us identify the high leverage points in the data, as they may be affecting the regression line if they are outliers as well, i.e., if they are influential points. Note that there is no defined threshold for a point to be classified as a high leverage point. Some statisticians consider points having twice the average leverage as high leverage points, some consider points having thrice the average leverage as high leverage points, and so on.\n\nout = model_log.outlier_test()\n\n\n#Average leverage of points\naverage_leverage = (model_log.df_model+1)/model_log.nobs\naverage_leverage\n\n0.0024193548387096775\n\n\nLet us consider points having four times the average leverage as high leverage points.\n\n#We will remove all observations that have leverage higher than the threshold value.\nhigh_leverage_threshold = 3*average_leverage\n\n\n#Number of high leverage points in the dataset\nnp.sum(leverage&gt;high_leverage_threshold)\n\n269\n\n\n\n7.2.1 Identifying extrapolation using leverage\nLeverage can be used to check if prediction on a particular point will lead to extrapolation.\nBelow is the function that can be used to find the leverage at for a particular observation xnew. Note that xnew has to be a single-dimensional array, and X has to be the predictor matrix (also called the design matrix).\n\ndef leverage_compute(xnew, X):\n    return(xnew.reshape(-1, 1).T.dot(np.linalg.inv(X.T.dot(X))).dot(xnew.reshape(-1, 1))[0][0])\n\nAs expected, the function will return the same leverage as provided by the hat_matrix_diag attribute of the objected returned by the get_influence() method of model_log as shown below:\n\nleverage[0]\n\n0.0026426981240353694\n\n\nAs the observation for prediction is required we need to create the predictor matrix X to create all the observations with the interactions specified in the model.\n\ny, X = dmatrices('np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train)\n\n\nleverage_compute(X[0,:], X)\n\n0.0026426973869101977\n\n\nIf the leverage for a new observation is higher than the maximum leverage among all the observations in the training dataset, then prediction at the new observation will be extrapolation.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Potential issues</span>"
    ]
  },
  {
    "objectID": "Lec5_Potential_issues.html#influential-points",
    "href": "Lec5_Potential_issues.html#influential-points",
    "title": "7  Potential issues",
    "section": "7.3 Influential points",
    "text": "7.3 Influential points\nObservations that are both high leverage points and outliers are influential points that may affect the regression line. Let’s remove these influential points from the data and see if it improves the model prediction accuracy on test data.\n\n#Dropping influential points from data\ntrain_filtered = train.drop(np.intersect1d(np.where(np.abs(out.student_resid) &gt; critical_value)[0],\n                                           (np.where(leverage&gt;high_leverage_threshold)[0])))\n\nNote that as the Bonferroni’s critical value is very conservative estimate, we have rounded off the critical value to 4, instead of 4.42.\n\ntrain_filtered.shape\n\n(4948, 11)\n\n\n\n#Number of points removed as they were influential\ntrain.shape[0]-train_filtered.shape[0]\n\n12\n\n\nWe removed 12 influential data points from the training data.\n\n#Model after removing the influential observations\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train_filtered)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nnp.log(price)\nR-squared:\n0.815\n\n\nModel:\nOLS\nAdj. R-squared:\n0.814\n\n\nMethod:\nLeast Squares\nF-statistic:\n1971.\n\n\nDate:\nSun, 10 Mar 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n16:54:08\nLog-Likelihood:\n-1027.9\n\n\nNo. Observations:\n4948\nAIC:\n2080.\n\n\nDf Residuals:\n4936\nBIC:\n2158.\n\n\nDf Model:\n11\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-256.2339\n25.421\n-10.080\n0.000\n-306.070\n-206.398\n\n\nyear\n0.1317\n0.013\n10.462\n0.000\n0.107\n0.156\n\n\nengineSize\n18.4650\n5.663\n3.261\n0.001\n7.364\n29.566\n\n\nmileage\n0.0006\n0.000\n4.288\n0.000\n0.000\n0.001\n\n\nmpg\n-1.1810\n0.338\n-3.489\n0.000\n-1.845\n-0.517\n\n\nyear:engineSize\n-0.0090\n0.003\n-3.208\n0.001\n-0.015\n-0.004\n\n\nyear:mileage\n-2.933e-07\n6.7e-08\n-4.374\n0.000\n-4.25e-07\n-1.62e-07\n\n\nyear:mpg\n0.0006\n0.000\n3.458\n0.001\n0.000\n0.001\n\n\nengineSize:mileage\n-4.316e-07\n4e-07\n-1.080\n0.280\n-1.21e-06\n3.52e-07\n\n\nengineSize:mpg\n0.0048\n0.000\n11.537\n0.000\n0.004\n0.006\n\n\nmileage:mpg\n7.254e-08\n1.75e-08\n4.140\n0.000\n3.82e-08\n1.07e-07\n\n\nI(mileage ** 2)\n1.668e-11\n5.53e-12\n3.017\n0.003\n5.84e-12\n2.75e-11\n\n\n\n\n\n\nOmnibus:\n718.619\nDurbin-Watson:\n0.521\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n2512.509\n\n\nSkew:\n0.714\nProb(JB):\n0.00\n\n\nKurtosis:\n6.185\nCond. No.\n1.75e+13\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.75e+13. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nLet us compare the square root of 5-fold cross-validated mean squared error of the model with and without the influential points.\n\ny, X = dmatrices('np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train)\nnp.sqrt(mean_squared_error(np.exp(cross_val_predict(LinearRegression(), X, y)), np.exp(y)))\n\n9811.74078331643\n\n\n\ny, X = dmatrices('np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', data = train_filtered)\nnp.sqrt(mean_squared_error(np.exp(cross_val_predict(LinearRegression(), X, y)), np.exp(y)))\n\n9800.202063309154\n\n\nWhy can’t we use cross_val_score() instead of cross_val_predict() here?\nThere seems to be a slight improvement in prediction error after removing influential points. Note that none of the points had “very high leverage”, and thus the change is not substantial.\nNote that we obtain a higher R-squared value of 81.5% as compared to 80% with the complete data. Removing the influential points helped obtain a slightly better model fit. However, that may also happen just by reducing observations.\n\n#Computing RMSE on test data\npred_price_log = model_log.predict(testf)\nnp.sqrt(((testp.price - np.exp(pred_price_log))**2).mean())\n\n8922.977452912108\n\n\nThe RMSE on test data has also reduced. This shows that some of the influential points were impacting the regression line. With those points removed, the model better captures the general trend in the data.\n\n7.3.1 Influence on single fitted value (DFFITS)\n\nA useful measure of the influence that the \\(i^{th}\\) observation has on the fitted value \\(\\hat{Y}_i\\) is:\n\n\\[\\begin{equation}\n(DFFITS)_i = \\frac{\\hat{Y}_i-\\hat{Y}_{i(i)}}{\\sqrt{MSE_{i}h_i}}\n\\end{equation}\\]\n\nNote that the denominator in the above fraction is the estimated standard deviation of \\(\\hat{Y}_i\\), but uses the error mean square when the \\(i^{th}\\) observation is omitted.\n\\(DFFITS\\) for the \\(i^{th}\\) observation represents the number of estimated standard deviations of \\(\\hat{Y}_i\\) that the fitted value \\(\\hat{Y}_i\\) increases or decreases with the inclusion of the \\(i^{th}\\) observation in fitting the regression model.\nIt can be shown that:\n\n\\[\\begin{equation}\n(DFFITS)_i = t_i\\sqrt{\\frac{h_i}{1-h_i}}\n\\end{equation}\\]\nwhere \\(t_i\\) is the studentized deleted residual for the \\(i^{th}\\) observation.\n\nWe can see that if an observation has high leverage and is an outlier, it is likely to be influential\nFor large datasets, an observation is considered influential if the magnitude of \\(DFFITS\\) for it exceeds \\(2\\sqrt{\\frac{p}{n}}\\)\n\n\nsns.set(font_scale =1.5)\nsns.lineplot(x = range(train.shape[0]), y = influence.dffits[0])\nplt.xlabel('Observation index')\nplt.ylabel('DFFITS (model)');\n\n\n\n\n\n\n\n\nLet us analyze the point with the highest \\(DFFITS\\).\n\nnp.where(influence.dffits[0]&gt;1)\n\n(array([ 813, 4851], dtype=int64),)\n\n\n\ntrain.loc[813,:]\n\ncarID                12454\nbrand                   vw\nmodel            Caravelle\nyear                  2012\ntransmission     Semi-Auto\nmileage             212000\nfuelType            Diesel\ntax                    325\nmpg                34.4424\nengineSize             2.0\nprice                11995\nName: 813, dtype: object\n\n\n\ntrain.loc[train.model == ' Caravelle','mileage'].describe()\n\ncount        65.000000\nmean      25638.692308\nstd       42954.135726\nmin          10.000000\n25%        3252.000000\n50%        6900.000000\n75%       30414.000000\nmax      212000.000000\nName: mileage, dtype: float64\n\n\n\n# Prediction with model developed based on all points\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', \n                     data = train)\nmodel_log = ols_object.fit();\nnp.exp(model_log.predict(train.loc[[813],:]))\n\n813    5502.647323\ndtype: float64\n\n\n\n# Prediction with model developed based on all points except the 813th point\nols_object = smf.ols(formula = 'np.log(price)~(year+engineSize+mileage+mpg)**2+I(mileage**2)', \n                     data = train.drop(index = 813))\nmodel_log = ols_object.fit();\nnp.exp(model_log.predict(train.loc[[813],:]))\n\n813    4581.374593\ndtype: float64\n\n\nLet us see the leverage and studentized residual for this observation.\n\n# Leverage\nleverage[813]\n\n0.19038697461006687\n\n\n\n# Studentized residual\nout.student_resid[813]\n\n2.823478041409651\n\n\nDo you notice what may be contributing to the high influence of this point?\n\n\n7.3.2 Influence on all fitted values (Cook’s distance)\nIn contrast to \\(DFFITS\\), which considers the influence of the \\(i^{th}\\) observation on the fitted value \\(\\hat{Y}_i\\), Cook’s distance considers the influence of the \\(i^{th}\\) observation on all \\(n\\) the fitted values:\n\\[\\begin{equation}\nD_i = \\frac{\\sum_{j=1}^{n} (\\hat{Y}_j - \\hat{Y}_{j(i)})^2}{pMSE}\n\\end{equation}\\]\nIt can be shown that:\n\\[\\begin{equation}\nD_i = \\frac{e_i^2}{pMSE}\\bigg[\\frac{h_i}{(1-h_i)^2}\\bigg]\n\\end{equation}\\]\nThe larger \\(h_i\\) or \\(e_i\\), the larger is \\(D_i\\). \\(D_i\\) can be related to the \\(F(p, n- p)\\) distribution. If the percentile value is 50% or more, the observation is considered as highly influential.\nCook’s distance is considered high if it is greater than 0.5 and extreme if it is greater than 1.\n\nsns.set(font_scale =1.5)\nsns.lineplot(x = range(train.shape[0]), y = influence.cooks_distance[0])\nplt.xlabel('Observation index')\nplt.ylabel(\"Cook's Distance (model)\");\n\n\n\n\n\n\n\n\n\n# Point with the highest Cook's distance\nnp.where(influence.cooks_distance[0]&gt;0.15)\n\n(array([813], dtype=int64),)\n\n\nThe critical Cook’s distance value for a point to be highly influential in this dataset is:\n\nstats.f.ppf(0.5, 11, 4949)\n\n0.9402181103263811\n\n\nThus, we don’t have any highly influential points in the dataset.\n\n\n7.3.3 Influence on regression coefficients (DFBETAS)\n\n\\(DFBETAS\\) measures the influence of the \\(i^{th}\\) observation on the regression coefficient.\n\\(DFBETAS\\) of the \\(i^{th}\\) observation on the \\(k^{th}\\) regression coefficient is:\n\n\\[\\begin{equation}\n(DFBETAS)_{k(i)} = \\frac{\\hat{\\beta}_k-\\hat{\\beta}_{k(i)}}{\\sqrt{MSE_ic_{k}}}\n\\end{equation}\\]\nwhere \\(c_k\\) is the \\(k^{th}\\) diagonal element of \\((X^TX)^{-1}\\).\nFor large datasets, an observation is considered influential if \\(DFBETAS\\) exceeds \\(\\frac{2}{\\sqrt{n}}\\).\nBelow is the plot of \\(DFBETAS\\) for the year predictor against the observation index.\n\nsns.set(font_scale =1.5)\nsns.lineplot(x = range(train.shape[0]), y = influence.dfbetas[:,1])\nplt.xlabel('Observation index')\nplt.ylabel(\"DFBETAS (year)\");\n\n\n\n\n\n\n\n\nLet us analyze the point with the highest magnitude of \\(DFBETAS\\).\n\nnp.where(influence.dfbetas[:,1]&lt;-0.8)\n\n(array([4851], dtype=int64),)\n\n\n\ntrain.year.describe()\n\ncount    4960.000000\nmean     2016.737903\nstd         2.884035\nmin      1997.000000\n25%      2016.000000\n50%      2017.000000\n75%      2019.000000\nmax      2020.000000\nName: year, dtype: float64\n\n\n\ntrain.loc[train.year&lt;=2002,:]\n\n\n\n\n\n\n\n\n\ncarID\nbrand\nmodel\nyear\ntransmission\nmileage\nfuelType\ntax\nmpg\nengineSize\nprice\n\n\n\n\n330\n13200\naudi\nA8\n1997\nAutomatic\n122000\nPetrol\n265\n19.3511\n4.2\n4650\n\n\n732\n13988\nvw\nBeetle\n2001\nManual\n47729\nPetrol\n330\n32.5910\n2.0\n2490\n\n\n3157\n18794\nford\nPuma\n2002\nManual\n108000\nPetrol\n230\n38.5757\n1.7\n2195\n\n\n3525\n19395\nmerc\nS Class\n2001\nAutomatic\n108800\nDiesel\n325\n31.5473\n3.2\n1695\n\n\n3532\n17531\nmerc\nS Class\n1999\nAutomatic\n34000\nPetrol\n145\n24.8735\n3.2\n5995\n\n\n3533\n18761\nmerc\nS Class\n2001\nAutomatic\n66000\nPetrol\n570\n24.7744\n3.2\n4495\n\n\n3535\n18813\nmerc\nS Class\n1998\nAutomatic\n43534\nPetrol\n265\n23.2962\n6.0\n19990\n\n\n3536\n17891\nmerc\nS Class\n2002\nAutomatic\n24000\nPetrol\n570\n20.7968\n5.0\n6995\n\n\n3707\n18746\nhyundi\nSanta Fe\n2002\nManual\n94000\nPetrol\n325\n30.2671\n2.4\n1200\n\n\n4091\n12995\nmerc\nSLK\n1998\nAutomatic\n113557\nPetrol\n265\n31.8368\n2.3\n1990\n\n\n4094\n19585\nmerc\nSLK\n2001\nAutomatic\n69234\nPetrol\n325\n30.8839\n2.0\n3990\n\n\n4096\n14265\nmerc\nSLK\n2001\nAutomatic\n48172\nPetrol\n325\n29.7058\n2.3\n3990\n\n\n4097\n15821\nmerc\nSLK\n2002\nAutomatic\n61400\nPetrol\n325\n29.6568\n2.3\n3990\n\n\n4098\n13021\nmerc\nSLK\n2001\nAutomatic\n91000\nPetrol\n325\n30.3248\n2.3\n3950\n\n\n4099\n12660\nmerc\nSLK\n2001\nAutomatic\n42087\nPetrol\n325\n29.9404\n2.3\n4490\n\n\n4101\n17521\nmerc\nSLK\n2002\nAutomatic\n75034\nPetrol\n325\n30.1380\n2.3\n4990\n\n\n4107\n13977\nmerc\nSLK\n2000\nAutomatic\n87000\nPetrol\n265\n27.2998\n3.2\n1490\n\n\n4108\n18679\nmerc\nSLK\n2000\nAutomatic\n113237\nPetrol\n270\n26.8765\n3.2\n3990\n\n\n4109\n14598\nmerc\nSLK\n2001\nAutomatic\n64476\nPetrol\n325\n27.4628\n3.2\n4990\n\n\n4847\n17268\nbmw\nZ3\n1997\nManual\n49000\nPetrol\n270\n34.9548\n1.9\n3950\n\n\n4848\n12137\nbmw\nZ3\n1999\nManual\n58000\nPetrol\n270\n35.3077\n1.9\n3950\n\n\n4849\n13288\nbmw\nZ3\n1999\nManual\n74282\nPetrol\n245\n35.4143\n1.9\n3995\n\n\n4850\n19172\nbmw\nZ3\n2001\nManual\n60000\nPetrol\n325\n30.7305\n2.2\n5950\n\n\n4851\n16577\nbmw\nZ3\n2002\nAutomatic\n16500\nPetrol\n325\n29.7614\n2.2\n14995\n\n\n\n\n\n\n\n\nLet us see the leverage and studentized residual for this observation.\n\n# Leverage\nleverage[4851]\n\n0.047120455781282225\n\n\n\n# Studentized residual\nout.student_resid[4851]\n\n4.938606329343604\n\n\nDo you see what makes this point influential?",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Potential issues</span>"
    ]
  },
  {
    "objectID": "Lec5_Potential_issues.html#collinearity",
    "href": "Lec5_Potential_issues.html#collinearity",
    "title": "7  Potential issues",
    "section": "7.4 Collinearity",
    "text": "7.4 Collinearity\nCollinearity refers to the situation when two or more predictor variables have a high linear association. Linear association between a pair of variables can be measured by the correlation coefficient. Thus the correlation matrix can indicate some potential collinearity problems.\n\n7.4.1 Why and how is collinearity a problem\n(Source: page 100-101 of book)\nThe presence of collinearity can pose problems in the regression context, since it can be difficult to separate out the individual effects of collinear variables on the response.\nSince collinearity reduces the accuracy of the estimates of the regression coefficients, it causes the standard error for \\(\\hat \\beta_j\\) to grow. Recall that the t-statistic for each predictor is calculated by dividing \\(\\hat \\beta_j\\) by its standard error. Consequently, collinearity results in a decline in the \\(t\\)-statistic. As a result, in the presence of collinearity, we may fail to reject \\(H_0: \\beta_j = 0\\). This means that the power of the hypothesis test—the probability of correctly detecting a non-zero coefficient—is reduced by collinearity.\n\n\n7.4.2 How to measure collinearity/multicollinearity\n(Source: page 102 of book)\nUnfortunately, not all collinearity problems can be detected by inspection of the correlation matrix: it is possible for collinearity to exist between three or more variables even if no pair of variables has a particularly high correlation. We call this situation multicollinearity. Instead of inspecting the correlation matrix, a better way to assess multicollinearity is to compute the variance inflation factor (VIF). The VIF is variance inflation factor the ratio of the variance of \\(\\hat \\beta_j\\) when fitting the full model divided by the variance of \\(\\hat \\beta_j\\) if fit on its own. The smallest possible value for VIF is 1, which indicates the complete absence of collinearity. Typically in practice there is a small amount of collinearity among the predictors. As a rule of thumb, a VIF value that exceeds 5 or 10 indicates a problematic amount of collinearity.\nThe estimated variance of the coefficient \\(\\beta_j\\), of the \\(j^{th}\\) predictor \\(X_j\\), can be expressed as:\n\\[\\hat{var}(\\hat{\\beta_j}) = \\frac{(\\hat{\\sigma})^2}{(n-1)\\hat{var}({X_j})}.\\frac{1}{1-R^2_{X_j|X_{-j}}},\\]\nwhere \\(R^2_{X_j|X_{-j}}\\) is the \\(R\\)-squared for the regression of \\(X_j\\) on the other covariates (a regression that does not involve the response variable \\(Y\\)).\nIn case of simple linear regression, the variance expression in the equation above does not contain the term \\(\\frac{1}{1-R^2_{X_j|X_{-j}}}\\), as there is only one predictor. However, in case of multiple linear regression, the variance of the estimate of the \\(j^{th}\\) coefficient (\\(\\hat{\\beta_j}\\)) gets inflated by a factor of \\(\\frac{1}{1-R^2_{X_j|X_{-j}}}\\) (Note that in the complete absence of collinearity, \\(R^2_{X_j|X_{-j}}=0\\), and the value of this factor will be 1).\nThus, the Variance inflation factor, or the VIF for the estimated coefficient of the \\(j^{th}\\) predictor \\(X_j\\) is:\n\\[\\begin{equation}\nVIF(\\hat \\beta_j) = \\frac{1}{1-R^2_{X_j|X_{-j}}}\n\\end{equation}\\]\n\n#Correlation matrix\ntrain.corr()\n\n\n\n\n\n\n\n\n\ncarID\nyear\nmileage\ntax\nmpg\nengineSize\nprice\n\n\n\n\ncarID\n1.000000\n0.006251\n-0.001320\n0.023806\n-0.010774\n0.011365\n0.012129\n\n\nyear\n0.006251\n1.000000\n-0.768058\n-0.205902\n-0.057093\n0.014623\n0.501296\n\n\nmileage\n-0.001320\n-0.768058\n1.000000\n0.133744\n0.125376\n-0.006459\n-0.478705\n\n\ntax\n0.023806\n-0.205902\n0.133744\n1.000000\n-0.488002\n0.465282\n0.144652\n\n\nmpg\n-0.010774\n-0.057093\n0.125376\n-0.488002\n1.000000\n-0.419417\n-0.369919\n\n\nengineSize\n0.011365\n0.014623\n-0.006459\n0.465282\n-0.419417\n1.000000\n0.624899\n\n\nprice\n0.012129\n0.501296\n-0.478705\n0.144652\n-0.369919\n0.624899\n1.000000\n\n\n\n\n\n\n\n\nLet us compute the Variance Inflation Factor (VIF) for the four predictors.\n\nX = train[['mpg','year','mileage','engineSize']]\n\n\nX.columns[1:]\n\nIndex(['year', 'mileage', 'engineSize'], dtype='object')\n\n\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tools.tools import add_constant\nX = add_constant(X)\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = X.columns\n\nfor i in range(len(X.columns)):\n    vif_data.loc[i,'VIF'] = variance_inflation_factor(X.values, i)\n\nprint(vif_data)\n\n      feature           VIF\n0       const  1.201579e+06\n1         mpg  1.243040e+00\n2        year  2.452891e+00\n3     mileage  2.490210e+00\n4  engineSize  1.219170e+00\n\n\nAs all the values of VIF are close to one, we do not have the problem of multicollinearity in the model. Note that the VIF of year and mileage is relatively high as they are the most correlated.\nQ1: Why is the VIF of the constant so high?\nQ2: Why do we need to include the constant while finding the VIF?\n\n\n7.4.3 Manual computation of VIF\n\n#Manually computing the VIF for year\nols_object = smf.ols(formula = 'price~mpg', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.137\n\n\nModel:\nOLS\nAdj. R-squared:\n0.137\n\n\nMethod:\nLeast Squares\nF-statistic:\n786.0\n\n\nDate:\nWed, 06 Mar 2024\nProb (F-statistic):\n1.14e-160\n\n\nTime:\n17:04:39\nLog-Likelihood:\n-54812.\n\n\nNo. Observations:\n4960\nAIC:\n1.096e+05\n\n\nDf Residuals:\n4958\nBIC:\n1.096e+05\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n4.144e+04\n676.445\n61.258\n0.000\n4.01e+04\n4.28e+04\n\n\nmpg\n-374.2975\n13.351\n-28.036\n0.000\n-400.471\n-348.124\n\n\n\n\n\n\nOmnibus:\n2132.208\nDurbin-Watson:\n0.320\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n13751.995\n\n\nSkew:\n1.942\nProb(JB):\n0.00\n\n\nKurtosis:\n10.174\nCond. No.\n158.\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n(13.351/9.338)**2\n\n2.044183378279958\n\n\n\n#Manually computing the VIF for year\nols_object = smf.ols(formula = 'price~year+mpg+engineSize+mileage', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.660\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n2410.\n\n\nDate:\nWed, 06 Mar 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n17:01:18\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.050e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.661e+06\n1.49e+05\n-24.593\n0.000\n-3.95e+06\n-3.37e+06\n\n\nyear\n1817.7366\n73.751\n24.647\n0.000\n1673.151\n1962.322\n\n\nmpg\n-79.3126\n9.338\n-8.493\n0.000\n-97.620\n-61.006\n\n\nengineSize\n1.218e+04\n189.969\n64.107\n0.000\n1.18e+04\n1.26e+04\n\n\nmileage\n-0.1474\n0.009\n-16.817\n0.000\n-0.165\n-0.130\n\n\n\n\n\n\nOmnibus:\n2450.973\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31060.548\n\n\nSkew:\n2.045\nProb(JB):\n0.00\n\n\nKurtosis:\n14.557\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n\n#Manually computing the VIF for year\nols_object = smf.ols(formula = 'year~mpg+engineSize+mileage', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nyear\nR-squared:\n0.592\n\n\nModel:\nOLS\nAdj. R-squared:\n0.592\n\n\nMethod:\nLeast Squares\nF-statistic:\n2400.\n\n\nDate:\nWed, 06 Mar 2024\nProb (F-statistic):\n0.00\n\n\nTime:\n17:00:13\nLog-Likelihood:\n-10066.\n\n\nNo. Observations:\n4960\nAIC:\n2.014e+04\n\n\nDf Residuals:\n4956\nBIC:\n2.017e+04\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n2018.3135\n0.140\n1.44e+04\n0.000\n2018.039\n2018.588\n\n\nmpg\n0.0095\n0.002\n5.301\n0.000\n0.006\n0.013\n\n\nengineSize\n0.1171\n0.037\n3.203\n0.001\n0.045\n0.189\n\n\nmileage\n-9.139e-05\n1.08e-06\n-84.615\n0.000\n-9.35e-05\n-8.93e-05\n\n\n\n\n\n\nOmnibus:\n2949.664\nDurbin-Watson:\n1.161\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n63773.271\n\n\nSkew:\n-2.426\nProb(JB):\n0.00\n\n\nKurtosis:\n19.883\nCond. No.\n1.91e+05\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.91e+05. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n\n#VIF for year\n1/(1-0.592)\n\n2.4509803921568625\n\n\nNote that year and mileage have a high linear correlation. Removing one of them should decrease the standard error of the coefficient of the other, without significanty decrease R-squared.\n\nols_object = smf.ols(formula = 'price~mpg+engineSize+mileage+year', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.660\n\n\nModel:\nOLS\nAdj. R-squared:\n0.660\n\n\nMethod:\nLeast Squares\nF-statistic:\n2410.\n\n\nDate:\nTue, 07 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n21:39:45\nLog-Likelihood:\n-52497.\n\n\nNo. Observations:\n4960\nAIC:\n1.050e+05\n\n\nDf Residuals:\n4955\nBIC:\n1.050e+05\n\n\nDf Model:\n4\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-3.661e+06\n1.49e+05\n-24.593\n0.000\n-3.95e+06\n-3.37e+06\n\n\nmpg\n-79.3126\n9.338\n-8.493\n0.000\n-97.620\n-61.006\n\n\nengineSize\n1.218e+04\n189.969\n64.107\n0.000\n1.18e+04\n1.26e+04\n\n\nmileage\n-0.1474\n0.009\n-16.817\n0.000\n-0.165\n-0.130\n\n\nyear\n1817.7366\n73.751\n24.647\n0.000\n1673.151\n1962.322\n\n\n\n\n\n\nOmnibus:\n2450.973\nDurbin-Watson:\n0.541\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n31060.548\n\n\nSkew:\n2.045\nProb(JB):\n0.00\n\n\nKurtosis:\n14.557\nCond. No.\n3.83e+07\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nRemoving mileage from the above regression.\n\nols_object = smf.ols(formula = 'price~mpg+engineSize+year', data = train)\nmodel_log = ols_object.fit()\nmodel_log.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\nprice\nR-squared:\n0.641\n\n\nModel:\nOLS\nAdj. R-squared:\n0.641\n\n\nMethod:\nLeast Squares\nF-statistic:\n2951.\n\n\nDate:\nTue, 07 Feb 2023\nProb (F-statistic):\n0.00\n\n\nTime:\n21:40:00\nLog-Likelihood:\n-52635.\n\n\nNo. Observations:\n4960\nAIC:\n1.053e+05\n\n\nDf Residuals:\n4956\nBIC:\n1.053e+05\n\n\nDf Model:\n3\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nIntercept\n-5.586e+06\n9.78e+04\n-57.098\n0.000\n-5.78e+06\n-5.39e+06\n\n\nmpg\n-101.9120\n9.500\n-10.727\n0.000\n-120.536\n-83.288\n\n\nengineSize\n1.196e+04\n194.848\n61.392\n0.000\n1.16e+04\n1.23e+04\n\n\nyear\n2771.1844\n48.492\n57.147\n0.000\n2676.118\n2866.251\n\n\n\n\n\n\nOmnibus:\n2389.075\nDurbin-Watson:\n0.528\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n26920.051\n\n\nSkew:\n2.018\nProb(JB):\n0.00\n\n\nKurtosis:\n13.675\nCond. No.\n1.41e+06\n\n\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 1.41e+06. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\nNote that the standard error of the coefficient of year has reduced from 73 to 48, without any large reduction in R-squared.\n\n\n7.4.4 When can we overlook multicollinearity?\n\nThe severity of the problems increases with the degree of the multicollinearity. Therefore, if there is only moderate multicollinearity (5 &lt; VIF &lt; 10), we may overlook it.\nMulticollinearity affects only the standard errors of the coefficients of collinear predictors. Therefore, if multicollinearity is not present for the predictors that we are particularly interested in, we may not need to resolve it.\nMulticollinearity affects the standard error of the coefficients and thereby their \\(p\\)-values, but in general, it does not influence the prediction accuracy, except in the case that the coefficients are so unstable that the predictions are outside of the domain space of the response. If our sole aim is prediction, and we don’t wish to infer the statistical significance of predictors, then we may avoid addressing multicollinearity. “The fact that some or all predictor variables are correlated among themselves does not, in general, inhibit our ability to obtain a good fit nor does it tend to affect inferences about mean responses or predictions of new observations, provided these inferences are made within the region of observations” - Neter, John, Michael H. Kutner, Christopher J. Nachtsheim, and William Wasserman. “Applied linear statistical models.” (1996): 318.",
    "crumbs": [
      "Linear regression",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Potential issues</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html",
    "href": "Assignment 1 (Section 20).html",
    "title": "Assignment 1 (Section 20)",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#instructions",
    "href": "Assignment 1 (Section 20).html#instructions",
    "title": "Assignment 1 (Section 20)",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Wednesday, 24th January 2024 at 11:59 pm.\nThere is a bonus question worth 15 points.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 100 + 15 (bonus question) + 5 (proper formatting) = 120 out of 100. There is no partial credit for some parts of the bonus question.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#case-studies-regression-vs-classification-and-prediction-vs-inference-16-points",
    "href": "Assignment 1 (Section 20).html#case-studies-regression-vs-classification-and-prediction-vs-inference-16-points",
    "title": "Assignment 1 (Section 20)",
    "section": "1) Case Studies: Regression vs Classification and Prediction vs Inference (16 points)",
    "text": "1) Case Studies: Regression vs Classification and Prediction vs Inference (16 points)\n\n1a)\nFor each case below, explain (1) whether it is a classification or a regression problem and (2) whether the main purpose is prediction or inference. You need justify your answers for credit.\n\n\n1b)\nYou work for a company that is interested in conducting a marketing campaign. The goal of your project is to identify individuals who are likely to respond positively to a marketing campaign, based on observations of demographic variables (such as age, gender, income etc.) measured on each individual. (2+2 points)\n\n\n1c)\nFor the same company, now you are working on a different project. This one is focused on understanding the impact of advertisements in different media types on the company sales. For example, you are interested in the following question: ‘How large of an increase in sales is associated with a given increase in radio and TV advertising?’ (2+2 points)\n\n\n1d)\nA company is selling furniture and they are interested in the finding the association between demographic characteristics of customers (such as age, gender, income etc.) and if they would purchase a particular company product. (2+2 points)\n\n\n1e)\nWe are interested in forecasting the % change in the USD/Euro exchange rate using the weekly changes in the stock markets of a number of countries. We collect weekly data for all of 2023. For each week, we record the % change in the USD/Euro, the % change in the US market, the % change in the British market, and the % change in the German market. (2+2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#examples-for-different-regression-metrics-rmse-vs-mae-8-points",
    "href": "Assignment 1 (Section 20).html#examples-for-different-regression-metrics-rmse-vs-mae-8-points",
    "title": "Assignment 1 (Section 20)",
    "section": "2) Examples for Different Regression Metrics: RMSE vs MAE (8 points)",
    "text": "2) Examples for Different Regression Metrics: RMSE vs MAE (8 points)\n\n2a)\nDescribe a regression problem, where it will be more proper to evaluate the model performance using the root mean squared error (RMSE) metric as compared to the mean absolute error (MAE) metric. You need to justify your answer for credit. (4 points)\nNote: You are not allowed to use the datasets and examples covered in the lectures.\n\n\n2b)\nDescribe a regression problem, where it will be more proper to evaluate the model performance using the mean absolute error (MAE) metric as compared to the root mean squared error (RMSE) metric. You need to justify your answer for credit. (4 points)\nNote: You are not allowed to use the datasets and examples covered in the lectures.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#modeling-the-petrol-consumption-in-u.s.-states-61-points",
    "href": "Assignment 1 (Section 20).html#modeling-the-petrol-consumption-in-u.s.-states-61-points",
    "title": "Assignment 1 (Section 20)",
    "section": "3) Modeling the Petrol Consumption in U.S. States (61 points)",
    "text": "3) Modeling the Petrol Consumption in U.S. States (61 points)\nRead petrol_consumption_train.csv. Assume that each observation is a U.S. state. For each observation, the data has the following variables as its five columns:\nPetrol_tax: Petrol tax (cents per gallon)\nPer_capita_income: Average income (dollars)\nPaved_highways: Paved Highways (miles)\nProp_license: Proportion of population with driver’s licenses\nPetrol_consumption: Consumption of petrol (millions of gallons)\n\n3a)\nCreate a pairwise plot of all the variables in the dataset. (1 point) Print the correlation matrix of all the variables as well. (1 point) Which variable has the highest linear correlation with Petrol_consumption? (2 points)\nNote: Remember that a pairwise plot is a visualization tool that you can find in the seaborn library.\n\n\n3b)\nFit a simple linear regression model to predict Petrol_consumption using the column you found in part a as the only predictor. Print the model summary. (4 points)\n\n\n3c)\nWhat is the increase in petrol consumption for an increase of 0.05 in the predictor? (4 points)\n\n\n3d)\nDoes petrol consumption have a statistically significant relationship with the predictor? You need to justify your answer for credit. (4 points)\n\n\n3e)\nHow much of the variation in petrol consumption can be explained by its linear relationship with the predictor? (3 points)\n\n\n3f)\nPredict the petrol consumption for a state in which 50% of the population has a driver’s license. (3 points) What are the confidence interval (3 points) and the prediction interval (3 points) for your prediction? Which interval is wider? (1 points) Why? (2 points)\n\n\n3g)\nPredict the petrol consumption for a state in which 10% of the population has a driver’s license. (3 points) Are you getting a reasonable outcome? (1 point) Why or why not? (2 points)\n\n\n3h)\nWhat is the residual standard error of the model? (3 points)\n\n\n3i)\nUsing the trained model, predict the petrol consumption of the observations in petrol_consumption_test.csv (2 points) and find the RMSE. (2 points) What is the unit of this RMSE value? (1 point)\n\n\n3j)\nBased on the answers to part g and part h, do you think the model is overfitting? You need to justify your answer for credit. (4 points)\n\n\n3k)\nMake a scatterplot of Petrol_consumption vs. the predictor using petrol_consumption_test.csv. (1 point) Over the scatterplot, plot the regression line (2 points), the prediction interval (2 points), and the confidence interval. (2 points)\nMake sure that regression line, prediction interval lines, and confidence interval lines have different colors. (1 point) Display a legend that correctly labels the lines as well. (1 point) Note that you need two lines of the same color to plot an interval.\n\n\n3l)\nFind the correlation between Petrol_consumption and the rest of the variables in petrol_consumption_train.csv. Which column would have the lowest R-squared value when used as the predictor for a Simple Linear Regression model to predict Petrol_consumption? Note that you can directly answer this question from the correlation values and do not need to develop any more linear regression models. (3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#reproducing-the-results-with-scikit-learn-15-points",
    "href": "Assignment 1 (Section 20).html#reproducing-the-results-with-scikit-learn-15-points",
    "title": "Assignment 1 (Section 20)",
    "section": "4) Reproducing the Results with Scikit-Learn (15 points)",
    "text": "4) Reproducing the Results with Scikit-Learn (15 points)\n\n4a)\nUsing the same datasets, same response and the same predictor as Question 3, reproduce the following outputs with scikit-learn:\n\nModel RMSE for test data (3 points)\nR-squared value of the model (3 points)\nResidual standard error of the model (3 points)\n\nNote that you are only allowed to use scikit-learn, pandas, and numpy tools for this question. Any other libraries will not receive any credit.\n\n\n4b)\nWhich of the model outputs from Question 3 cannot be reproduced using scikit-learn? Give two answers. (2+2 points) What does this tell about scikit-learn? (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Section 20).html#bonus-question-15-points",
    "href": "Assignment 1 (Section 20).html#bonus-question-15-points",
    "title": "Assignment 1 (Section 20)",
    "section": "5) Bonus Question (15 points)",
    "text": "5) Bonus Question (15 points)\nPlease note that the bonus question requires you to look more into the usage of the tools we covered in class and it will be necessary to do your own research. We strongly suggest attempting it after you are done with the rest of the assignment.\n\n5a)\nFit a simple linear regression model to predict Petrol_consumption based on the predictor in Question 3, but without an intercept term. (5 points - no partial credit)\nWithout an intercept means that the equation becomes \\(Y = \\beta_1X\\). The intercept term, \\(\\beta_0\\), becomes 0.\nNote: You must answer this part correctly to qualify for the bonus points in the following parts.\n\n\n5b)\nPredict the petrol consumption for the observations in petrol_consumption_test.csv using the model without an intercept and find the RMSE. (1+2 points) Then, print the summary and find the R-squared. (2 points)\n\n\n5c)\nThe RMSE for the models with and without the intercept are similar, which indicates that both models are almost equally good. However, the R-squared for the model without intercept is much higher than the R-squared for the model with the intercept. Why? Justify your answer. (5 points - no partial credit)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Assignment 1 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html",
    "href": "Assignment 1 (Sections 21 & 22).html",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#instructions",
    "href": "Assignment 1 (Sections 21 & 22).html#instructions",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Wednesday, 24th January 2024 at 11:59 pm.\nThere is a bonus question worth 15 points.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 100 + 15 (bonus question) + 5 (proper formatting) = 120 out of 100. There is no partial credit for some parts of the bonus question.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#case-studies-regression-vs-classification-and-prediction-vs-inference-16-points",
    "href": "Assignment 1 (Sections 21 & 22).html#case-studies-regression-vs-classification-and-prediction-vs-inference-16-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "1) Case Studies: Regression vs Classification and Prediction vs Inference (16 points)",
    "text": "1) Case Studies: Regression vs Classification and Prediction vs Inference (16 points)\nFor each case below, explain (1) whether it is a classification or a regression problem and (2) whether the main purpose is prediction or inference. You need justify your answers for credit.\n\n1a)\nYou work for a company that is interested in conducting a marketing campaign. The goal of your project is to identify individuals who are likely to respond positively to a marketing campaign, based on observations of demographic variables (such as age, gender, income etc.) measured on each individual. (2+2 points)\n\n\n1b)\nFor the same company, now you are working on a different project. This one is focused on understanding the impact of advertisements in different media types on the company sales. For example, you are interested in the following question: ‘How large of an increase in sales is associated with a given increase in radio and TV advertising?’ (2+2 points)\n\n\n1c)\nA company is selling furniture and they are interested in the finding the association between demographic characteristics of customers (such as age, gender, income etc.) and if they would purchase a particular company product. (2+2 points)\n\n\n1d)\nWe are interested in forecasting the % change in the USD/Euro exchange rate using the weekly changes in the stock markets of a number of countries. We collect weekly data for all of 2023. For each week, we record the % change in the USD/Euro, the % change in the US market, the % change in the British market, and the % change in the German market. (2+2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#examples-for-different-regression-metrics-rmse-vs-mae-8-points",
    "href": "Assignment 1 (Sections 21 & 22).html#examples-for-different-regression-metrics-rmse-vs-mae-8-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "2) Examples for Different Regression Metrics: RMSE vs MAE (8 points)",
    "text": "2) Examples for Different Regression Metrics: RMSE vs MAE (8 points)\n\n2a)\nDescribe a regression problem, where it will be more proper to evaluate the model performance using the root mean squared error (RMSE) metric as compared to the mean absolute error (MAE) metric. You need to justify your answer for credit. (4 points)\nNote: You are not allowed to use the datasets and examples covered in the lectures.\n\n\n2b)\nDescribe a regression problem, where it will be more proper to evaluate the model performance using the mean absolute error (MAE) metric as compared to the root mean squared error (RMSE) metric. You need to justify your answer for credit. (4 points)\nNote: You are not allowed to use the datasets and examples covered in the lectures.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#simple-linear-regression-formulation-3-points",
    "href": "Assignment 1 (Sections 21 & 22).html#simple-linear-regression-formulation-3-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "3) Simple Linear Regression: Formulation (3 points)",
    "text": "3) Simple Linear Regression: Formulation (3 points)\nWhen asked to state the simple linear regression model, a students wrote it as follows: \\(E(Y_i) = \\beta_0 + \\beta_1X_i + \\epsilon_i\\). Is this correct (1 point)? Justify your answer (2 points).",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#modeling-the-petrol-consumption-in-u.s.-states-58-points",
    "href": "Assignment 1 (Sections 21 & 22).html#modeling-the-petrol-consumption-in-u.s.-states-58-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "4) Modeling the Petrol Consumption in U.S. States (58 points)",
    "text": "4) Modeling the Petrol Consumption in U.S. States (58 points)\nRead petrol_consumption_train.csv. Assume that each observation is a U.S. state. For each observation, the data has the following variables as its five columns:\nPetrol_tax: Petrol tax (cents per gallon)\nPer_capita_income: Average income (dollars)\nPaved_highways: Paved Highways (miles)\nProp_license: Proportion of population with driver’s licenses\nPetrol_consumption: Consumption of petrol (millions of gallons)\n\n4a)\nCreate a pairwise plot of all the variables in the dataset. (1 point) Print the correlation matrix of all the variables as well. (1 point) Which variable has the highest linear correlation with Petrol_consumption? (1 point)\nNote: Remember that a pairwise plot is a visualization tool that you can find in the seaborn library.\n\n\n4b)\nFit a simple linear regression model to predict Petrol_consumption using the column you found in part a as the only predictor. Print the model summary. (3 points)\n\n\n4c)\nWhen asked for a point estimate of the expected petrol consumption for a state where the proportion of population with driver’s license is 54.4%, a person gave the estimate 488 million gallons because that is the mean value of Petrol_consumption for the two observations of Prop_license = 0.544 pieces in the dataset. Is there an issue with this approach? Explain. (2 points) If there is an issue, then suggest a better approach and use it to estimate the expected petrol consumption for a state where the proportion of population with driver’s license is 54.4%. (2 points)\n\n\n4d)\nWhat is the increase in petrol consumption for an increase of 0.05 in the predictor? (3 points)\n\n\n4e)\nDoes petrol consumption have a statistically significant relationship with the predictor? You need to justify your answer for credit. (3 points)\n\n\n4f)\nHow much of the variation in petrol consumption can be explained by its linear relationship with the predictor? (2 points)\n\n\n4g)\nPredict the petrol consumption for a state in which 50% of the population has a driver’s license. (2 points) What are the confidence interval (2 points) and the prediction interval (2 points) for your prediction? Which interval is wider? (1 points) Why? (2 points)\n\n\n4h)\nPredict the petrol consumption for a state in which 10% of the population has a driver’s license. (3 points) Are you getting a reasonable outcome? (1 point) Why or why not? (2 points)\n\n\n4i)\nWhat is the residual standard error of the model? (3 points)\n\n\n4j)\nUsing the trained model, predict the petrol consumption of the observations in petrol_consumption_test.csv (2 points) and find the RMSE. (2 points) What is the unit of this RMSE value? (1 point)\n\n\n4k)\nBased on the answers to part i and part j, do you think the model is overfitting? You need to justify your answer for credit. (3 points)\n\n\n4l)\nMake a scatterplot of Petrol_consumption vs. the predictor using petrol_consumption_test.csv. (1 point) Over the scatterplot, plot the regression line (1 point), the prediction interval (2 points), and the confidence interval. (2 points)\nMake sure that regression line, prediction interval lines, and confidence interval lines have different colors. (1 point) Display a legend that correctly labels the lines as well. (1 point) Note that you need two lines of the same color to plot an interval.\n\n\n4m)\nThe dataset consists of 40 US States. If you combine this data with the data of the remaining 10 US States, are you likely to obtain narrower confidence and prediction intervals in the plot developed in the previous question, for the same level of confidence? Justify your answer. (2 points).\nIf yes, then can you gaurantee that the width of these intervals will reduce? Justify your answer. If no, then can you gaurantee that the width of these intervals will not reduce? Justify your answer. (2 points)\n\n\n4n)\nFind the correlation between Petrol_consumption and the rest of the variables in petrol_consumption_train.csv. Which column would have the lowest R-squared value when used as the predictor for a Simple Linear Regression model to predict Petrol_consumption? Note that you can directly answer this question from the correlation values and do not need to develop any more linear regression models. (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#reproducing-the-results-with-scikit-learn-15-points",
    "href": "Assignment 1 (Sections 21 & 22).html#reproducing-the-results-with-scikit-learn-15-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "5) Reproducing the Results with Scikit-Learn (15 points)",
    "text": "5) Reproducing the Results with Scikit-Learn (15 points)\n\n5a)\nUsing the same datasets, same response and the same predictor as Question 4, reproduce the following outputs with scikit-learn:\n\nModel RMSE for test data (3 points)\nR-squared value of the model (3 points)\nResidual standard error of the model (3 points)\n\nNote that you are only allowed to use scikit-learn, pandas, and numpy tools for this question. Any other libraries will not receive any credit.\n\n\n5b)\nWhich of the model outputs from Question 4 cannot be reproduced using scikit-learn? Give two answers. (2+2 points) What does this tell about scikit-learn? (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 1 (Sections 21 & 22).html#bonus-question-15-points",
    "href": "Assignment 1 (Sections 21 & 22).html#bonus-question-15-points",
    "title": "Assignment 1 (Sections 21 & 22)",
    "section": "6) Bonus Question (15 points)",
    "text": "6) Bonus Question (15 points)\nPlease note that the bonus question requires you to look more into the usage of the tools we covered in class and it will be necessary to do your own research. We strongly suggest attempting it after you are done with the rest of the assignment.\n\n6a)\nFit a simple linear regression model to predict Petrol_consumption based on the predictor in Question 4, but without an intercept term. (5 points - no partial credit)\nWithout an intercept means that the equation becomes \\(Y = \\beta_1X\\). The intercept term, \\(\\beta_0\\), becomes 0.\nNote: You must answer this part correctly to qualify for the bonus points in the following parts.\n\n\n6b)\nPredict the petrol consumption for the observations in petrol_consumption_test.csv using the model without an intercept and find the RMSE. (1+2 points) Then, print the summary and find the R-squared. (2 points)\n\n\n6c)\nThe RMSE for the models with and without the intercept are similar, which indicates that both models are almost equally good. However, the R-squared for the model without intercept is much higher than the R-squared for the model with the intercept. Why? Justify your answer. (5 points - no partial credit)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Assignment 1 (Sections 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html",
    "href": "Assignment 2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html#instructions",
    "href": "Assignment 2.html#instructions",
    "title": "Assignment 2",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Sunday, 4th February 2024 at 11:59 pm.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 105 + 5 (proper formatting) = 110 out of 100.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html#multiple-linear-regression-24-points",
    "href": "Assignment 2.html#multiple-linear-regression-24-points",
    "title": "Assignment 2",
    "section": "1) Multiple Linear Regression (24 points)",
    "text": "1) Multiple Linear Regression (24 points)\nA study was conducted on 97 male patients with prostate cancer who were due to receive a radical prostatectomy (complete removal of the prostate). The prostate.csv file contains data on 9 measurements taken from these 97 patients. Each row (observation) represents a patient and each column (variable) represents a measurement. The description of variables can be found here: https://rafalab.github.io/pages/649/prostate.html\n\n1a)\nFit a linear regression model with lpsa as the response and all the other variables as the predictors. Print its summary. (2 points) Write down the optimal equation that predicts lpsa using the predictors. (2 points)\n\n\n1b)\nIs the overall regression statistically significant? In other words, is there a statistically significant relationship between the response and at least one predictor? You need to justify your answer for credit. (2 points)\n\n\n1c)\nWhat does the optimal coefficient of svi tell us as a numeric output? Make sure you include the predictor, (svi) the response (lpsa) and the other predictors in your answer. (2 points)\n\n\n1d)\nCheck the \\(p\\)-values of gleason and age. Are these predictors statistically significant? You need to justify your answer for credit. (2 points)\n\n\n1e)\nCheck the 95% Confidence Interval of age. How can you relate it to its p-value and statistical significance, which you found in the previous part? (2 points)\n\n\n1f)\nThis question requires some thinking, and bringing your 303-1 and 303-2 knowledge together.\nFit a simple linear regression model on lpsa against gleason and check the \\(p\\)-value of gleason using the summary. (2 point) Did the statistical significance of gleason change in the absence of other predictors? (1 point) Why or why not? (3 points)\nHints:\n\nYou need to compare this model with the Multiple Linear Regression model you created above.\nPrinting a correlation matrix of all the predictors should be useful.\n\n\n\n1g)\nPredict the lpsa of a 65 year old man with lcavol = 1.35, lweight = 3.65, lbph = 0.1, svi = 0.22, lcp = -0.18, gleason = 6.75, and pgg45 = 25. Find the 95% confidence and prediction intervals as well. (2 points)\n\n\n1h)\nIn the Multiple Linear Regression model with all the predictors, you should see a total of five predictors that appear to be statistically insignificant. Why is it not a good idea to directly conclude that all of them are statistically insignificant? (2 points) Implement the additional test that concludes the statistical insignificance of all five predictors. (2 points)\nHint: f_test() method",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html#multiple-linear-regression-with-variable-transformations-22-points",
    "href": "Assignment 2.html#multiple-linear-regression-with-variable-transformations-22-points",
    "title": "Assignment 2",
    "section": "2) Multiple Linear Regression with Variable Transformations (22 points)",
    "text": "2) Multiple Linear Regression with Variable Transformations (22 points)\nThe infmort.csv file has the infant mortality data of different countries in the world. The mortality column represents the infant mortality rate with “deaths per 1000 infants” as the unit. The income column represents the per capita income in USD. The other columns should be self-explanatory. (This is an old dataset, as can be seen from some country names.)\n\n2a)\nStart your analysis by creating (i) a boxplot of log(mortality) for each region and (ii) a boxplot of income for each region. Note that the region column has the continent names. (3 points)\nNote: You need to use np.log, which is the natural log. This is to better distinguish the mortality values.\n\n\n2b)\nIn the previous part, you should see that Europe has the lowest infant mortality rate on average, but it also has the highest per capita income on average. Our goal is to see if Europe still has the lowest mortality rate if we remove the effect of income. We will try to find an answer for the rest of this question.\nCreate four scatter plots: (i) mortality against income, (ii) log(mortality) against income, (iii) mortality against log(income), and (iv) log(mortality) against log(income). (3 points) Based on the plots, create an appropriate model to predict the mortality rate as a function of per capita income. Print the model summary. (2 points)\n\n\n2c)\nUpdate the model you created in the previous part by adding region as a predictor. Print the model summary. (2 points)\n\n\n2d)\nUse the model developed in the previous part to compute a new adjusted_mortality variable for each observation in the data. (5 points) Adjusted mortality rate is the mortality rate after removing the estimated effect of income. You need to calculate it with the following steps:\n\nMultiply the (transformed) income column with its optimal coefficient. This is the estimated effect of income.\nSubtract the product from the (transformed) response column. This removes the estimated effect of income.\nYou may need to do a inverse transformation to calculate the actual adjusted mortality rate values.\n\nMake a boxplot of log(adjusted_mortality) for each region. (2 points)\n\n\n2e)\nUsing the plots in parts a and d, answer the following questions:\n\nDoes Europe still have the lowest mortality rate on average after removing the effect of income?\nHow did the distribution of values among different continents change after removing the effect of income? How did the comparison of different continents change? Does any non-European country have a lower mortality rate than all the European countries after removing the effect of income?\n\n(5 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html#variable-transformations-and-interactions-38-points",
    "href": "Assignment 2.html#variable-transformations-and-interactions-38-points",
    "title": "Assignment 2",
    "section": "3) Variable Transformations and Interactions (38 points)",
    "text": "3) Variable Transformations and Interactions (38 points)\nThe soc_ind.csv dataset contains many social indicators of a number of countries. Each row is a country and each column is a social indicator. The column names should be clear on what the variables represent. The GDP per capita will be the response variable throughout this question.\n\n3a)\nUsing correlations, find out the most useful predictor for a simple linear regression model with gdpPerCapita as the response. You can ignore categorical variables for now. Let that predictor be \\(P\\). (2 points)\n\n\n3b)\nCreate a scatterplot of gdpPerCapita vs \\(P\\). Does the relationship between gdpPerCapita and \\(P\\) seem linear or non-linear? (2 points)\n\n\n3c)\nIf the relationship in the previous part is non-linear, create three models:\n\nOnly with \\(P\\)\nWith \\(P\\) and its quadratic term\nWith \\(P\\), its quadratic term and its cubic term\n\n(2x3 = 6 points)\nCompare the \\(R\\)-squared values of the models. (2 points)\n\n\n3d)\nOn the same figure:\n\ncreate the scatterplot in part b.\nplot the linear regression line (only using \\(P\\))\nplot the polynomial regression curve that includes the quadratic and cubic terms.\nadd a legend to distinguish the linear and cubic fits.\n\n(6 points)\n\n\n3e)\nDevelop a model to predict gdpPerCapita using \\(P\\) and continent as predictors. (No higher-order terms.)\n\nWhich continent creates the baseline? (2 points) Write down its equation. (2 points)\nFor a given value of \\(P\\), are there any continents that do not have a statistically significant difference of predicted gdpPerCapita from the baseline continent? If yes, then which ones, and why? If no, then why not? You need to justify your answers for credit. (4 points)\n\n\n\n3f)\nThe model developed in the previous part has a limitation. It assumes that the increase in predicted gdpPerCapita with a unit increase in \\(P\\) does not depend on the continent.\nEliminate this limitation by including the interaction of continent with \\(P\\) in the model. Print the model summary of the model with interactions. (2 points) Which continent has the closest increase in predicted gdpPerCapita to the baseline continent with a unit increase in \\(P\\). Which continent has the furthest? You need to justify your answers for credit. (5 points)\n\n\n3g)\nUsing the model developed in the previous part, plot the regression lines of all the continents on the same figure. Put gdpPerCapita on the y-axis and \\(P\\) on the x-axis. (4 points) Use a legend to color-code the continents. (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Assignment 2.html#prediction-with-sklearn-21-points",
    "href": "Assignment 2.html#prediction-with-sklearn-21-points",
    "title": "Assignment 2",
    "section": "4) Prediction with Sklearn (21 points)",
    "text": "4) Prediction with Sklearn (21 points)\nUsing the soc_ind.csv dataset and only sklearn and pandas, train a Linear Regression model. You need the following steps:\n\ngdpPerCapita is the response. (2 points)\nIndex, geographic_location and country columns are not necessary. (2 points)\nAll the remaining columns are predictors. (2 points)\ncontinent column needs to be one-hot-encoded. (2 points)\nSince the numeric values have different orders of magnitude, you need to scale the dataset. You can use StandardScaler from sklearn.preprocessing for this. Create an object (just like a model) and use .fit_transform with the data as the input. (4 points)\nTrain a LinearRegression model. Use the entire dataset as the training data. (3 points)\nGet the predictions for the training data. (3 points)\nCalculate the RMSE and MAE. (3 points)\n\nFor this question, you only need to calculate the training performance. In the future, we will see how to split a dataset into training and test sets.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Assignment 2</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html",
    "href": "Homework_Assignment_3_Section20.html",
    "title": "Assignment 3 (Section 20)",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#instructions",
    "href": "Homework_Assignment_3_Section20.html#instructions",
    "title": "Assignment 3 (Section 20)",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Tuesday, 20th February 2024 at 11:59 pm.\nThere is a bonus question worth 12 points.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 103 + 12 + 5 = 120 out of 100.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#introduction-0-points",
    "href": "Homework_Assignment_3_Section20.html#introduction-0-points",
    "title": "Assignment 3 (Section 20)",
    "section": "Introduction (0 points)",
    "text": "Introduction (0 points)\nRead the train.csv, test1.csv, and test2.csv. All datasets are about direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls, where bank clients were called to subscribe for a term deposit. Each observation is a phone call and each column is a variable about the client or the phone call. The columns are described as follows:\n\nage: Age of the client\neducation: Education level of the client\nday: Day of the month the call is made\nmonth: Month of the call\ny: did the client subscribe to a term deposit? (This is the classification response.)\nduration: Call duration, in seconds. This variable highly affects the output (e.g., if duration=0 then y=‘no’). Yet, the duration is not known before a call is performed. Also, after the end of the call y is usually known. Therefore, it is a better idea that this variable should only be used for inference purposes and should be discarded if the intention is to have a realistic predictive model.\n\n(Source: UCI Data Archive. Please use the given datasets for the assignment, not the raw data from the source. It is just for reference.)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#investigating-the-effect-of-call-duration-on-subscription-probability-44-points",
    "href": "Homework_Assignment_3_Section20.html#investigating-the-effect-of-call-duration-on-subscription-probability-44-points",
    "title": "Assignment 3 (Section 20)",
    "section": "1) Investigating the Effect of Call Duration on Subscription Probability (44 points)",
    "text": "1) Investigating the Effect of Call Duration on Subscription Probability (44 points)\n\n1a)\nFirst of all, you need a numeric response value for your statsmodels functions. (Numeric, not Boolean!) Convert the response column, y, of the training data (train.csv) into 0s for ‘no’ and 1s for ‘yes’. (2 points)\n\n\n1b)\nUsing the training data and statsmodels, train a logistic regression model to predict if the client subscribed to a term deposit using the call duration. Print its summary. (2 points)\nYou need to use this model to answer all the remaining parts of this question.\n\n\n1c)\nIs the effect of the call duration on the probability of the client subscription statistically significant? Justify your answer. (2 points)\n\n\n1d)\nWhat is the probability of the client subscribing after a 5-minute marketing call? (Note that the duration variable is in given in seconds.) (3 points)\n\n\n1e)\nHow many minutes are necessary to have at least 95% probability of the client subscribing? Print it in the following format: “… minutes or higher” (5 points: 4 points for the calculation, 1 point for formatting)\n\n\n1f)\nWhat is the percentage increase in the odds of a client subscribing when the call duration increases by a minute? (4 points)\n\n\n1g)\nHow many minutes need to be added to a call to double the odds of a client subscribing? (3 points)\n\n\n1h)\nAfter exploring the model coefficients, it is time to see the limitations of this rather simplistic model.\nWhat is the maximum call duration (in minutes) after which the client refused to subscribe? (Note that you need the dataset itself for this question, not the model.) (2 points) What is the subscription probability that the model predicts for that client? (2 points)\n\n\n1i)\nUse a scatterplot to visualize the data. You need to plot the classes against the duration values. (2 points) Add some small random noise (also called jitter) on the class values to visualize as many observations as possible. (1 point) On top of that, add the curve that the model fits to this data. (2 points) You should see a sigmoid fit without its bottom end. Does it look like the duration of the call is enough by itself to predict the client subscription? (1 point) Why or why not? (1 point)\n\n\n1j)\nPredict the accuracy and recall using a threshold of 0.5 for test_data1.csv and test_data2.csv. You should print 4 numbers. (4 points) You should see very different values for the different metrics. Explain why this is happening and which metric is a better evaluation of the prediction performance. (3 points)\nHint: Checking the value counts of the response variable might be a good idea.\n\n\n1k)\nRepeat the previous question with a threshold of 0.3. Did the accuracy change much? How about recall? Explain why the results changed (or not) in terms of the confusion matrix elements. (5 points: 1 point for the calculation, 2 points for the recall explanation, 2 points for the accuracy explanation)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#exploring-variable-interactions-10-points",
    "href": "Homework_Assignment_3_Section20.html#exploring-variable-interactions-10-points",
    "title": "Assignment 3 (Section 20)",
    "section": "2) Exploring Variable Interactions (10 points)",
    "text": "2) Exploring Variable Interactions (10 points)\n\n2a)\nUsing the training data and statsmodels, train a logistic regression model to predict if the client subscribed to a term deposit using the education level and the age. Assume that the effect of age on the log-odds depends on the education level of the client. Print the summary. (2 points)\nYou need to use this model to answer all the remaining parts of this question.\n\n\n2b)\nPeople with which level of education have the highest percentage increase in odds of a client subscribing with a unit increase in age? Justify your answer. (4 points)\n\n\n2c)\nWhat is the maximum age of a client with tertiary education to have 15% subscription probability or lower? (4 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#model-development-and-evaluation-29-points",
    "href": "Homework_Assignment_3_Section20.html#model-development-and-evaluation-29-points",
    "title": "Assignment 3 (Section 20)",
    "section": "3) Model Development and Evaluation (29 points)",
    "text": "3) Model Development and Evaluation (29 points)\n\n3a)\nUsing the training data and statsmodels, train a logistic regression model to predict if the client subscribed to a term deposit using age, education, day, and month. The model must have:\n\nA minimum of 75.0% accuracy for all three datasets. (train.csv, test1.csv, and test2.csv) (3 points)\nA minimum of 50.0% recall for all three datasets. (6 points)\n\nPrint the model summary. (1 point) For all three datasets, print the accuracy scores, recall scores and confusion matrices. (3 points)\nNotes:\n\nYou cannot use duration as a predictor. The reason is explained in the description of the dataset in Introduction. (No credit from the entire question for models that use duration.)\nExplore some interactions and transformations. You do not need to go too high. (Still ok if you do and pass the given cutoffs.)\nYou are free to choose the decision threshold as you wish. However, you must use the same threshold for all three datasets. (No credit from the entire question for using different thresholds.)\nNo rounding. (For example, a recall of 49.9% is not considered correct.)\n\nYou need to use this model (and threshold, unless stated otherwise) to answer all the remaining parts of this question.\n\n\n3b)\nWhat is the probability that the model will predict a higher probability for a client who will subscribe compared to a client who will not? Justify your answer. (3 points)\n\n\n3c)\nAssume that you want to project all your prediction results for test1.csv and test2.csv to real-life profits. Assume that:\n\nOnly the clients who are predicted to subscribe are called.\nA client who is called and subscribes returns a profit of $100.\nA client who is called and does not subscribe returns a loss of $10.\n\nWhat is the net profit of the results? (3 points) Note that you need to use the confusion matrices printed in part a.\n\n\n3d)\nUsing the same assumptions in part c, find the threshold that would maximize the net profit. (5 points) Use the training data for this.\nThis is probably the most challenging part of this assignment. Here are some suggestions:\n\nYou do not need to calculate results for every possible threshold. You should already have some metrics calculated for a large array of thresholds in part b.\nUse those metrics and the proportion of class 1 observations in the dataset to find the net profit for all thresholds.\nFind the index of the highest profit to find the threshold, again using the threshold array from part b.\n\n\n\n3e)\nUsing the new threshold you found in the previous part, calculate the net profit using test1.csv and test2.csv. (4 points)\n\n\n3f)\nJust an intuitive question: In a real-life setting like this, would you prefer the threshold you found in part a that maximizes some mathematical concepts or the threshold you found in part d that maximizes your profit? (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#sklearn-20-points",
    "href": "Homework_Assignment_3_Section20.html#sklearn-20-points",
    "title": "Assignment 3 (Section 20)",
    "section": "4) Sklearn (20 points)",
    "text": "4) Sklearn (20 points)\nUsing train.csv and only sklearn, pandas, and numpy, train a Logistic Regression model. You need the following steps:\n\nThe response is still y. (1 point)\nPredictors are education, month, day and age. (1 point)\nNumerical predictors need to be transformed to all their second-order polynomial versions. (3 points)\nCategorical predictors need to be one-hot-encoded. (2 points) They should not interact with the numerical predictors. (2 points)\nAfterwards, the all the predictors needs to be standard scaled. (3 points)\n\nPrint the accuracy and recall for both training and test data using a threshold of 0.11. (5 points) Use test1.csv as the test dataset. Remember that the test dataset needs to go through the exact same transformation pipeline as the training dataset. (3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Homework_Assignment_3_Section20.html#bonus-data-visualization-with-precision-recall-and-fpr-12-points",
    "href": "Homework_Assignment_3_Section20.html#bonus-data-visualization-with-precision-recall-and-fpr-12-points",
    "title": "Assignment 3 (Section 20)",
    "section": "5) Bonus: Data Visualization with Precision, Recall and FPR (12 points)",
    "text": "5) Bonus: Data Visualization with Precision, Recall and FPR (12 points)\n\n5a)\nPlot the ROC curve for the model you trained in Question 3. Mark the point that corresponds to the decision threshold you found in 3d. (You can use a red solid point or whatever shape/color you want, as long as it is clearly marked.) Make sure you have the axis labels and the x=y line for comparison. (3 points)\n\n\n5b)\nConvert the previous plot to a scatter plot of TPR against FPR and color-code each point based on the corresponding profit. (5 points)\n\n\n5c)\nPlot the Precision-Recall curve for the model you trained in Question 3. Mark the decision threshold you found in 3d as a dashed vertical line. Make sure you have the axis labels. (4 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Assignment 3 (Section 20)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html",
    "href": "Assignment 3 (Section 21 & 22).html",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#instructions",
    "href": "Assignment 3 (Section 21 & 22).html#instructions",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Tuesday, 20th February 2024 at 11:59 pm.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#data-description",
    "href": "Assignment 3 (Section 21 & 22).html#data-description",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "Data description",
    "text": "Data description\nThe data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls, where bank clients were called to subscribe for a term deposit.\nThere is one train data - train.csv, which you will use to develop a model. There are two test datasets - test1.csv and test2.csv, which you will use to test your model. Each observation is a phone call and each column is a variable about the client or the phone call. Each dataset has the following attributes about the clients called in the marketing campaign:\n\nage: Age of the client\neducation: Education level of the client\nday: Day of the month the call is made\nmonth: Month of the call\ny: did the client subscribe to a term deposit?\nduration: Call duration, in seconds. This attribute highly affects the output target (e.g., if duration=0 then y=‘no’). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for inference purposes and should be discarded if the intention is to have a realistic predictive model.\n\n(Source: UCI Data Archive. Please use the given datasets for the assignment, not the raw data from the source. It is just for reference.)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#instructions-suggestions-for-answering-questions",
    "href": "Assignment 3 (Section 21 & 22).html#instructions-suggestions-for-answering-questions",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "Instructions / suggestions for answering questions",
    "text": "Instructions / suggestions for answering questions\n\nInstruction: Use train.csv for all questions, unless otherwise stated.\nSuggestion 1: You may use the functions in the class notes for printing the confusion matrix and the overall classification accuracy based on test / train data.\nSuggestion 2:: If you make variable transformations, you will need to do it for all the three datasets. Your code will be a bit concise if you make a function containing all the transformations, and then call it for the training and the two test datasets. You can put this function in the beginning of the code and keep adding transformations to it as you proceed with the assignment. You may need transformations in questions (1) and (13).",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#section",
    "href": "Assignment 3 (Section 21 & 22).html#section",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "1)",
    "text": "1)\nRead the datasets. Make an appropriate visualization to visualize how the proportion of clients subscribing to a term deposit change with increasing call duration.\n(4 points)\nHints:\n\nBin duration to create duration_binned. Group the data to find the fraction of clients responding positively to the marketing campaign for each bin in duration_binned. Make a lineplot of percentage of clients subscribing to a term deposit vs duration_binned, where the bins in duration_binned are arranged in increasing order of duration.\nYou may choose an appropriate number of bins & type of binning that helps you visualize well.\nYou may also think of other ways of visualization. You don’t need to stick with this one.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#predictor-duration",
    "href": "Assignment 3 (Section 21 & 22).html#predictor-duration",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "2) Predictor duration",
    "text": "2) Predictor duration\nBased on the plot in (1), comment whether duration seems to be a useful variable to predict if the client will subscribe to a term deposit.\n(1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#model-based-on-duration",
    "href": "Assignment 3 (Section 21 & 22).html#model-based-on-duration",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "3) Model based on duration",
    "text": "3) Model based on duration\nDevelop a logistic regression model to predict if the client subscribed to a term deposit based on call duration. Use the model to make a lineplot showing the probability of the client subscribing to a term deposit based on call duration.\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#note",
    "href": "Assignment 3 (Section 21 & 22).html#note",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "Note",
    "text": "Note\nAnswer questions 4 to 11 based on the regression model developed in (3).",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#model-significance",
    "href": "Assignment 3 (Section 21 & 22).html#model-significance",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "4) Model significance",
    "text": "4) Model significance\nIs the regression model in statistically significant? Justify your answer.\n(1 point for code, 1 point for answer)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#subscription-probability-in-5-minutes",
    "href": "Assignment 3 (Section 21 & 22).html#subscription-probability-in-5-minutes",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "5) Subscription probability in 5 minutes",
    "text": "5) Subscription probability in 5 minutes\nWhat is the probability that the client subscribes to a term deposit with a 5-minute marketing call? Note that the call duration in data is given in seconds.\n(2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#call-duration-for-subscription",
    "href": "Assignment 3 (Section 21 & 22).html#call-duration-for-subscription",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "6) Call duration for subscription",
    "text": "6) Call duration for subscription\nWhat is the minimum call duration (in minutes) for which a client has a 95% or higher chance of subscribing to a term deposit?\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#maximum-call-duration",
    "href": "Assignment 3 (Section 21 & 22).html#maximum-call-duration",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "7) Maximum call duration",
    "text": "7) Maximum call duration\nWhat is the maximum call duration (in minutes) in which a client refused to subscribe to a term deposit? What was the probability of the client subscribing to the term deposit in that call?\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#percent-increase-in-odds",
    "href": "Assignment 3 (Section 21 & 22).html#percent-increase-in-odds",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "8) Percent increase in odds",
    "text": "8) Percent increase in odds\nWhat is the percentage increase in the odds of a client subscribing to a term deposit when the call duration increases by a minute?\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#doubling-the-subscription-odds",
    "href": "Assignment 3 (Section 21 & 22).html#doubling-the-subscription-odds",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "9) Doubling the subscription odds",
    "text": "9) Doubling the subscription odds\nHow much must the call duration increase (in minutes) so that it doubles the odds of the client subscribing to a term deposit.\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#classification-accuracy",
    "href": "Assignment 3 (Section 21 & 22).html#classification-accuracy",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "10) Classification accuracy",
    "text": "10) Classification accuracy\nWhat is minimum overall classification accuracy of the model among the classification accuracies on train.csv, test1.csv and test2.csv? Consider a threshold of 30% when classifying observations.\n(2 + 1 + 1 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#recall",
    "href": "Assignment 3 (Section 21 & 22).html#recall",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "11) Recall",
    "text": "11) Recall\nWhat is the minimum Recall of the model among the Recall performance on train.csv, test1.csv and test2.csv? Consider a decision threshold probability of 30% when classifying observations.\nHere, Recall is the proportion of clients predicted to subscribe to a term deposit among those who actually subscribed.\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#subscription-probability-based-on-age-and-education",
    "href": "Assignment 3 (Section 21 & 22).html#subscription-probability-based-on-age-and-education",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "12) Subscription probability based on age and education",
    "text": "12) Subscription probability based on age and education\nDevelop a logistic regression model to predict the probability of a client subscribing to a term deposit based on age, education and the two-factor interaction between age and education. Based on the model, answer:\n\nPeople with which type of education (primary / secondary / tertiary / unknown) have the highest percentage increase in odds of subscribing to a term deposit with a unit increase in age? Justify your answer.\nWhat is the percentage increase in odds of a person subscribing to a term deposit for a unit increase in age, if the person has tertiary education.\nWhat is the percentage increase in odds of a person subscribing to a term deposit for a unit increase in age, if the person has primary education.\n\n(1 point for developing the model, 3 points for (a), 3 points for (b), 3 points for (c))",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#model-development",
    "href": "Assignment 3 (Section 21 & 22).html#model-development",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "13) Model development",
    "text": "13) Model development\nDevelop a logistic regression model (using train.csv) to predict the probability of a client subscribing to a term deposit based on age, education, day and month. The model must have:\n\nMinimum overall classification accuracy of 75% among the classification accuracies on train.csv, test1.csv and test2.csv.\nMinimum recall of 50% among the recall performance on train.csv, test1.csv and test2.csv.\n\nFor all the three datasets - train.csv, test1.csv and test2.csv, print the:\n\nModel summary (only for train.csv),\nConfusion matrices,\nOverall classification accuracies, and\nRecall\n\nNote that:\n\nYou cannot use duration as a predictor because its value is determined after the marketing call ends. However, after the call ends, we already know whether the client responded positively or negatively. That is why we have used duration only for inference in the previous questions. It helped us understand the effect of the length of the call on marketing success.\nIt is possible to develop the model satisfying constrains (a) and (b) with just appropriate transformation(s) of the predictor(s). However, you may consider interactions if you wish. Justify the transformations, if any, with visualizations.\nYou are free to choose any value of the decision threshold probability for classifying observations. However, you must use the same threshold on all the three datasets.\n\n(10 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#roc-auc",
    "href": "Assignment 3 (Section 21 & 22).html#roc-auc",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "14) ROC-AUC",
    "text": "14) ROC-AUC\nReport the probability that the model will predict a higher probability of response for a customer who signs up for the term deposit as compared to the customer who does not sign up, i.e., the ROC-AUC of the developed model in (13).\nHint: Use the functions roc_curve, and auc from the sklearn.metrics module\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#net-profit",
    "href": "Assignment 3 (Section 21 & 22).html#net-profit",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "15) Net-profit",
    "text": "15) Net-profit\nSuppose that the model developed in (13) is used to predict the clients in test1.csv and test2.csv who will respond positively to the campaign. Only those clients who are predicted to respond positively are called during the marketing campaign. Assume that:\n\nA profit of \\$100 is associated with a client who responds positively to the campaign,\nA loss of \\$10 is associated with a client who responds negatively to the campaign\n\nWhat is the net profit from the campaign? Use the confusion matrices printed in (13).\n(4 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#decision-threshold-probability",
    "href": "Assignment 3 (Section 21 & 22).html#decision-threshold-probability",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "16) Decision threshold probability",
    "text": "16) Decision threshold probability\nBased on the profit and loss associated with client responses specified in (15), and the model developed in (13), find the decision threshold probability of classification, such that the net profit is maximized. Use train.csv\nProceed as follows:\n\nYou would have obtained FPR and TPR for all potential decision threshold probabilities in (14).\nFormulate an expression quantifying the net profit per client, in terms of FPR, TPR, and the overall response rate, i.e., proportion of people actually subscribing to the term deposit.\nFind the decision threshold probability that maximizes the expression in (2).\n\n(5 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#net-profit-based-on-new-decision-threshold-probability",
    "href": "Assignment 3 (Section 21 & 22).html#net-profit-based-on-new-decision-threshold-probability",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "17) Net profit based on new decision threshold probability",
    "text": "17) Net profit based on new decision threshold probability\nUsing the new decision threshold probability obtained in (16), answer (15), i.e., what is the net-profit associated with the clients in test1.csv and test2.csv if a marketing campaign is performed. Again, only those clients who are predicted to respond positively, based on the new decision threshold probability, are called during the marketing campaign\nAlso, print the confusion matrices for predictions on test1.csv and test2.csv with the new threshold probability.\n(4 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#model-preference",
    "href": "Assignment 3 (Section 21 & 22).html#model-preference",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "18) Model preference",
    "text": "18) Model preference\nWas the classification accuracy of the model in (13) higher than that of the model in (17)? If yes, then should you prefer the model in (13) for the marketing campaign? Why or why not?\nNote: The model in (17) is the same as in (13), except with a different decision threshold probability\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#roc-curve",
    "href": "Assignment 3 (Section 21 & 22).html#roc-curve",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "19) ROC curve",
    "text": "19) ROC curve\nPlot the ROC curve for the model developed in (13). Mark the point on the curve corresponding to the decision threshold probability identified in (16).\nNote that the ROC curve is independent of the decision threshold probability used by the model for prediction\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#profit-with-tpr-fpr",
    "href": "Assignment 3 (Section 21 & 22).html#profit-with-tpr-fpr",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "20) Profit with TPR / FPR",
    "text": "20) Profit with TPR / FPR\nMake a scatterplot of TPR vs FPR, and color the points based on net profit per client.\nYou can use the following code to make the plot if you have the relevant metrics in tpr, fpr, and net_profit\n(1 point)\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (9,6)\nplt.rcParams[\"figure.autolayout\"] = True\nf, ax = plt.subplots()\npoints = ax.scatter(fpr, tpr, c = net_profit, s=50, cmap=\"Blues\")\nf.colorbar(points, label = \"Net profit ($) \\n(per client)\")\nplt.xlabel(\"False positive rate\")\nplt.ylabel(\"True positive rate\")\nplt.show()",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#precision-recall",
    "href": "Assignment 3 (Section 21 & 22).html#precision-recall",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "21) Precision-recall",
    "text": "21) Precision-recall\nCompare the precision and recall of the models in (13) and (17) on train.csv.\nNote: The model in (17) is the same as in (13), except with a different decision threshold probability\n(4 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#precision-recall-important-metric",
    "href": "Assignment 3 (Section 21 & 22).html#precision-recall-important-metric",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "22) Precision-recall: important metric",
    "text": "22) Precision-recall: important metric\nBased on the above comparison, which metric among precision and recall turns out to be more important for maximizing the net profit in the marketing campaign?\n(1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#precision-recall-curve",
    "href": "Assignment 3 (Section 21 & 22).html#precision-recall-curve",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "23) Precision-recall curve",
    "text": "23) Precision-recall curve\nPlot the precision-recall curve vs decision threshold probability for the model developed in (13). Mark the points on the curve corresponding to the decision threshold probability identified in (16).\n(3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#precision-recall-vs-fpr-tpr",
    "href": "Assignment 3 (Section 21 & 22).html#precision-recall-vs-fpr-tpr",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "24) Precision-recall vs FPR-TPR",
    "text": "24) Precision-recall vs FPR-TPR\nInstead of using the FPR and TPR metrics to find the optimum decision threshold probability in (16), use the precision-recall metrics to find the same.\n(5 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment 3 (Section 21 & 22).html#sklearn",
    "href": "Assignment 3 (Section 21 & 22).html#sklearn",
    "title": "Assignment 3 (Section 21 & 22)",
    "section": "25) Sklearn",
    "text": "25) Sklearn\nUsing train.csv and only sklearn, pandas, and numpy, train a Logistic Regression model. You need the following steps:\n\nThe response is still y.\nPredictors are education, month, day and age.\nNumerical predictors need to be transformed to all their second-order polynomial versions.\nCategorical predictors need to be one-hot-encoded. They should not interact with the numerical predictors.\nAfterwards, the all the predictors needs to be standard scaled.\n\nPrint the accuracy and recall for both training and test data using a threshold of 0.11. Use test1.csv as the test dataset. Remember that the test dataset needs to go through the exact same transformation pipeline as the training dataset.\n(8 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Assignment 3 (Section 21 & 22)</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html",
    "href": "Assignment_4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html#instructions",
    "href": "Assignment_4.html#instructions",
    "title": "Assignment 4",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Monday, 4th March 2024 at 11:59 pm.\nThere is a bonus question worth 11 points.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 99 + 11 + 5 = 115 out of 100.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html#modeling-the-radii-of-exoplanets-40-points",
    "href": "Assignment_4.html#modeling-the-radii-of-exoplanets-40-points",
    "title": "Assignment 4",
    "section": "1) Modeling the Radii of Exoplanets (40 points)",
    "text": "1) Modeling the Radii of Exoplanets (40 points)\nFor this question, we are interested in predicting the radius of exoplanets (planets outside the Solar System) in kilometers. To achieve this goal, we will use NASA’s Composite Planetary Systems dataset and different regression models. (See https://exoplanetarchive.ipac.caltech.edu for more context.)\nRead all three CompositePlanetarySystems datasets - you should have one training and two test datasets. Each row is an exoplanet. pl_rade column represents the radius of each exoplanet as a proportion of Earth’s radius, which is approximately 6,378 km.\n\na)\nDevelop a linear regression model (no non-linear terms) to predict pl_rade using all the variables in the data except pl_name, disc_facility and disc_locale. You can use statsmodels or sklearn. (2 points)\n\n\nb)\nFind the RMSE of the model using both test sets separately. (You need to print two RMSE values.) Note that the library you used should not make a difference here! (2 points)\nPrint the training RMSE as well for reference. (1 point)\n\n\nc)\nCompare the training and test RMSEs. (1 point) What is the issue with this model? (1 point)\n\n\nd)\nTrain a Ridge regression model to predict pl_rade using the same variables as above. Optimize the hyperparameter using the RidgeCV object with LOOCV and neg_root_mean_squared_error scoring. What is the optimal hyperparameter value? (5 points)\nNote:\n\nKeep in mind that scaling is always necessary before Ridge/Lasso regression.\nUse the following array of possible hyperparameter values: alphas = np.logspace(2,0.5,200)\nYou have to use the RidgeCV object for this question.\n\n\n\ne)\nUsing the optimized and trained model, print the RMSEs for the training set and both test sets. (4 points)\n\n\nf)\nHow did the training and test performance change? Explain why the Ridge regression changed the training and test results. (3 points)\n\n\ng)\nFind the predictor whose coefficient is shrunk by far the most by Ridge regularization. (3 points)\nHint: .coef_ and .columns attributes should be helpful.\n\n\nh)\nWhy did the coefficient of the predictor identified in the previous question shrunk the most? Justify your answer for credit. (2 points)\nHint: Correlation vector/matrix\n\n\ni)\nVisualize how the coefficients change with the change in the hyperparameter value:\n\nCreate a line plot of coefficient values vs. the hyperparameter value.\nColor code each predictor’s coefficient values.\nUse log scale where necessary.\nUse an alphas vector of np.logspace(7,0,200) for better visualization\n\n(5 points)\n\n\nj)\nRecreate some of the previous steps with Lasso regression.\n\nUsing LassoCV only, find the optimal hyperparameter value. (2 points)\n\nYou need a different hyperparameter array - use: np.logspace(0,-2.5,200)\nUse 10-fold CV.\nLasso object does not have a scoring input.\n\nUsing the optimized and trained Lasso model, print the RMSEs for the training set and both test sets. (2 points)\nVisualize how the coefficients change with the change in the hyperparameter value. (2 points)\n\nUse the hyperparameter array as np.logspace(7,-2.5,200) for better visualization.\n\n\n\n\nk)\nUsing the two figures created in parts i and j, explain how the Ridge and the Lasso models behave differently as the hyperparameter value changes. (2 points) What does that difference mean for the usage of the Lasso model? (1 point)\n\n\nl)\nFind the predictors that are eliminated by Lasso regularization. (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html#improving-house-prices-prediction-with-higher-order-terms-and-crossvalidation-29-points",
    "href": "Assignment_4.html#improving-house-prices-prediction-with-higher-order-terms-and-crossvalidation-29-points",
    "title": "Assignment 4",
    "section": "2) Improving House Prices Prediction with Higher-order Terms and Crossvalidation (29 points)",
    "text": "2) Improving House Prices Prediction with Higher-order Terms and Crossvalidation (29 points)\nIn this question, we are interested in improving the prediction performance for house prices using five predictors.\n\na)\nRead the house feature and price files and create the training and test datasets. The response is log-price and the five predictors are the rest of the variables, except house_id. (2 points)\n\n\nb)\nIn class, we saw how an entirely linear model is not enough to capture the complexity in the relationship between the response and the predictors - in other words, it is underfitting. We want to analyze how the training and test performance change as the level of model complexity increases.\nUsing PolynomialFeatures object, create higher-order versions of the predictors (both transformations and interactions) in the training and test data. (3 points) Using all predictors (linear and transformed), train a Ridge model with alpha=0.000001 (2 points) and store the training and test RMSEs. (2 points) Repeat this process from order 1 to order 6. (2 points)\nFinally, plot the training and test RMSE values on the same figure against the order. (1 point) Make sure the two lineplots have different colors and a legend is included. (1 points)\nNote:\n\nThis question needs a loop.\nPolynomialFeatures object keeps the lower order terms (k-1 to 1) while creating new predictors of order k, so no need to concatenate.\nDon’t forget to exclude the bias term created by default with PolynomialFeatures.\nDon’t forget to scale (correctly) (2 points)\nMinimal regularization is necessary for this question, as opposed to pure Linear Regression, otherwise the test RMSE values go to infinity very quickly for higher orders.\n\n\n\nc)\nWhich order has the best test RMSE? (1 point) What is the best test RMSE? (1 point) At which order does the overfitting start? (1 point)\n\n\nd)\nRepeat part b, only this time use RidgeCV to find the best amount of regularization for each order by cross-validation. Use alphas = np.logspace(2,0.5,200) and LOOCV. Use neg_root_mean_squared_error for scoring. Create the same plot as part b. (4 points) Describe the obvious difference between the plot in this part and the plot in part b. (2 points)\n\n\ne)\nWhat is the best test RMSE found by using higher-orders and regularization? (1 point) Which order achieved this test RMSE? (1 point) Why did this order with regularization perform better than any lower order with or (almost) without regularization? (3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html#systematic-elimination-of-interaction-terms-30-points",
    "href": "Assignment_4.html#systematic-elimination-of-interaction-terms-30-points",
    "title": "Assignment 4",
    "section": "3) Systematic Elimination of Interaction Terms (30 points)",
    "text": "3) Systematic Elimination of Interaction Terms (30 points)\nIn this question, we are interested in predicting if the client subscribed to a term deposit or not after a phone call using age and education of the client and the day and the month the call took place.\nNote that this is the same problem as in the previous assignment, however, using sklearn, we aim to make the predictive analysis with interactions more systematic.\n\na)\nRead train.csv, test1.csv, and test2.csv. Prepare the training and two test datasets according the description above. (2 points)\n\n\nb)\nFor all datasets:\n\nOne-hot-encode the categorical predictors. (2 points)\nGet the interactions of all the predictors. (Numeric and one-hot-encoded) (3 points)\n\nNote that there is a very quick way of doing this with PolynomialFeatures\nDon’t forget to exclude the bias.\n\nScale the predictors (correctly.) (2 points)\n\n\n\nc)\nTrain a Logistic Regression model with Lasso penalty. (2 points) The idea is to discard interactions that are not useful. Note that instead of the manual, trial-and-error way of adding interactions in statsmodels, we include all the possible interactions and then discard the useless ones here.\n\nUse [0.0001,0.001, 0.01, 0.1, 1, 10, 100, 1000] as the possible C values. (1 point)\nUse 10-fold cross-validation to optimize the C value. (1 point)\nLasso is very useful, but it needs special algorithms, since it includes non-differentiable absolute values. Use saga as the solver. (1 point)\nFor the same reason as above, the default number of iterations the algorithm takes is usually not enough for Lasso. Use max_iter = 1000. (Default is 500) (1 point)\nThis will take 10-20 minutes to run.\n\n\n\nd)\nHow many models in total are run by this cross-validation process? (2 points)\n\n\ne)\nWhat is the optimum C value? (1 point) What is the lambda (in the Lasso cost) value it corresponds to? (1 point)\n\n\nf)\nWhat is the percentage of terms (linear or interaction) that are discarded by Lasso? (Hint: .coef_) (2 points)\n\n\ng)\nFind the five terms that have the highest effect on the logodds of a subscription. Assume that we are quantifying the effect of a term with the absolute value of its coefficient. (Hint: .get_feature_names_out()) (4 points)\n\n\nh)\nCome up with real-life explanations on why the terms identified in the previous part are important. (This is an open-ended question, just make sure your answer makes sense.) (2 points)\n\n\ni)\nLastly, find a threshold to get all three (training and both test) datasets above 75% accuracy and 50% recall. Note that you only worry about the threshold now. Lasso took care of finding good interactions. (3 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment_4.html#bonus-elasticnet-11-points",
    "href": "Assignment_4.html#bonus-elasticnet-11-points",
    "title": "Assignment 4",
    "section": "4) Bonus: ElasticNet (11 points)",
    "text": "4) Bonus: ElasticNet (11 points)\nThe entire goal of this part is to get you familiar with an alternate model: ElasticNet. It is implemented by adding both Lasso and Ridge penalties to the RSS (or subtracting them from the loglikelihood.) How much Lasso and how much Ridge penalty is up to two hyperparameters.\n\na)\nFor regression, sklearn has its own object and its CV version for ElasticNet.\nDo your own research and implement a 5-fold cross-validation for the options of 25% Lasso-75% Ridge, 50% Lasso-50% Ridge and 75% Lasso- 25% Ridge, and the alpha values of alphas = np.logspace(10,0.1,200).\n\nUse the dataset given in the first question (with the same columns dropped.)\nYou still need to scale.\nReturn the best Lasso-Ridge ratio and the alpha value pair that corresponds to the best test performance.\nNote that even if you use the CV object, you have to use loops.\n\n(8 points)\n\n\nb)\nHow many models were run in the cross-validation process of two hyperparameters? (1 point)\n\n\nc)\nBriefly mention how you would implement ElasticNet for Logistic Regression. Again, you need to do your own research. (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Assignment 4</span>"
    ]
  },
  {
    "objectID": "Assignment5_Section20.html",
    "href": "Assignment5_Section20.html",
    "title": "Assignment 5",
    "section": "",
    "text": "Instructions",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Assignment5_Section20.html#instructions",
    "href": "Assignment5_Section20.html#instructions",
    "title": "Assignment 5",
    "section": "",
    "text": "You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nWrite your code in the Code cells and your answers in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to for the graders to understand and follow.\nUse Quarto to render the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Thursday, 14th March 2024 at 11:59 pm.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\nMust be an HTML file rendered using Quarto (1 point). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission. (1 point)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 point)\nFinal answers to each question are written in the Markdown cells. (1 point)\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text. (1 point)\n\nThe maximum possible score in the assigment is 100 + 5 = 105 out of 100.",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Assignment5_Section20.html#cross-validation-for-a-regression-task-34-points",
    "href": "Assignment5_Section20.html#cross-validation-for-a-regression-task-34-points",
    "title": "Assignment 5",
    "section": "1) Cross-validation for a Regression Task (34 points)",
    "text": "1) Cross-validation for a Regression Task (34 points)\nFor this question, we are interested in using lower-level cross-validation tools for a regression task. Read the soc_ind.csv file. The column names should be clear on what the variables represent.\n\na)\ngdpPerCapita will be the response for this regression analysis. Before anything else, create two density plots to see if we should use it as it is or its log-transformed version. Justify your answer with the plots. (2 points)\nHint: sns.kdeplot\n\n\nb)\nCreate the proper response variable based on your answer in the previous part. The predictors are the rest of the variables except Index, geographic_location, and country. Create a predictor matrix accordingly. (2 points)\nUsing train_test_split from sklearn.model_selection create the training and test data. (You may need to read its documentation.) Use a 80%-20% train-test split and use random_state=2 for reproducible results. (3 points)\n\n\nc)\nOne-hot-encode and scale (in this order) both the training and the test dataset. (2 points)\n\n\nd)\nUsing a hyperparameter vector of np.logspace(2,0.5,200), cross-validate a Ridge Regression model. Use 10 folds and neg_mean_absolute_error as the scoring metric. (4 points) Save all your cross-validation (CV) scores in a numpy array. (1 point)\n\n\ne)\nUsing the array you created in the previous part, find the optimal hyperparameter value and the best CV score that corresponds to it. (1+1=2 points)\n\n\nf)\nCheck the best CV score you found in the previous part. What seems to be the issue with it? Remember that the response is GDP per capita of countries. (We will solve this issue later in this question.) (2 points)\n\n\ng)\nCreate a final model with the optimal hyperparameter value you found in the previous question. Return the test MAE. You need to return the test MAE in terms of actual GDP values for credit. (3 points)\n\n\nh)\nNow, it is time to calculate proper MAE values for the cross-validation results and optimize the hyperparameter value based on them. Using cross_val_predict, return the CV predictions for all hyperparameter values. Use a hyperparameter vector of np.logspace(2,0.5,200). (Same as part d.). (4 points) Save all the predictions in a DataFrame. (1 point)\n\n\ni)\nUsing the DataFrame you created in the previous part, find the optimal hyperparameter value and the best CV MAE that corresponds to it. (4 points)\nNote:\n\nThe MAE should be in terms of actual GDP values for credit.\nNo loops are allowed for this question. You may want to refresh your memory on .apply.\n\n\n\nj)\nWith the hyperparameter value you found in the previous part, train a final model and print its test MAE. (2 points) How does it compare to the test MAE you found with cross_val_score? (1 point) Why do you think this is the case? (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Assignment5_Section20.html#cross-validation-for-a-classification-task-36-points",
    "href": "Assignment5_Section20.html#cross-validation-for-a-classification-task-36-points",
    "title": "Assignment 5",
    "section": "2) Cross-validation for a Classification Task (36 points)",
    "text": "2) Cross-validation for a Classification Task (36 points)\nFor this question, we are interested in using lower-level cross-validation tools for a classification task. Read the diabetes_train.csv and diabetes_test.csv files. The Outcome variable represents whether the patient has diabetes or not. The rest of the variables are medical predictors we will use to predict the outcome.\n\na)\nCreate the training and the test data. (2 points)\n\n\nb)\nScale the datasets. (1 point)\n\n\nc)\nUsing a hyperparameter vector of Cs = np.logspace(2,-2,200), cross-validate a Lasso Classification model. Use 5 folds and the default scoring metric (which is accuracy.) (4 points) Save all your cross-validation (CV) scores in a numpy array. (1 point)\n\n\nd)\nUsing the array you created in the previous part, find the optimal hyperparameter value and the best CV score that corresponds to it. (1+1=2 points)\n\n\ne)\nCreate a final model with the optimal hyperparameter value you found in the previous question. Return the test accuracy, recall and AUC with a threshold of 0.5. (4 points) Which metric looks problematic? (1 point)\n\n\nf)\nWhat was the threshold cross_val_score used to return the accuracy scores? (1 point) How did that contribute to the problem in the previous part? (1 point)\n\n\ng)\nNow, it is time to return the CV predictions and optimize the threshold based on them. Using cross_val_predict, return the CV prediction probabilities for the best hyperparameter value your found in part d. (3 points) Note that you don’t need any loops for this question, because you already know which C value to use.\n\n\nh)\nUsing the output of the previous part, calculate and store the accuracy, recall and AUC of all possible threshold values from 0 to 1 with a stepsize of 0.001. (4 points)\n\n\ni)\nPlot the accuracy, recall and AUC values against the threshold on the same graph. (2 points) Include a legend. (1 point)\n\n\nj)\nIn the plot, you should see a threshold value where the accuracy, recall and AUC values are all the same. Find that value. (3 points)\nNote:\n\nThe metric values are the same if you round them to 2 digits after the decimal point. (That is just the rounded integer values if you multiply the metric values by 100 in the previous question.)\nTrial-and-error will not receive any credit for this question. You need to use logical indexing.\nnp.where and np.round should be helpful. (Along with the & operator.)\n\n\n\nk)\nUsing the threshold value you found in the previous question and the best hyperparameter value you found in part d, train a final Lasso Classification model and return its test accuracy, recall and AUC. (3 points) How do the accuracy and recall results compare to part e? (1 point) Did AUC change? (1 point) Why or why not? (1 point)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Assignment5_Section20.html#outliers-and-collinearity-30-points",
    "href": "Assignment5_Section20.html#outliers-and-collinearity-30-points",
    "title": "Assignment 5",
    "section": "3) Outliers and Collinearity (30 points)",
    "text": "3) Outliers and Collinearity (30 points)\nFor this question, we are interested in analyzing how removing the unnecessary observations and predictors improve the prediction and inference performance of our model. Read the Austin_Affordable_Housing_Train.csv and Austin_Affordable_Housing_Test.csv files. Each row represents a housing development in Austin, TX.\nThe City_Amount variable represents the amount (in USD) provided by the city of Austin to the development and it is the response for the regression task.\n\na)\nUse Market_Rate_Units, Total_Affordable_Units, Total_Accessible_Units, and Total_Units as four predictors to the linear regression model. Do not include any interaction terms and do not transform anything. Do not transform the response either.\nCreate the model using statsmodels. Print the model summary and the test RMSE. (3 points) Which predictor is statistically insignificant? (1 point)\n\n\nb)\nTo dive deeper into the statistical significance of the four predictors, create their correlation matrix first. (1 point) How many pairs seem to be highly correlated? (1 point) Why is this matrix not useful to detect collinearity in the model? (2 points)\n\n\nc)\nCreate the Variation Inflation Factor (VIF) table of the predictors. (1 point) Which predictors seem to be highly correlated? (1 point)\n\n\nd)\nRemove the predictor with the highest VIF and create the VIF table again. (1 point) Is there any collinearity left? (1 point)\n\n\ne)\nWith the remaining predictors, create the model again. Print its summary and test RMSE. (1 point) How did they change? Mention test RMSE (1 point), R-squared (1 point) and the statistical significance. (1 point). What is the reason behind these changes? (2 points)\n\n\nf)\nNow, it is time to clean out the observations. Find the influential points in the training dataset and filter them out. (5 points) How many observations did you discard? (1 point)\n\n\ng)\nRetrain the model in part e with the clean training dataset. Print the summary and the test RMSE. (1 point) How do the test RMSE and R-squared compare with the results in part e? (2 points) Do you also see a change in statistical significance? (1 point) Explain the reasons behind these changes. (2 points)",
    "crumbs": [
      "Assignments",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Assignment 5</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html",
    "href": "Prediction problem code sol.html",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "",
    "text": "A.1 Step 0\nAssuming missing value imputation, and data cleaning (such as converting price to numeric, etc.) has been done already. The cleaned train and test datasets are train_clean, and test_clean respectively.\n%reset\n\n# Imputing missing values & cleaning data\n%run \"missing_value_imputation.ipynb\"\n\nOnce deleted, variables cannot be recovered. Proceed (y/[n])? y",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-1",
    "href": "Prediction problem code sol.html#step-1",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.2 Step 1",
    "text": "A.2 Step 1\n\nA.2.1 Response transformation\nLet us visualize the distribution of the response price.\n\nsns.histplot(train_clean.price)\nplt.xlim([0,2000]);\n\n\n\n\n\n\n\n\nAs the response price is right-skewed, we will take the log-transform to reduce the skew.\n\ntrain_clean['log_price'] = np.log(train_clean.price)\n\nNo mistake!\n However, if you have mentioned something like the following, it is fine.\n When plotting the price to determine if it needed a transformation you set the x-axis limit to a max of 2000, this will prevent you from understanding the extent of the skew in the data, and also prevents you from noting what may be some extreme outliers in the data (like a value of 99,000) which may require further exploration if they turn out to be influential points. The solution would be to not include a limit in the plot. Using log of price to solve the right skew issue is the correct transformation.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-2",
    "href": "Prediction problem code sol.html#step-2",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.3 Step 2",
    "text": "A.3 Step 2\n\nA.3.1 Capping outliers\nAs outliers may distort the regression model, let us cap the outlying values of the transformed response.\n\n#Finding upper and lower quartiles and interquartile range\nq1 = np.percentile(train_clean['log_price'],25)\nq3 = np.percentile(train_clean['log_price'],75)\nintQ_range = q3-q1\n\n\n#Tukey's fences\nLower_fence = q1 - 1.5*intQ_range\nUpper_fence = q3 + 1.5*intQ_range\n\n\n# Capping the outlying values\ntrain_clean.loc[(train_clean.log_price &lt; Lower_fence), 'log_price'] = Lower_fence\ntrain_clean.loc[(train_clean.log_price &gt; Upper_fence), 'log_price'] = Upper_fence\n\nMistake 1: Should find outliers with respect to the model (1 point)\nCapping outliers is the wrong approach to take because outliers may not have much impact on the data if they are not influential points, and we may be able to explain these outliers easily in our model. For example we may find that these outliers have extremely large values for accommodates and this may be why they have such high values. Removing them prevents the model from addressing what may be things it easily could in a model. Removing points that could have been explained by the model will mean we will likely underestimate similar data points in the test data set.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-3",
    "href": "Prediction problem code sol.html#step-3",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.4 Step 3",
    "text": "A.4 Step 3\n\nA.4.1 Combining levels of categorical predictors with very few observations\nSome levels of categorical variables may have very few observations, which may lead to unreliable estimates of their regression coefficients. Thus, we will merge such levels into an ‘others’ category.\nThere are 76 levels of neighbourhood_cleansed some of which have very few observations.\n\ntrain_clean.neighbourhood_cleansed.value_counts().shape\n\n(76,)\n\n\n\ntrain_clean.neighbourhood_cleansed.value_counts().tail()\n\nSouth Deering    2\nWest Elsdon      2\nRiverdale        1\nGage Park        1\nEdison Park      1\nName: neighbourhood_cleansed, dtype: int64\n\n\n\ntest_clean.neighbourhood_cleansed.value_counts().shape\n\n(76,)\n\n\n\ntest_clean.neighbourhood_cleansed.value_counts().tail()\n\nAvalon Park        1\nSouth Deering      1\nMount Greenwood    1\nEdison Park        1\nChicago Lawn       1\nName: neighbourhood_cleansed, dtype: int64\n\n\nLet us merge levels of neighbourhood_cleansed that have less than 40 observations. Assume that 40 is a reasonable cut-off. There is no mistake in the choice of this cut-off.\n\n# Merging levels of neighbourhood_cleansed that have less than 40 observations in train data\ntrain_clean['neighbourhood_cleansed'] = train_clean[['id','neighbourhood_cleansed']].groupby(['neighbourhood_cleansed'], \n    group_keys=False).transform(lambda x:'others' if x.count() &lt; 40 else train_clean.loc[x.index,'neighbourhood_cleansed'])\n\n\n# Merging levels of neighbourhood_cleansed that have less than 40 observations in test data\ntest_clean['neighbourhood_cleansed'] = test_clean[['id','neighbourhood_cleansed']].groupby(['neighbourhood_cleansed'], \n    group_keys=False).transform(lambda x:'others' if x.count() &lt; 40 else test_clean.loc[x.index,'neighbourhood_cleansed'])\n\nSimilarly, we can merge levels of all such categorical variables, using appropriate cut-offs.\nMistake 2: Should keep neighbourhoods in test that are in train, instead of using the cut-off used in train (0.5 points)\n Some neighbourhoods that have more than 40 observations in train data may have less than 40 observations in test data. Such neighbourhoods will be renamed as ‘others’ in the test data, but not in the train data, which will lead to different distinct dummy variables for neighbourhoods in train and test data. To rectify that, you may create columns for those neighbourhoods in test data, and set all values as 0. However, that will be inaccurate because those neighbourhoods actually have listings in the test data, but they were renamed as ‘others’. So, the correction will be to simlpy rename all those neighbourhoods as ‘others’ in test data that are renamed as ‘others’ in the train data.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-4",
    "href": "Prediction problem code sol.html#step-4",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.5 Step 4",
    "text": "A.5 Step 4\n\nA.5.1 Dummy variables\nLet us convert categorical variables to dummy variables, as we intend to develop a ridge regression model. We will use the argument drop_first = True in the Pandas function get_dummies() as it reduces the size of the dataset without losing any information from the data.\n\n# Train data\ntrain_clean = pd.get_dummies(train_clean, drop_first = True)\n\n# Cleaning column names\ntrain_clean.columns = train_clean.columns.str.replace(' ', '_')\ntrain_clean.columns = train_clean.columns.str.replace('-', '_')\ntrain_clean.columns = train_clean.columns.str.replace('/', '_')\n\n# Test data\ntest_clean = pd.get_dummies(test_clean, drop_first = True)\n\n# Cleaning column names\ntest_clean.columns = test_clean.columns.str.replace(' ', '_')\ntest_clean.columns = test_clean.columns.str.replace('-', '_')\ntest_clean.columns = test_clean.columns.str.replace('/', '_')\n\nLet us check if we have the same number of columns in the train and test data.\n\ntrain_clean.shape\n\n(5000, 96)\n\n\n\ntest_clean.shape\n\n(3338, 91)\n\n\n\n# Columns in train data that are not in test data\nnp.setdiff1d(train_clean.columns, test_clean.columns)\n\narray(['log_price', 'neighbourhood_cleansed_Avondale',\n       'neighbourhood_cleansed_Douglas',\n       'neighbourhood_cleansed_Lincoln_Square', 'price'], dtype=object)\n\n\nThere are listings in 3 neighbourhoods in the train data that must also be in test data. Let us create the columns for those neighbourhoods in test data so that we have the same columns in both train and test datasets.\n\ntest_clean['neighbourhood_cleansed_Douglas'] = 0\ntest_clean['neighbourhood_cleansed_Lincoln_Square'] = 0\ntest_clean['neighbourhood_cleansed_Avondale'] = 0\n\nNo mistake!\nHowever, if you have explained the mistake of the previous step in this step, it is fine.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-5",
    "href": "Prediction problem code sol.html#step-5",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.6 Step 5",
    "text": "A.6 Step 5\n\nA.6.1 Ordinal variables\nHere is an idea to further reduce the size of the dataset without losing any information. We will use the dummy variables to create an ordinal variable, which will have the information of all the dummy variables that correspond to the same categorical variable.\nLet us replace the dummy variables of room_type with an ordinal variable.\n\n####----Train data processing---------####\n\n# making one big room_type column including all of the room types \ntrain_clean['room_type'] = (train_clean['room_type_Hotel_room'] * 1 +\n                   train_clean['room_type_Private_room'] * 2 + train_clean['room_type_Shared_room'] * 3 + \n                           (1-(train_clean['room_type_Hotel_room']+ train_clean['room_type_Private_room'] + \\\n                               train_clean['room_type_Shared_room']))*4  )\n\n# Drop the dummy variables\ntrain_clean.drop(columns = ['room_type_Hotel_room', 'room_type_Private_room', 'room_type_Shared_room'],inplace=True)\n\n\n####----Test data processing---------####\n\n# making one big room_type column including all of the room types \ntest_clean['room_type'] = (test_clean['room_type_Hotel_room'] * 1 +\n                   test_clean['room_type_Private_room'] * 2 + test_clean['room_type_Shared_room'] * 3 + \n                           (1-(test_clean['room_type_Hotel_room']+ test_clean['room_type_Private_room'] + \\\n                               test_clean['room_type_Shared_room']))*4  )\n\n# Drop the dummy variables\ntest_clean.drop(columns = ['room_type_Hotel_room', 'room_type_Private_room', 'room_type_Shared_room'],inplace=True)\n\nSimilarly, other dummy variables can be converted to ordinal variables to reduce data size without losing any information.\nMistake 3: Creating unreasonable constraint (1 point)\nOrdinal variables are not appropriate in this scenario because this relies on the assumption that there is an inherent hierarchy to the dummy variable which is not true. This step should be skipped (or only be applied to things we know are hierarchical in nature). Even if there was a hierarchy, another constraint it adds is that the difference between the expected response for any two consecutive levels of the hierarchy is the same.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-6",
    "href": "Prediction problem code sol.html#step-6",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.7 Step 6",
    "text": "A.7 Step 6\n\nA.7.1 Scaling data\nAs we plan to develop a ridge regression model, we will scale predictors.\n\nX_train = train_clean.drop(columns = ['price', 'log_price', 'id', 'host_id'])\nX_test = test_clean.drop(columns = ['id', 'host_id'])\n\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\n\nLet us check the shapes of train and test data to see if they are consistent.\n\nX_train.shape\n\n(5000, 90)\n\n\n\nX_test.shape\n\n(3338, 90)\n\n\nTrain and test datasets are consistent with regard to columns!\nMistake 4: Must use transform() on test data (1 point)\nfit_transform should not be used on test since we must scale the test data based on the mean and variance of the columns of the train data, and not the test data.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-7",
    "href": "Prediction problem code sol.html#step-7",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.8 Step 7",
    "text": "A.8 Step 7\n\nA.8.1 Two-factor interactions\nLet us include two-factor interactions of all predictors.\n\npoly = PolynomialFeatures(2, include_bias = False)\nX_train_poly = poly.fit_transform(X_train_scaled)\nX_test_poly = poly.transform(X_test_scaled)\n\nMistake 5: Must ensure that predictors are in the same order in train and test (0.5 points)\nNote that three predictors (or columns) were added to test data in step 4. These columns will be added to the extreme right hand side of the test data set. This implies that the order in which the columns appear in the train and test data is different. This, in turn, implies that the order in which the columns appear in the scaled train and test data sets is also different. However, we lose the column names in the scaled datasets in Step 6. So, the function transform() used here doesn’t throw an error that the columns must be in the same order, and creates the interactions. However, the interactions created in the train and test datasets are in a different order, which will lead to incorrect predictions on the test data.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-8",
    "href": "Prediction problem code sol.html#step-8",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.9 Step 8",
    "text": "A.9 Step 8\n\nA.9.1 Model hyperparameter optimization\nLet us find the optimal value of the regularization parameter for a ridge regression model.\n\nalphas = np.logspace(2,0.5,2)\nmodelcv = RidgeCV(alphas = alphas, scoring = 'neg_root_mean_squared_error').fit(X_train_poly, train_clean.log_price)\nmodelcv.alpha_\n\n100.0\n\n\nMistake 6: Should expand search space (1 point)\nIf the optimal hyperparameter value is found at the edge of the search space, then the search space must be expanded in that direction. The cost function is highly likely to be minimized further if we continue search in the direction in which the cost function is decreasing.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-9",
    "href": "Prediction problem code sol.html#step-9",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.10 Step 9",
    "text": "A.10 Step 9\n\nA.10.1 Cross-validation\nLet us find the 5-fold cross validated root mean squared error (RMSE) to check if the model with the optimal regularization parameter is good, before making predictions.\n\nnp.exp(np.mean(-cross_val_score(Ridge(alpha = modelcv.alpha_), X_train_poly, \n                train_clean.log_price, scoring = 'neg_root_mean_squared_error', n_jobs = -1)))\n\n30.617446257505094\n\n\nThe 5-fold cross-validated RMSE is only around $30. The model seems to be good!\nMistake 7: Incorrect back-transformation to units of response (1 point)\ncross_val_score() returns 5 errors in the units of log price. Taking the exponential of the averge of these errors does not convert the error into the units of the response. Here, the function cross_val_predict() needs to be used to get the predictions in units of log price, then those predictions should be exponentiated to get them in the units of price, and then the cross-validated error must be obtained by comparing the cross-validated predictions in the units of price to the actual untransformed price.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#step-10",
    "href": "Prediction problem code sol.html#step-10",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.11 Step 10",
    "text": "A.11 Step 10\n\nA.11.1 Model predictions\nLet us use the model corresponding to the optimal regularization parameter value to make predictions.\n\ntest_predictions = np.exp(modelcv.predict(X_test_poly))\n\nNo mistake",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Prediction problem code sol.html#order-of-steps",
    "href": "Prediction problem code sol.html#order-of-steps",
    "title": "Appendix A — Regression prediction problem: Common mistakes",
    "section": "A.12 Order of steps",
    "text": "A.12 Order of steps\nMistake 8: (1 point)\nSteps 7 must come before step 6, predictors must be scaled after including the two-factor interactions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Regression prediction problem: Common mistakes</span>"
    ]
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix B — Datasets, assignment and project files",
    "section": "",
    "text": "Datasets used in the book, assignment files, project files, and prediction problems report tempate can be found here",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Datasets, assignment and project files</span>"
    ]
  }
]