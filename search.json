[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science II with python (Class notes)",
    "section": "",
    "text": "Preface\nThese are class notes for the course STAT303-2. This is not the course text-book. You are required to read the relevant sections of the book as mentioned on the course website.\nThe course notes are currently being written, and will continue to being developed as the course progresses (just like the course textbook last quarter). Please report any typos / mistakes / inconsistencies / issues with the class notes / class presentations in your comments here. Thank you!"
  },
  {
    "objectID": "Lec1_SimpleLinearRegression.html",
    "href": "Lec1_SimpleLinearRegression.html",
    "title": "1  Simple Linear Regression",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a simple linear regression model that predicts car price based on engine size. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n  \n    \n      \n      carID\n      brand\n      model\n      year\n      transmission\n      mileage\n      fuelType\n      tax\n      mpg\n      engineSize\n      price\n    \n  \n  \n    \n      0\n      18473\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      11\n      Diesel\n      145\n      53.3282\n      3.0\n      37980\n    \n    \n      1\n      15064\n      bmw\n      6 Series\n      2019\n      Semi-Auto\n      10813\n      Diesel\n      145\n      53.0430\n      3.0\n      33980\n    \n    \n      2\n      18268\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      6\n      Diesel\n      145\n      53.4379\n      3.0\n      36850\n    \n    \n      3\n      18480\n      bmw\n      6 Series\n      2017\n      Semi-Auto\n      18895\n      Diesel\n      145\n      51.5140\n      3.0\n      25998\n    \n    \n      4\n      18492\n      bmw\n      6 Series\n      2015\n      Automatic\n      62953\n      Diesel\n      160\n      51.4903\n      3.0\n      18990\n    \n  \n\n\n\n\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~engineSize', data = train)\n\n\n#Using the fit() function of the 'ols' class to fit the model\nmodel = ols_object.fit()\n\n\n#Printing model summary which contains among other things, the model coefficients\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.390 \n\n\n  Model:                   OLS         Adj. R-squared:        0.390 \n\n\n  Method:             Least Squares    F-statistic:           3177. \n\n\n  Date:             Thu, 19 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 16:44:04       Log-Likelihood:      -53949. \n\n\n  No. Observations:        4960        AIC:                1.079e+05\n\n\n  Df Residuals:            4958        BIC:                1.079e+05\n\n\n  Df Model:                   1                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -4122.0357   522.260    -7.893  0.000 -5145.896 -3098.176\n\n\n  engineSize  1.299e+04   230.450    56.361  0.000  1.25e+04  1.34e+04\n\n\n\n\n  Omnibus:       1271.986   Durbin-Watson:         0.517\n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   6490.719\n\n\n  Skew:            1.137    Prob(JB):               0.00\n\n\n  Kurtosis:        8.122    Cond. No.               7.64\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe model equation is: car price = -4122.0357 + 12990 * engineSize\nVisualize the regression line\n\nsns.regplot(x = 'engineSize', y = 'price', data = train, color = 'orange',line_kws={\"color\": \"red\"})\nplt.xlim(-1,7)\n#Note that some of the engineSize values are 0. They are incorrect, and should ideally be imputed before developing the model.\n\n(-1.0, 7.0)\n\n\n\n\n\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs it's values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction doesn’t look too good. This is because we are just using one predictor - engine size. We can probably improve the model by adding more predictors when we learn multiple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n12995.1064515487\n\n\nThe root mean squared error in predicting car price is around $13k.\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n12810.109175214136\n\n\nThe residual standard error on the training data is close to the RMSE on the test data. This shows that the performance of the model on unknown data is comparable to its performance on known data. This implies that the model is not overfitting, which is good! In case we overfit a model on the training data, it’s performance on unknown data is likely to be worse than that on the training data.\nFind the confidence and prediction intervals of the predicted car price\n\n#Using the get_prediction() function associated with the 'model' object to get the intervals\nintervals = model.get_prediction(testf)\n\n\n#The function requires specifying alpha (probability of Type 1 error) instead of the confidence level to get the intervals\nintervals.summary_frame(alpha=0.05)\n\n\n\n\n\n  \n    \n      \n      mean\n      mean_se\n      mean_ci_lower\n      mean_ci_upper\n      obs_ci_lower\n      obs_ci_upper\n    \n  \n  \n    \n      0\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      1\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      2\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      3\n      8866.245277\n      316.580850\n      8245.606701\n      9486.883853\n      -16254.905974\n      33987.396528\n    \n    \n      4\n      47831.088340\n      468.949360\n      46911.740050\n      48750.436631\n      22700.782946\n      72961.393735\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2667\n      47831.088340\n      468.949360\n      46911.740050\n      48750.436631\n      22700.782946\n      72961.393735\n    \n    \n      2668\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      2669\n      8866.245277\n      316.580850\n      8245.606701\n      9486.883853\n      -16254.905974\n      33987.396528\n    \n    \n      2670\n      21854.526298\n      184.135754\n      21493.538727\n      22215.513869\n      -3261.551421\n      46970.604017\n    \n    \n      2671\n      21854.526298\n      184.135754\n      21493.538727\n      22215.513869\n      -3261.551421\n      46970.604017\n    \n  \n\n2672 rows × 6 columns\n\n\n\nShow the regression line predicting car price based on engine size for test data. Also show the confidence and prediction intervals for the car price.\n\ninterval_table = intervals.summary_frame(alpha=0.05)\n\n\nsns.scatterplot(x = testf.engineSize, y = pred_price,color = 'orange', s = 10)\nsns.lineplot(x = testf.engineSize, y = pred_price, color = 'red')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_lower, color = 'blue')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_upper, color = 'blue',label='_nolegend_')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_lower, color = 'green')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_upper, color = 'green')\nplt.legend(labels=[\"Regression line\",\"Confidence interval\", \"Prediction interval\"])\n\n<matplotlib.legend.Legend at 0x26a3a32c550>"
  },
  {
    "objectID": "Lec2_MultipleLinearRegression.html",
    "href": "Lec2_MultipleLinearRegression.html",
    "title": "2  Multiple Linear Regression",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a multiple linear regression model that predicts car price based on engine size, year, mileage, and mpg. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n  \n    \n      \n      carID\n      brand\n      model\n      year\n      transmission\n      mileage\n      fuelType\n      tax\n      mpg\n      engineSize\n      price\n    \n  \n  \n    \n      0\n      18473\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      11\n      Diesel\n      145\n      53.3282\n      3.0\n      37980\n    \n    \n      1\n      15064\n      bmw\n      6 Series\n      2019\n      Semi-Auto\n      10813\n      Diesel\n      145\n      53.0430\n      3.0\n      33980\n    \n    \n      2\n      18268\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      6\n      Diesel\n      145\n      53.4379\n      3.0\n      36850\n    \n    \n      3\n      18480\n      bmw\n      6 Series\n      2017\n      Semi-Auto\n      18895\n      Diesel\n      145\n      51.5140\n      3.0\n      25998\n    \n    \n      4\n      18492\n      bmw\n      6 Series\n      2015\n      Automatic\n      62953\n      Diesel\n      160\n      51.4903\n      3.0\n      18990\n    \n  \n\n\n\n\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.660 \n\n\n  Model:                   OLS         Adj. R-squared:        0.660 \n\n\n  Method:             Least Squares    F-statistic:           2410. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:07:25       Log-Likelihood:      -52497. \n\n\n  No. Observations:        4960        AIC:                1.050e+05\n\n\n  Df Residuals:            4955        BIC:                1.050e+05\n\n\n  Df Model:                   4                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -3.661e+06  1.49e+05   -24.593  0.000 -3.95e+06 -3.37e+06\n\n\n  year        1817.7366    73.751    24.647  0.000  1673.151  1962.322\n\n\n  mileage       -0.1474     0.009   -16.817  0.000    -0.165    -0.130\n\n\n  mpg          -79.3126     9.338    -8.493  0.000   -97.620   -61.006\n\n\n  engineSize  1.218e+04   189.969    64.107  0.000  1.18e+04  1.26e+04\n\n\n\n\n  Omnibus:       2450.973   Durbin-Watson:         0.541 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   31060.548\n\n\n  Skew:            2.045    Prob(JB):               0.00 \n\n\n  Kurtosis:       14.557    Cond. No.           3.83e+07 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nThe model equation is: estimated car price = -3.661e6 + 1818 * year -0.15 * mileage - 79.31 * mpg + 12180 * engineSize\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs it's values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction looks better as compared to the one with simple linear regression. This is because we have four predictors to help explain the variation in car price, instead of just one in the case of simple linear regression. Also, all the predictors have a significant relationship with price as evident from their p-values. Thus, all four of them are contributing in explaining the variation. Note the higher values of R2 as compared to the one in the case of simple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9956.82497993548\n\n\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n9563.74782917604\n\n\n\nsns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nsns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Predicted price')\nplt.ylabel('Residual')\n\nText(0, 0.5, 'Residual')\n\n\n\n\n\nWill the explained variation (R-squared) in car price always increase if we add a variable?\nShould we keep on adding variables as long as the explained variation (R-squared) is increasing?\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nnp.random.seed(1)\ntrain['rand_col'] = np.random.rand(train.shape[0])\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize+rand_col', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.661 \n\n\n  Model:                   OLS         Adj. R-squared:        0.660 \n\n\n  Method:             Least Squares    F-statistic:           1928. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:07:38       Log-Likelihood:      -52497. \n\n\n  No. Observations:        4960        AIC:                1.050e+05\n\n\n  Df Residuals:            4954        BIC:                1.050e+05\n\n\n  Df Model:                   5                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -3.662e+06  1.49e+05   -24.600  0.000 -3.95e+06 -3.37e+06\n\n\n  year        1818.1672    73.753    24.652  0.000  1673.578  1962.756\n\n\n  mileage       -0.1474     0.009   -16.809  0.000    -0.165    -0.130\n\n\n  mpg          -79.2837     9.338    -8.490  0.000   -97.591   -60.976\n\n\n  engineSize  1.218e+04   189.972    64.109  0.000  1.18e+04  1.26e+04\n\n\n  rand_col     451.1226   471.897     0.956  0.339  -474.004  1376.249\n\n\n\n\n  Omnibus:       2451.728   Durbin-Watson:         0.541 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   31040.331\n\n\n  Skew:            2.046    Prob(JB):               0.00 \n\n\n  Kurtosis:       14.552    Cond. No.           3.83e+07 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nAdding a variable with random values to the model (rand_col) increased the explained variation (R-squared). This is because the model has one more parameter to tune to reduce the residual squared error (RSS). However, the p-value of rand_col suggests that its coefficient is zero. Thus, using the model with rand_col may give poorer performance on unknown data, as compared to the model without rand_col. This implies that it is not a good idea to blindly add variables in the model to increase R-squared."
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-interactions",
    "title": "3  Variable interactions and transformations",
    "section": "3.1 Variable interactions",
    "text": "3.1 Variable interactions\n\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n  \n    \n      \n      carID\n      brand\n      model\n      year\n      transmission\n      mileage\n      fuelType\n      tax\n      mpg\n      engineSize\n      price\n    \n  \n  \n    \n      0\n      18473\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      11\n      Diesel\n      145\n      53.3282\n      3.0\n      37980\n    \n    \n      1\n      15064\n      bmw\n      6 Series\n      2019\n      Semi-Auto\n      10813\n      Diesel\n      145\n      53.0430\n      3.0\n      33980\n    \n    \n      2\n      18268\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      6\n      Diesel\n      145\n      53.4379\n      3.0\n      36850\n    \n    \n      3\n      18480\n      bmw\n      6 Series\n      2017\n      Semi-Auto\n      18895\n      Diesel\n      145\n      51.5140\n      3.0\n      25998\n    \n    \n      4\n      18492\n      bmw\n      6 Series\n      2015\n      Automatic\n      62953\n      Diesel\n      160\n      51.4903\n      3.0\n      18990\n    \n  \n\n\n\n\nUntil now, we have have assumed that the association between a predictor \\(X_j\\) and response \\(Y\\) does not depend on the value of other predictors. For example, the muliple linear regression model that we developed in Chapter 2 assumes that the average increase in price associated with a unit increase in engineSize is always $12,180, regardless of the value of other predictors. However, this assumption may be incorrect.\n\n3.1.1 Variable interaction between continuous predictors\nWe can relax this assumption by considering another predictor, called an interaction term. Let us assume that the average increase in price associated with a one-unit increase in engineSize depends on the model year of the car. In other words, there is an interaction between engineSize and year. This interaction can be included as a predictor, which is the product of engineSize and year. Note that there are several possible interactions that we can consider. Here the interaction between engineSize and year is just an example.\n\n#Considering interaction between engineSize and year\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.682 \n\n\n  Model:                   OLS         Adj. R-squared:        0.681 \n\n\n  Method:             Least Squares    F-statistic:           2121. \n\n\n  Date:             Sat, 21 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 14:45:04       Log-Likelihood:      -52338. \n\n\n  No. Observations:        4960        AIC:                1.047e+05\n\n\n  Df Residuals:            4954        BIC:                1.047e+05\n\n\n  Df Model:                   5                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                     coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept        5.606e+05  2.74e+05     2.048  0.041   2.4e+04   1.1e+06\n\n\n  year             -275.3833   135.695    -2.029  0.042  -541.405    -9.361\n\n\n  engineSize      -1.796e+06  9.97e+04   -18.019  0.000 -1.99e+06  -1.6e+06\n\n\n  year:engineSize   896.7687    49.431    18.142  0.000   799.861   993.676\n\n\n  mileage            -0.1525     0.008   -17.954  0.000    -0.169    -0.136\n\n\n  mpg               -84.3417     9.048    -9.322  0.000  -102.079   -66.604\n\n\n\n\n  Omnibus:       2330.413   Durbin-Watson:         0.524 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   29977.437\n\n\n  Skew:            1.908    Prob(JB):               0.00 \n\n\n  Kurtosis:       14.423    Cond. No.           7.66e+07 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.66e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the R-squared has increased as compared to the model in Chapter 2 since we added a predictor.\nThe model equation is:\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\beta_2*engineSize + \\beta_3*(year * engineSize) + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + (\\beta_2+\\beta_3*year)*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]or\n\\[\\begin{equation}\nprice = \\beta_0 + \\beta_1*year + \\tilde \\beta*engineSize + \\beta4*mileage + \\beta_5*mpg,\n\\end{equation}\\]\nSince \\(\\tilde \\beta\\) is a function of year, the association between engineSize and price is no longer a constant. A change in the value of year will change the association between price and engineSize.\nSubstituting the values of the coefficients: \\[\\begin{equation}\nprice = 5.606e5 - 275.3833*year + (-1.796e6+896.7687*year)*engineSize -0.1525*mileage -84.3417*mpg\n\\end{equation}\\]\nThus, for cars launched in the year 2010, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687 * 2010 \\(\\approx\\) \\$6,500, assuming all the other predictors are constant. However, for cars launched in the year 2020, the average increase in price for one liter increase in engine size is -1.796e6 + 896.7687*2020 \\(\\approx\\) \\$15,500 , assuming all the other predictors are constant.\nSimilarly, the equation can be re-arranged as: \\[\\begin{equation}\nprice = 5.606e5 +(-275.3833+896.7687*engineSize)*year -1.796e6*engineSize -0.1525*mileage -84.3417*mpg\n\\end{equation}\\]\nThus, for cars with an engine size of 2 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 2 \\(\\approx\\) \\$1500, assuming all the other predictors are constant. However, for cars with an engine size of 3 litres, the average increase in price for a one year newer model is -275.3833+896.7687 * 3 \\(\\approx\\) \\$2400, assuming all the other predictors are constant.\n\n#Computing the RMSE of the model with the interaction term\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9423.598872501092\n\n\nNote that the RMSE reduced as compared to that of the model in Chapter 2. This is because the interaction term between engineSize and year is significant and relaxes the assumption of constant association between price and engine size, and between price and year. This added flexibility makes the model better fit the data. Caution: Too much flexibility may lead to overfitting!\nNote that interaction terms corresponding to other variable pairs, and higher order interaction terms (such as those containing 3 or 4 variables) may also be significant and improve the model fit & thereby the prediction accuracy of the model.\n\n\n3.1.2 Including qualitative predictors in the model\nLet us develop a model for predicting price based on engineSize and the qualitative predictor transmission.\n\n#checking the distribution of values of transmission\ntrain.transmission.value_counts()\n\nManual       1948\nAutomatic    1660\nSemi-Auto    1351\nOther           1\nName: transmission, dtype: int64\n\n\nNote that the Other category of the variable transmission contains only a single observation, which is likely to be insufficient to train the model. We’ll remove that observation from the training data. Another option may be to combine the observation in the Other category with the nearest category, and keep it in the data.\n\ntrain_updated = train[train.transmission!='Other']\n\n\nols_object = smf.ols(formula = 'price~engineSize+transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.459 \n\n\n  Model:                   OLS         Adj. R-squared:        0.458 \n\n\n  Method:             Least Squares    F-statistic:           1400. \n\n\n  Date:             Sat, 21 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 14:45:14       Log-Likelihood:      -53644. \n\n\n  No. Observations:        4959        AIC:                1.073e+05\n\n\n  Df Residuals:            4955        BIC:                1.073e+05\n\n\n  Df Model:                   3                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept                  3042.6765   661.190     4.602  0.000  1746.451  4338.902\n\n\n  transmission[T.Manual]    -6770.6165   442.116   -15.314  0.000 -7637.360 -5903.873\n\n\n  transmission[T.Semi-Auto]  4994.3112   442.989    11.274  0.000  4125.857  5862.765\n\n\n  engineSize                 1.023e+04   247.485    41.323  0.000  9741.581  1.07e+04\n\n\n\n\n  Omnibus:       1575.518   Durbin-Watson:         0.579 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   11006.609\n\n\n  Skew:            1.334    Prob(JB):               0.00 \n\n\n  Kurtosis:        9.793    Cond. No.               11.4 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n#Visualizing the developed model\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept'], color = 'red')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], color = 'blue')\nsns.lineplot(x = x, y = model.params['engineSize']*x+model.params['Intercept']+model.params['transmission[T.Manual]'], color = 'green')\nplt.legend(labels=[\"Automatic\",\"Semi-Automatic\", \"Manual\"])\n\n<matplotlib.legend.Legend at 0x1c113cf8e20>\n\n\n\n\n\n\n\n3.1.3 Including qualitative predictors and its interaction with continuous predictor in the model\nNote that the qualitative predictor leads to fitting 3 parallel lines to the data, as there are 3 categories.\nHowever, note that we have made the constant association assumption. The fact that the lines are parallel means that the average increase in car price for one litre increase in engine size does not depend on the type of transmission. This represents a potentially serious limitation of the model, since in fact a change in engine size may have a very different association on the price of an automatic car versus a semi-automatic or manual car.\nThis limitation can be addressed by adding an interaction variable by multiplying engineSize with the dummy variables for semi-automatic and manual transmissions.\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~engineSize*transmission', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.479 \n\n\n  Model:                   OLS         Adj. R-squared:        0.478 \n\n\n  Method:             Least Squares    F-statistic:           909.9 \n\n\n  Date:             Sat, 21 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 14:45:16       Log-Likelihood:      -53550. \n\n\n  No. Observations:        4959        AIC:                1.071e+05\n\n\n  Df Residuals:            4953        BIC:                1.072e+05\n\n\n  Df Model:                   5                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                                          coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept                             3754.7238   895.221     4.194  0.000  1999.695  5509.753\n\n\n  transmission[T.Manual]                1768.5856  1294.071     1.367  0.172  -768.366  4305.538\n\n\n  transmission[T.Semi-Auto]            -5282.7164  1416.472    -3.729  0.000 -8059.628 -2505.805\n\n\n  engineSize                            9928.6082   354.511    28.006  0.000  9233.610  1.06e+04\n\n\n  engineSize:transmission[T.Manual]    -5285.9059   646.175    -8.180  0.000 -6552.695 -4019.117\n\n\n  engineSize:transmission[T.Semi-Auto]  4162.2428   552.597     7.532  0.000  3078.908  5245.578\n\n\n\n\n  Omnibus:       1379.846   Durbin-Watson:         0.622\n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   9799.471\n\n\n  Skew:            1.139    Prob(JB):               0.00\n\n\n  Kurtosis:        9.499    Cond. No.               30.8\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe model equation for the model with interactions is:\nAutomatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize\\),\nSemi-Automatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize + (-5282.7164+4162.2428*engineSize)\\),\nManual transmission: \\(price = 3754.7238 + 9928.6082 * engineSize +(1768.5856-5285.9059*engineSize)\\), or\nAutomatic transmission: \\(price = 3754.7238 + 9928.6082 * engineSize\\),\nSemi-Automatic transmission: \\(price = -1527 + 7046 * engineSize\\),\nManual transmission: \\(price = 5523 + 4642 * engineSize\\),\n\n#Visualizing the developed model with interaction terms\nx = np.linspace(train_updated.engineSize.min(),train_updated.engineSize.max(),100)\nplt.plot(x, model.params['engineSize']*x+model.params['Intercept'], '-r', label='Automatic')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Semi-Auto]'])*x+model.params['Intercept']+model.params['transmission[T.Semi-Auto]'], '-b', label='Semi-Automatic')\nplt.plot(x, (model.params['engineSize']+model.params['engineSize:transmission[T.Manual]'])*x+model.params['Intercept']+model.params['transmission[T.Manual]'], '-g', label='Manual')\nplt.legend(loc='upper left')\nplt.xlabel('engine size')\nplt.ylabel('price')\nplt.show()\n\n\n\n\nNote the interaction term adds flexibility to the model.\nThe slope of the regression line for semi-automatic cars is the largest. This suggests that increase in engine size is associated with a higher increase in car price for semi-automatic cars, as compared to other cars."
  },
  {
    "objectID": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "href": "Lec3_VariableTransformations_and_Interactions.html#variable-transformations",
    "title": "3  Variable interactions and transformations",
    "section": "3.2 Variable transformations",
    "text": "3.2 Variable transformations\nSo far we have considered only a linear relationship between the predictors and the response. However, the relationship may be non-linear.\nConsider the regression plot of price on mileage\n\nsns.regplot(x = train_updated.mileage, y =train_updated.price,color = 'orange', line_kws = {'color':'blue'})\n\n<AxesSubplot:xlabel='mileage', ylabel='price'>\n\n\n\n\n\nIt seems like a quadratic curve may better fit the points.\n\n#Including mileage squared as a predictor and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.271 \n\n\n  Model:                   OLS         Adj. R-squared:        0.271 \n\n\n  Method:             Least Squares    F-statistic:           920.6 \n\n\n  Date:             Sun, 22 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 16:13:39       Log-Likelihood:      -54382. \n\n\n  No. Observations:        4959        AIC:                1.088e+05\n\n\n  Df Residuals:            4956        BIC:                1.088e+05\n\n\n  Df Model:                   2                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                     coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept         3.44e+04   332.710   103.382  0.000  3.37e+04   3.5e+04\n\n\n  mileage            -0.5662     0.017   -33.940  0.000    -0.599    -0.534\n\n\n  I(mileage ** 2)  2.629e-06  1.56e-07    16.813  0.000  2.32e-06  2.94e-06\n\n\n\n\n  Omnibus:       2362.973   Durbin-Watson:         0.325 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   22427.952\n\n\n  Skew:            2.052    Prob(JB):               0.00 \n\n\n  Kurtosis:       12.576    Cond. No.           4.81e+09 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 4.81e+09. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Visualizing the regression line\npred_price = model.predict(train_updated)\nsns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\n\n<AxesSubplot:xlabel='mileage', ylabel='price'>\n\n\n\n\n\n\n#Including mileage squared as a predictor and developing the model\nols_object = smf.ols(formula = 'price~mileage+I(mileage**2)+I(mileage**3)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.283 \n\n\n  Model:                   OLS         Adj. R-squared:        0.283 \n\n\n  Method:             Least Squares    F-statistic:           652.3 \n\n\n  Date:             Sun, 22 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 16:14:29       Log-Likelihood:      -54340. \n\n\n  No. Observations:        4959        AIC:                1.087e+05\n\n\n  Df Residuals:            4955        BIC:                1.087e+05\n\n\n  Df Model:                   3                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                     coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept        3.598e+04   371.926    96.727  0.000  3.52e+04  3.67e+04\n\n\n  mileage            -0.7742     0.028   -27.634  0.000    -0.829    -0.719\n\n\n  I(mileage ** 2)  6.875e-06  4.87e-07    14.119  0.000  5.92e-06  7.83e-06\n\n\n  I(mileage ** 3) -1.823e-11  1.98e-12    -9.199  0.000 -2.21e-11 -1.43e-11\n\n\n\n\n  Omnibus:       2380.788   Durbin-Watson:         0.321 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   23039.307\n\n\n  Skew:            2.065    Prob(JB):               0.00 \n\n\n  Kurtosis:       12.719    Cond. No.           7.73e+14 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 7.73e+14. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\n\n#Visualizing the regression line\npred_price = model.predict(train_updated)\nsns.scatterplot(x = 'mileage', y = 'price', data = train_updated, color = 'orange')\nsns.lineplot(x = train_updated.mileage, y = pred_price, color = 'blue')\n\n<AxesSubplot:xlabel='mileage', ylabel='price'>\n\n\n\n\n\nNote that the fit seems slighty better for mileage less than 150k. The model should not be used to predict car prices of cars with a mileage higher than 150k.\nLet’s update the model created earlier (in the beginning of this chapter) to include the transformed predictor.\n\n#Model with an interaction term and a variable transformation term\nols_object = smf.ols(formula = 'price~year*engineSize+mileage+mpg+I(mileage**2)', data = train_updated)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.702 \n\n\n  Model:                   OLS         Adj. R-squared:        0.702 \n\n\n  Method:             Least Squares    F-statistic:           1947. \n\n\n  Date:             Sun, 22 Jan 2023   Prob (F-statistic):    0.00  \n\n\n  Time:                 16:13:46       Log-Likelihood:      -52162. \n\n\n  No. Observations:        4959        AIC:                1.043e+05\n\n\n  Df Residuals:            4952        BIC:                1.044e+05\n\n\n  Df Model:                   6                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                     coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept         1.53e+06   2.7e+05     5.671  0.000     1e+06  2.06e+06\n\n\n  year             -755.7419   133.791    -5.649  0.000 -1018.031  -493.453\n\n\n  engineSize      -2.022e+06  9.72e+04   -20.803  0.000 -2.21e+06 -1.83e+06\n\n\n  year:engineSize  1008.6993    48.196    20.929  0.000   914.215  1103.184\n\n\n  mileage            -0.3548     0.014   -25.973  0.000    -0.382    -0.328\n\n\n  mpg               -54.7450     8.896    -6.154  0.000   -72.185   -37.305\n\n\n  I(mileage ** 2)  1.926e-06  1.04e-07    18.536  0.000  1.72e-06  2.13e-06\n\n\n\n\n  Omnibus:       2355.448   Durbin-Watson:         0.562 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   38317.404\n\n\n  Skew:            1.857    Prob(JB):               0.00 \n\n\n  Kurtosis:       16.101    Cond. No.           6.40e+12 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 6.4e+12. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nNote that the R-squared has increased as compared to the model with just the interaction term.\n\n#Computing RMSE on test data\npred_price = model.predict(testf)\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9074.494088619422\n\n\nNote that the prediction accuracy of the model has further increased, as the RMSE has reduced. The transformed predictor is statisically significant and provides additional flexibility to better capture the trend in the data, leading to an increase in prediction accuracy."
  },
  {
    "objectID": "Assignment 1.html#instructions",
    "href": "Assignment 1.html#instructions",
    "title": "Appendix A — Assignment A",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Tuesday, 17th January 2023 at 11:59 pm.\nThere is a bonus question worth 5 points.\nFive points are for properly formatting the assignment. The breakdown is as follows:\n\n\nMust be an HTML file rendered using Quarto (1 pt); If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g., printouts of the working directory should not be included in the final submission (1 pt).\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt).\nFinal answers of each question are written in Markdown cells (1 pt).\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt).\n\n\nThe maximum possible score in the assigment is 95 + 5 (formatting) + 5 (bonus question) = 105 out of 100. There is no partial credit for the bonus question."
  },
  {
    "objectID": "Assignment 1.html#regression-vs-classification-prediction-vs-inference",
    "href": "Assignment 1.html#regression-vs-classification-prediction-vs-inference",
    "title": "Appendix A — Assignment A",
    "section": "A.1 Regression vs Classification; Prediction vs Inference",
    "text": "A.1 Regression vs Classification; Prediction vs Inference\nExplain (1) whether each scenario is a classification or regression problem, and (2) whether we are most interested in inference or prediction. Answers to both parts must be supported by a justification.\n\nA.1.1 \nConsider a company that is interested in conducting a marketing campaign. The goal is to identify individuals who are likely to respond positively to a marketing campaign, based on observations of demographic variables (such as age, gender, income, etc.) measured on each individual.\n(2+2 points)\n\n\nA.1.2 \nConsider that the company mentioned in the previous question is interested in understanding the impact of advertising promotions in different media types on the company sales. For example, the company is interested in the question, ‘how large of an increase in sales is associated with a given increase in radio vis-a-vis TV advertising?’\n(2+2 points)\n\n\nA.1.3 \nConsider a company selling furniture is interested in the finding the association between demographic characterisitcs of customers (such as age, gender, income, etc.) and their probability of purchase of a particular company product.\n(2+2 points)\n\n\nA.1.4 \nWe are interested in predicting the % change in the USD/Euro exchange rate in relation to the weekly changes in the world stock markets. Hence we collect weekly data for all of 2022. For each week we record the % change in the USD/Euro, the % change in the US market, the % change in the British market, and the % change in the German market.\n(2+2 points)"
  },
  {
    "objectID": "Assignment 1.html#rmse-vs-mae",
    "href": "Assignment 1.html#rmse-vs-mae",
    "title": "Appendix A — Assignment A",
    "section": "A.2 RMSE vs MAE",
    "text": "A.2 RMSE vs MAE\n\nA.2.1 \nDescribe a regression problem, where it will be more appropriate to assess the model accuracy using the root mean squared error (RMSE) metric as compared to the mean absolute error (MAE) metric.\nNote: Don’t use the examples presented in class\n(4 points)\n\n\nA.2.2 \nDescribe a regression problem, where it will be more appropriate to assess the model accuracy using the mean absolute error (MAE) metric as compared to the root mean squared error (RMSE) metric.\nNote: Don’t use the examples presented in class\n(4 points)"
  },
  {
    "objectID": "Assignment 1.html#fnr-vs-fpr",
    "href": "Assignment 1.html#fnr-vs-fpr",
    "title": "Appendix A — Assignment A",
    "section": "A.3 FNR vs FPR",
    "text": "A.3 FNR vs FPR\n\nA.3.1 \nA classification model is developed to predict those customers who will respond positively to a company’s tele-marketing campaign. All those customers that are predicted to respond positively to the campaign will be called by phone to buy the product being marketed. If the customer being called purchases the product (\\(y = 1\\)), the company will get a profit of $100. On the other hand, if they are called and they don’t purchase (\\(y = 0\\)), the company will have a loss of $1. Among FPR (False positive rate) and FNR (False negative rate), which metric is more important to be minimized to reduce the loss associated with misclassification? Justify your answer.\nIn your justification, you must clearly interpret False Negatives (FN) and False Postives (FP) first.\nAssumption: Assume that based on the past marketing campaigns, around 50% of the customers will actually respond positively to the campaign.\n(4 points)\n\n\nA.3.2 \nCan the answer to the previous question change if the assumption stated in the question is false? Justify your answer.\n(6 points)"
  },
  {
    "objectID": "Assignment 1.html#petrol-consumption",
    "href": "Assignment 1.html#petrol-consumption",
    "title": "Appendix A — Assignment A",
    "section": "A.4 Petrol consumption",
    "text": "A.4 Petrol consumption\nRead the dataset petrol_consumption_train.csv. It contains the following five columns:\nPetrol_tax: Petrol tax (cents per gallon)\nPer_capita_income: Average income (dollars)\nPaved_highways: Paved Highways (miles)\nProp_license: Proportion of population with driver’s licenses\nPetrol_consumption: Consumption of petrol (millions of gallons)\n\nA.4.1 \nMake a pairwise plot of all the variables in the dataset. Which variable seems to have the highest linear correlation with Petrol_consumption? Let this variable be predictor P. Note: If you cannot figure out P by looking at the visualization, you may find the pairwise linear correlation coefficient to identify P.\n(4 points)\n\n\nA.4.2 \nFit a simple linear regression model to predict Petrol_consumption based on predictor P (identified in the previous part). Print the model summary.\n(4 points)\n\n\nA.4.3 \nInterpret the coefficient of P. What is the increase in petrol consumption for an increase of 0.05 in P?\n(2+2 points)\n\n\nA.4.4 \nDoes petrol consumption have a statistically significant relationship with the predictor P? Justify your answer.\n(4 points)\n\n\nA.4.5 \nWhat is the R-squared? Interpret its value.\n(4 points)\n\n\nA.4.6 \nUse the model developed above to estimate the petrol consumption for a state in which 50% of the population has a driver’s license. What are the confidence and prediction intervals for your estimate? Which interval includes the irreducible error?\n(4+3+3+2 = 12 points)\n\n\nA.4.7 \nUse the model developed above to estimate the petrol consumption for a state in which 10% of the population has a driver’s license. Are you getting a reasonable estimate? Why or why not?\n(5 points)\n\n\nA.4.8 \nWhat is the residual standard error of the model?\n(4 points)\n\n\nA.4.9 \nUsing the model developed above, predict the petrol consumption for the observations in petrol_consumption_test.csv. Find the RMSE (Root mean squared error). Include the units of RMSE in your answer.\n(5 points)\n\n\nA.4.10 \nBased on the answers to the previous two questions, do you think the model is overfitting? Justify your answer.\n(4 points)\nMake a scatterplot of Petrol_consumption vs Prop_license using petrol_consumption_test.csv. Over the scatterplot, plot the regression line, the prediction interval, and the confidence interval. Distinguish the regression line, prediction interval lines, and confidence interval lines with the following colors. Include the legend as well.\n\nRegression line: red\nConfidence interval lines: blue\nPrediction interval lines: green\n\n(4 points)\nAmong the confidence and prediction intervals, which interval is wider, and why?\n(1+2 points)\n\n\nA.4.11 \nFind the correlation between Petrol_consumption and the rest of the variables in petrol_consumption_train.csv. Based on the correlations, a simple linear regression model with which predictor will have the least R-squared value for predicting Petrol_consumption. Don’t develop any linear regression models.\n(4 points)\nBonus point question\n(5 points - no partial credit)\n\n\nA.4.12 \nFit a simple linear regression model to predict Petrol_consumption based on predictor P, but without an intercept term.\n(you must answer this correctly to qualify for earning bonus points)\n\n\nA.4.13 \nEstimate the petrol consumption for the observations in petrol_consumption_test.csv using the model in developed in the previous question. Find the RMSE.\n(you must answer this correctly to qualify for earning bonus points)\n\n\nA.4.14 \nThe RMSE for the models with and without the intercept are similar, which indicates that both models are almost equally good. However, the R-squared for the model without intercept is much higher than the R-squared for the model with the intercept. Why? Justify your answer.\n(5 points)"
  },
  {
    "objectID": "Assignment B.html#instructions",
    "href": "Assignment B.html#instructions",
    "title": "Appendix B — Assignment B",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThe assignment is worth 100 points, and is due on Thursday, 26th January 2023 at 11:59 pm.\nFive points are properly formatting the assignment. The breakdown is as follows:\n\n\nMust be an HTML file rendered using Quarto (1 pt). If you have a Quarto issue, you must mention the issue & quote the error you get when rendering using Quarto in the comments section of Canvas, and submit the ipynb file.\nNo name can be written on the assignment, nor can there be any indicator of the student’s identity—e.g. printouts of the working directory should not be included in the final submission (1 pt)\nThere aren’t excessively long outputs of extraneous information (e.g. no printouts of entire data frames without good reason, there aren’t long printouts of which iteration a loop is on, there aren’t long sections of commented-out code, etc.) (1 pt)\nFinal answers of each question are written in Markdown cells (1 pt).\nThere is no piece of unnecessary / redundant code, and no unnecessary / redundant text (1 pt)"
  },
  {
    "objectID": "Assignment B.html#multiple-linear-regression",
    "href": "Assignment B.html#multiple-linear-regression",
    "title": "Appendix B — Assignment B",
    "section": "B.1 Multiple linear regression",
    "text": "B.1 Multiple linear regression\nA study was conducted on 97 men with prostate cancer who were due to receive a radical prostatectomy. The dataset prostate.csv contains data on 9 measurements made on these 97 men. The description of variables can be found here:\n\nB.1.1 Training MLR\nFit a linear regression model with lpsa as the response and all the other variables as predictors. Write down the equation to predict lpsa based on the other eight variables.\n(2+2 points)\n\n\nB.1.2 Model significance\nIs the overall regression significant at 5% level? Justify your answer.\n(2 points)\n\n\nB.1.3 Coefficient interpretation\nInterpret the coefficient of svi.\n(2 points)\n\n\nB.1.4 Variable significance\nReport the \\(p\\)-values for gleason and age. What do you conclude about the significance of these variables?\n(2+2 points)\n\n\nB.1.5 Variable significance from confidence interval\nWhat is the 95% confidence interval for the coefficient of age? Can you conclude anything about its significance based on the confidence interval?\n(2+2 points)\n\n\nB.1.6 \\(p\\)-value\nFit a simple linear regression on lpsa against gleason. What is the \\(p\\)-value for gleason?\n(1+1 points)\n\n\nB.1.7 Predictor significance in presence / absence of other predictors\nIs the predictor gleason statistically significant in the model developed in the previous question (B.1.6)?\nWas gleason statistically significant in the model developed in the first question (B.1.1) with multiple predictors?\nDid the statistical significance of gleason change in the absence of other predictors? Why or why not?\n(1+1+4 points)\n\n\nB.1.8 Prediction\nPredict lpsa of a 65-year old man with lcavol = 1.35, lweight = 3.65, lbph = 0.1, svi = 0.22, lcp = -0.18, gleason = 6.75, and pgg45 = 25 and find 95% prediction intervals.\n(2 points)\n\n\nB.1.9 Variable selection\nFind the largest subset of predictors in the model developed in the first question (B.1.1), such that their coefficients are zero, i.e., none of the predictors in the subset are statistically significant.\nDoes the model \\(R\\)-squared change a lot if you remove the set of predictors identifed above from the model in the first question (B.1.1)?\nHint: You may use the f_test() method to test hypotheses.\n(4+1 points)"
  },
  {
    "objectID": "Assignment B.html#using-mlr-coefficients-and-variable-transformation",
    "href": "Assignment B.html#using-mlr-coefficients-and-variable-transformation",
    "title": "Appendix B — Assignment B",
    "section": "B.2 Using MLR coefficients and variable transformation",
    "text": "B.2 Using MLR coefficients and variable transformation\nThe dataset infmort.csv gives the infant mortality of different countries in the world. The column mortality contains the infant mortality in deaths per 1000 births.\n\nB.2.1 Data visualisation\nMake the following plots:\n\na boxplot of log(mortality) against region (note that a plot of log(mortality) against region better distinguishes the mortality among regions as compared to a plot of mortality against region,\na boxplot of income against region, and\na scatter plot of mortality against income.\n\nWhat trends do you see in these plots? Mention the trend separately for each plot.\n(3+2 points)\n\n\nB.2.2 Removing effect of predictor from response\nEurope seems to have the lowest infant mortality, but it also has the highest per capita annual income. We want to see if Europe still has the lowest mortality if we remove the effect of income from the mortality. We will answer this question with the following steps.\n\nB.2.2.1 Variable transformation\nPlot:\n\nmortality against income,\nlog(mortality) against income,\nmortality against log(income), and\nlog(mortality) against log(income).\n\nBased on the plots, postulate an appropriate model to predict mortality as a function of income. Print the model summary.\n(2+4 points)\n\n\nB.2.2.2 Model update\nUpdate the model developed in the previous question by adding region as a predictor. Print the model summary.\n(2 points)\nUse the model developed in the previous question to compute adjusted_mortality for each observation in the data, where adjusted mortality is the mortality after removing the estimated effect of income. Make a boxplot of log(adjusted_mortality) against region.\n(4+2 points)\n\n\n\nB.2.3 Data visualisation after removing effect of predictor from response\nFrom the plot in the previous question:\n\nDoes Europe still seem to have the lowest mortality as compared to other regions after removing the effect of income from mortality?\nAfter adjusting for income, is there any change in the mortality comparison among different regions. Compare the plot developed in the previous question to the plot of log(mortality) against region developed earlier (B.2.1) to answer this question.\n\nHint: Do any African / Asian / American countries seem to do better than all the European countries with regard to mortality after adjusting for income?\n(1+3 points)"
  },
  {
    "objectID": "Assignment B.html#variable-transformations-and-interactions",
    "href": "Assignment B.html#variable-transformations-and-interactions",
    "title": "Appendix B — Assignment B",
    "section": "B.3 Variable transformations and interactions",
    "text": "B.3 Variable transformations and interactions\nThe dataset soc_ind.csv contains the GDP per capita of some countries along with several social indicators.\n\nB.3.1 Training SLR\nFor a simple linear regression model predicting gdpPerCapita. Which predictor will provide the best model fit (ignore categorical predictors)? Let that predictor be \\(P\\).\n(2 points)\n\n\nB.3.2 Linearity in relationship\nMake a scatterplot of gdpPerCapita vs \\(P\\). Does the relationship between gdpPerCapita and \\(P\\) seem linear or non-linear?\n(1 + 2 points)\n\n\nB.3.3 Variable transformation\nIf the relationship identified in the previous question is non-linear, identify and include transformation(s) of the predictor \\(P\\) in the model to improve the model fit.\nMention the predictors of the transformed model, and report the change in the \\(R\\)-squared value of the transformed model as compared to the simple linear regression model with only \\(P\\).\n(4+4 points)\n\n\nB.3.4 Model visualisation with transformed predictor\nPlot the regression curve of the transformed model (developed in the previous question) over the scatterplot in (b) to visualize model fit. Also make the regression line of the simple linear regression model with only \\(P\\) on the same plot.\n(3 + 1 points)\n\n\nB.3.5 Training MLR with qualitative predictor\nDevelop a model to predict gdpPerCapita with \\(P\\) and continent as predictors.\n\nInterpert the intercept term.\nFor a given value of \\(P\\), are there any continents that do not have a signficant difference between their mean gdpPerCapita and that of Africa? If yes, then which ones, and why? If no, then why not? Consider a significance level of 5%.\n\n(4 + 4 points)\n\n\nB.3.6 Variable interaction\nThe model developed in the previous question has a limitation. It assumes that the increase in mean gdpPerCapita with a unit increase in \\(P\\) does not depend on the continent.\n\nEliminate this limitation by including interaction of continent with \\(P\\) in the model developed in the previous question. Print the model summary of the model with interactions.\nInterpret the coefficient of any one of the interaction terms.\n\n(4 + 4 points)\n\n\nB.3.7 Model visualisation with qualitative predictor\nUse the model developed in the previous question to plot the regression lines for Africa, Asia, and Europe. Put gdpPerCapita on the vertical axis and \\(P\\) on the horizontal axis. Use a legend to distinguish among the regression lines of the three continents.\n(4 points)\n\n\nB.3.8 Model interpretation\nBased on the plot develop in the previous question, which continent has the highest increase in mean gdpPerCapita for a unit increase in \\(P\\), and which one has the least? Justify your answer.\n(2+2 points)"
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix C — Datasets, assignment and project files",
    "section": "",
    "text": "Datasets used in the book, assignment files, and project files can be found here"
  }
]