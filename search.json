[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science II with python (Class notes)",
    "section": "",
    "text": "Preface\nThese are class notes for the course STAT303-2. This is not the course text-book. You are required to read the relevant sections of the book as mentioned on the course website."
  },
  {
    "objectID": "Lec1_SimpleLinearRegression.html",
    "href": "Lec1_SimpleLinearRegression.html",
    "title": "1  Simple Linear Regression",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a simple linear regression model that predicts car price based on engine size. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n  \n    \n      \n      carID\n      brand\n      model\n      year\n      transmission\n      mileage\n      fuelType\n      tax\n      mpg\n      engineSize\n      price\n    \n  \n  \n    \n      0\n      18473\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      11\n      Diesel\n      145\n      53.3282\n      3.0\n      37980\n    \n    \n      1\n      15064\n      bmw\n      6 Series\n      2019\n      Semi-Auto\n      10813\n      Diesel\n      145\n      53.0430\n      3.0\n      33980\n    \n    \n      2\n      18268\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      6\n      Diesel\n      145\n      53.4379\n      3.0\n      36850\n    \n    \n      3\n      18480\n      bmw\n      6 Series\n      2017\n      Semi-Auto\n      18895\n      Diesel\n      145\n      51.5140\n      3.0\n      25998\n    \n    \n      4\n      18492\n      bmw\n      6 Series\n      2015\n      Automatic\n      62953\n      Diesel\n      160\n      51.4903\n      3.0\n      18990\n    \n  \n\n\n\n\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~engineSize', data = train)\n\n\n#Using the fit() function of the 'ols' class to fit the model\nmodel = ols_object.fit()\n\n\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.390 \n\n\n  Model:                   OLS         Adj. R-squared:        0.390 \n\n\n  Method:             Least Squares    F-statistic:           3177. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:06:42       Log-Likelihood:      -53949. \n\n\n  No. Observations:        4960        AIC:                1.079e+05\n\n\n  Df Residuals:            4958        BIC:                1.079e+05\n\n\n  Df Model:                   1                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -4122.0357   522.260    -7.893  0.000 -5145.896 -3098.176\n\n\n  engineSize  1.299e+04   230.450    56.361  0.000  1.25e+04  1.34e+04\n\n\n\n\n  Omnibus:       1271.986   Durbin-Watson:         0.517\n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   6490.719\n\n\n  Skew:            1.137    Prob(JB):               0.00\n\n\n  Kurtosis:        8.122    Cond. No.               7.64\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n#Printing model summary which contains among other things, the model coefficients\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.390 \n\n\n  Model:                   OLS         Adj. R-squared:        0.390 \n\n\n  Method:             Least Squares    F-statistic:           3177. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:06:43       Log-Likelihood:      -53949. \n\n\n  No. Observations:        4960        AIC:                1.079e+05\n\n\n  Df Residuals:            4958        BIC:                1.079e+05\n\n\n  Df Model:                   1                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -4122.0357   522.260    -7.893  0.000 -5145.896 -3098.176\n\n\n  engineSize  1.299e+04   230.450    56.361  0.000  1.25e+04  1.34e+04\n\n\n\n\n  Omnibus:       1271.986   Durbin-Watson:         0.517\n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   6490.719\n\n\n  Skew:            1.137    Prob(JB):               0.00\n\n\n  Kurtosis:        8.122    Cond. No.               7.64\n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\nThe model equation is: car price = -4122.0357 + 12990 * engineSize\nVisualize the regression line\n\nsns.regplot(x = 'engineSize', y = 'price', data = train, color = 'orange',line_kws={\"color\": \"red\"})\nplt.xlim(-1,7)\n#Note that some of the engineSize values are 0. They are incorrect, and should ideally be imputed before developing the model.\n\n(-1.0, 7.0)\n\n\n\n\n\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs it's values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction doesn’t look too good. This is because we are just using one predictor - engine size. We can probably improve the model by adding more predictors when we learn multiple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n12995.1064515487\n\n\nThe root mean squared error in predicting car price is around $13k.\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n12810.109175214136\n\n\nThe residual standard error on the training data is close to the RMSE on the test data. This shows that the performance of the model on unknown data is comparable to its performance on known data. This implies that the model is not overfitting, which is good! In case we overfit a model on the training data, it’s performance on unknonwn data is likely to be worse than that on the training data.\nFind the confidence and prediction intervals of the predicted car price\n\n#Using the get_prediction() fucntion associated with the 'model' object to get the intervals\nintervals = model.get_prediction(testf)\n\n\n#The function requires specifying alpha (probability of Type 1 error) instead of the confidence level to get the intervals\nintervals.summary_frame(alpha=0.05)\n\n\n\n\n\n  \n    \n      \n      mean\n      mean_se\n      mean_ci_lower\n      mean_ci_upper\n      obs_ci_lower\n      obs_ci_upper\n    \n  \n  \n    \n      0\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      1\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      2\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      3\n      8866.245277\n      316.580850\n      8245.606701\n      9486.883853\n      -16254.905974\n      33987.396528\n    \n    \n      4\n      47831.088340\n      468.949360\n      46911.740050\n      48750.436631\n      22700.782946\n      72961.393735\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2667\n      47831.088340\n      468.949360\n      46911.740050\n      48750.436631\n      22700.782946\n      72961.393735\n    \n    \n      2668\n      34842.807319\n      271.666459\n      34310.220826\n      35375.393812\n      9723.677232\n      59961.937406\n    \n    \n      2669\n      8866.245277\n      316.580850\n      8245.606701\n      9486.883853\n      -16254.905974\n      33987.396528\n    \n    \n      2670\n      21854.526298\n      184.135754\n      21493.538727\n      22215.513869\n      -3261.551421\n      46970.604017\n    \n    \n      2671\n      21854.526298\n      184.135754\n      21493.538727\n      22215.513869\n      -3261.551421\n      46970.604017\n    \n  \n\n2672 rows × 6 columns\n\n\n\nShow the regression line predicting car price based on engine size for test data. Also show the confidence and prediction intervals for the car price.\n\ninterval_table = intervals.summary_frame(alpha=0.05)\n\n\nsns.scatterplot(x = testf.engineSize, y = pred_price,color = 'orange', s = 10)\nsns.lineplot(x = testf.engineSize, y = pred_price, color = 'red')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_lower, color = 'blue')\nsns.lineplot(x = testf.engineSize, y = interval_table.mean_ci_upper, color = 'blue',label='_nolegend_')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_lower, color = 'green')\nsns.lineplot(x = testf.engineSize, y = interval_table.obs_ci_upper, color = 'green')\nplt.legend(labels=[\"Regression line\",\"Confidence interval\", \"Prediction interval\"])\n\n<matplotlib.legend.Legend at 0x27c6cfd1070>"
  },
  {
    "objectID": "Lec2_MultipleLinearRegression.html",
    "href": "Lec2_MultipleLinearRegression.html",
    "title": "2  Multiple Linear Regression",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nDevelop a multiple linear regression model that predicts car price based on engine size, year, mileage, and mpg. Datasets to be used: Car_features_train.csv, Car_prices_train.csv\n\ntrainf = pd.read_csv('./Datasets/Car_features_train.csv')\ntrainp = pd.read_csv('./Datasets/Car_prices_train.csv')\ntrain = pd.merge(trainf,trainp)\ntrain.head()\n\n\n\n\n\n  \n    \n      \n      carID\n      brand\n      model\n      year\n      transmission\n      mileage\n      fuelType\n      tax\n      mpg\n      engineSize\n      price\n    \n  \n  \n    \n      0\n      18473\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      11\n      Diesel\n      145\n      53.3282\n      3.0\n      37980\n    \n    \n      1\n      15064\n      bmw\n      6 Series\n      2019\n      Semi-Auto\n      10813\n      Diesel\n      145\n      53.0430\n      3.0\n      33980\n    \n    \n      2\n      18268\n      bmw\n      6 Series\n      2020\n      Semi-Auto\n      6\n      Diesel\n      145\n      53.4379\n      3.0\n      36850\n    \n    \n      3\n      18480\n      bmw\n      6 Series\n      2017\n      Semi-Auto\n      18895\n      Diesel\n      145\n      51.5140\n      3.0\n      25998\n    \n    \n      4\n      18492\n      bmw\n      6 Series\n      2015\n      Automatic\n      62953\n      Diesel\n      160\n      51.4903\n      3.0\n      18990\n    \n  \n\n\n\n\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.660 \n\n\n  Model:                   OLS         Adj. R-squared:        0.660 \n\n\n  Method:             Least Squares    F-statistic:           2410. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:07:25       Log-Likelihood:      -52497. \n\n\n  No. Observations:        4960        AIC:                1.050e+05\n\n\n  Df Residuals:            4955        BIC:                1.050e+05\n\n\n  Df Model:                   4                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -3.661e+06  1.49e+05   -24.593  0.000 -3.95e+06 -3.37e+06\n\n\n  year        1817.7366    73.751    24.647  0.000  1673.151  1962.322\n\n\n  mileage       -0.1474     0.009   -16.817  0.000    -0.165    -0.130\n\n\n  mpg          -79.3126     9.338    -8.493  0.000   -97.620   -61.006\n\n\n  engineSize  1.218e+04   189.969    64.107  0.000  1.18e+04  1.26e+04\n\n\n\n\n  Omnibus:       2450.973   Durbin-Watson:         0.541 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   31060.548\n\n\n  Skew:            2.045    Prob(JB):               0.00 \n\n\n  Kurtosis:       14.557    Cond. No.           3.83e+07 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nThe model equation is: estimated car price = -3.661e6 + 1818 * year -0.15 * mileage - 79.31 * mpg + 12180 * engineSize\nPredict the car price for the cars in the test dataset. Datasets to be used: Car_features_test.csv, Car_prices_test.csv\n\ntestf = pd.read_csv('./Datasets/Car_features_test.csv')\ntestp = pd.read_csv('./Datasets/Car_prices_test.csv')\n\n\n#Using the predict() function associated with the 'model' object to make predictions of car price on test (unknown) data\npred_price = model.predict(testf)#Note that the predict() function finds the predictor 'engineSize' in the testf dataframe, and plugs it's values in the regression equation for prediction.\n\nMake a visualization that compares the predicted car prices with the actual car prices\n\nsns.scatterplot(x = testp.price, y = pred_price)\n#In case of a perfect prediction, all the points must lie on the line x = y.\nsns.lineplot(x = [0,testp.price.max()], y = [0,testp.price.max()],color='orange') #Plotting the line x = y.\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\n\nText(0, 0.5, 'Predicted price')\n\n\n\n\n\nThe prediction looks better as compared to the one with simple linear regression. This is because we have four predictors to help explain the variation in car price, instead of just one in the case of simple linear regression. Also, all the predictors have a significant relationship with price as evident from their p-values. Thus, all four of them are contributing in explaining the variation. Note the higher values of R2 as compared to the one in the case of simple linear regression.\nWhat is the RMSE of the predicted car price?\n\nnp.sqrt(((testp.price - pred_price)**2).mean())\n\n9956.82497993548\n\n\nWhat is the residual standard error based on the training data?\n\nnp.sqrt(model.mse_resid)\n\n9563.74782917604\n\n\n\nsns.scatterplot(x = model.fittedvalues, y=model.resid,color = 'orange')\nsns.lineplot(x = [pred_price.min(),pred_price.max()],y = [0,0],color = 'blue')\nplt.xlabel('Predicted price')\nplt.ylabel('Residual')\n\nText(0, 0.5, 'Residual')\n\n\n\n\n\nWill the explained variation (R-squared) in car price always increase if we add a variable?\nShould we keep on adding variables as long as the explained variation (R-squared) is increasing?\n\n#Using the ols function to create an ols object. 'ols' stands for 'Ordinary least squares'\nnp.random.seed(1)\ntrain['rand_col'] = np.random.rand(train.shape[0])\nols_object = smf.ols(formula = 'price~year+mileage+mpg+engineSize+rand_col', data = train)\nmodel = ols_object.fit()\nmodel.summary()\n\n\n\nOLS Regression Results\n\n  Dep. Variable:          price        R-squared:             0.661 \n\n\n  Model:                   OLS         Adj. R-squared:        0.660 \n\n\n  Method:             Least Squares    F-statistic:           1928. \n\n\n  Date:             Tue, 27 Dec 2022   Prob (F-statistic):    0.00  \n\n\n  Time:                 01:07:38       Log-Likelihood:      -52497. \n\n\n  No. Observations:        4960        AIC:                1.050e+05\n\n\n  Df Residuals:            4954        BIC:                1.050e+05\n\n\n  Df Model:                   5                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n                coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept  -3.662e+06  1.49e+05   -24.600  0.000 -3.95e+06 -3.37e+06\n\n\n  year        1818.1672    73.753    24.652  0.000  1673.578  1962.756\n\n\n  mileage       -0.1474     0.009   -16.809  0.000    -0.165    -0.130\n\n\n  mpg          -79.2837     9.338    -8.490  0.000   -97.591   -60.976\n\n\n  engineSize  1.218e+04   189.972    64.109  0.000  1.18e+04  1.26e+04\n\n\n  rand_col     451.1226   471.897     0.956  0.339  -474.004  1376.249\n\n\n\n\n  Omnibus:       2451.728   Durbin-Watson:         0.541 \n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   31040.331\n\n\n  Skew:            2.046    Prob(JB):               0.00 \n\n\n  Kurtosis:       14.552    Cond. No.           3.83e+07 \n\nNotes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 3.83e+07. This might indicate that there arestrong multicollinearity or other numerical problems.\n\n\nAdding a variable with random values to the model (rand_col) increased the explained variation (R-squared). This is because the model has one more parameter to tune to reduce the residual squared error (RSS). However, the p-value of rand_col suggests that its coefficient is zero. Thus, using the model with rand_col may give poorer performance on unknown data, as compared to the model without rand_col. This implies that it is not a good idea to blindly add variables in the model to increase R-squared."
  },
  {
    "objectID": "Assignment 1 (control flow).html",
    "href": "Assignment 1 (control flow).html",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "",
    "text": "B 1"
  },
  {
    "objectID": "Assignment 1 (control flow).html#instructions",
    "href": "Assignment 1 (control flow).html#instructions",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.\nThe assignment is worth 100 points, and is due on 5th October 2022 at 11:59 pm."
  },
  {
    "objectID": "Assignment 1 (control flow).html#a",
    "href": "Assignment 1 (control flow).html#a",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "B.1 1(a)",
    "text": "B.1 1(a)\nYou look at the clock and it is exactly 2pm. You set an alarm to go off in 510 hours. At what time does the alarm go off? If the answer is say, 4 pm, then your code should print - “The alarm goes off at 4 pm”.\n(5 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#b",
    "href": "Assignment 1 (control flow).html#b",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "B.2 1(b)",
    "text": "B.2 1(b)\nWrite a program to solve the general version of the above problem. Ask the user for - (1) the time now (in hours), and (2) the number of hours for the alarm to go off. Your program should output the time at which the alarm goes off. Both the user inputs must be in {0, 1, 2…, 22, 23}. If the answer is, say 14:00 hours, then your program should print - “The alarm goes off at 14:00 hours.\nShow the output of your program when the user inputs 7 as the current time, and 95 as the number of hours for the alarm to go off.\n(10 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#a-1",
    "href": "Assignment 1 (control flow).html#a-1",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "C.1 2(a)",
    "text": "C.1 2(a)\nWrite a program that checks if a positive integer is prime or not. Show the output when the program is used to check if 89 is prime or not.\n(5 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#b-1",
    "href": "Assignment 1 (control flow).html#b-1",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "C.2 2(b)",
    "text": "C.2 2(b)\nPrompt the user to input a positive integer. Write a program that prints the factors of the positive integer input by the user. Show the output of the program if the user inputs 190.\n(10 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#c",
    "href": "Assignment 1 (control flow).html#c",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "C.3 2(c)",
    "text": "C.3 2(c)\nPrompt the user to input a positive integer. Update the program in 2(b) to print the prime factors of the positive integer input by the user. Show the output of the program if the user inputs 190.\n(15 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#d",
    "href": "Assignment 1 (control flow).html#d",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "C.4 2(d)",
    "text": "C.4 2(d)\nUpdate the program in 2(c), so that it prints “Incorrect input, please enter positive integer” if the user does not enter a positive integer, and then prompts the user to input a positive integer. The program should continue to prompt the user to enter a positive integer until the user successfully enters a positive integer. Show the output of the program if the user enters “seventy” in the first attempt, “#70” in the second attempt, and 70 in the third attempt.\n(30 points)"
  },
  {
    "objectID": "Assignment 1 (control flow).html#section-2",
    "href": "Assignment 1 (control flow).html#section-2",
    "title": "Appendix A — Assignment 1 (Control flow)",
    "section": "C.5 3",
    "text": "C.5 3\nPrompt the user to input an english sentence. Write a program that counts and prints the number of words in the sentence input by the user. The program should continue to run until the user inputs the sentence - “end program”\n(20 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#instructions",
    "href": "Assignment 2 (functions).html#instructions",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.\nThe assignment is worth 100 points, and is due on 14th October 2022 at 11:59 pm."
  },
  {
    "objectID": "Assignment 2 (functions).html#a",
    "href": "Assignment 2 (functions).html#a",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.1 1(a)",
    "text": "B.1 1(a)\nWrite a function that accepts a word, and a sentence as arguments, and returns the number of times the word occurs in the sentence.\nCall the function, and print the returned value if the word is “sea”, and the sentence is “She sells sea shells on the sea shore when the sea is calm.” Note that this is just an example to check your function. Your function should work for any word and sentence.\n(10 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#b",
    "href": "Assignment 2 (functions).html#b",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.2 1(b)",
    "text": "B.2 1(b)\nAsk the user to input a sentence. Use the function in 1(a) to find the word that occurs the maximum number of times in the sentence. Print the word and its number of occurences. If multiple words occur the maximum number of times, then you can print any one of them.\nCheck your program when the user inputs the sentence, “She sells sea shells on the sea shore when the sea is calm.”. Your program must print, “The word with the maximum number of occurences is ‘sea’ and it occurs 3 times.” Note that this is just an example to check your program. Your program must work for any sentence”\n(20 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#a-1",
    "href": "Assignment 2 (functions).html#a-1",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.3 2(a)",
    "text": "B.3 2(a)\nWrite a function that checks if an integer is prime. The function must accept the integer as an argument, and return True if the integer is prime, otherwise it must return False.\nCall your function with the argument as 197.\n(4 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#b-1",
    "href": "Assignment 2 (functions).html#b-1",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.4 2(b)",
    "text": "B.4 2(b)\nWrite a function that checks if an integer is a factor of another integer. The function must accept both the integers as arguments, and return True if the integer is a factor, otherwise it must return False.\nCall your function with the arguments as (19,85).\n(3 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#c",
    "href": "Assignment 2 (functions).html#c",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.5 2(c)",
    "text": "B.5 2(c)\nPrompt the user to input a positive integer. Use the functions in 2(a) and 2(b) to print the prime factors of the integer. Your program should be no more than 4 lines (excluding the comments)\nCheck your program is the user inputs 190\n(8 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#a-2",
    "href": "Assignment 2 (functions).html#a-2",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.6 3(a)",
    "text": "B.6 3(a)\nThe tuple below named as tuple_of_words consists of words. Write a function that accepts a word, say word_to_search and the tuple_of_words as arguments, and finds if the word_to_search occurs in the tuple_of_words or not. This is very simple to do with the code word_to_search in tuple_of_words. However, this code is unfortunately very slow.\nAs the words in the tuple_of_words are already sorted in alphabetical order, we can search using a faster way, called binary search. To implement binary search in a function, start by comparing word_to_search with the middle entry in the tuple_of_words. If they are equal, then you are done and the function should return True. On the other hand, if the word_to_search comes before the middle entry, then search the first half of tuple_of_words. If it comes after the middle entry, then search the second half of tuple_of_words. Then repeat the process on the appropriate half of the tuple_of_words and continue until the word is found or there is nothing left to search, in which case the function short return False. The < and > operators can be used to alphabetically compare two strings.\nYou may write just one function or multiple functions to solve this problem.\nCheck your function if the word_to_search is:\n\n'rocket'\n'rest'\n\n(25 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#b-2",
    "href": "Assignment 2 (functions).html#b-2",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.7 3(b)",
    "text": "B.7 3(b)\nUpdate the function in 3(a) to also print the number of iterations it took to find the word_to_search or fail to find the word_to_search.\nCheck your function if the word_to_search is:\n\n'rocket'\n'rest'\n\n(10 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#c-1",
    "href": "Assignment 2 (functions).html#c-1",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.8 3(c)",
    "text": "B.8 3(c)\nUpdate the function in 3(b) to also print the index of word_to_search in tuple_of_words if the word is found in the tuple. For example, the index of ‘abacus’ is 0, the index of ‘abdomen’ is 1, and so on.\nCheck your function if the 'word_to_search' is:\n\n'rocket'\n'rest'\n\n(10 points)"
  },
  {
    "objectID": "Assignment 2 (functions).html#d",
    "href": "Assignment 2 (functions).html#d",
    "title": "Appendix B — Assignment 2 (Functions)",
    "section": "B.9 3(d)",
    "text": "B.9 3(d)\nWhat is the maximum number of iterations it may take for your function to search the word_to_search. You may either write a program to answer this question, or answer it analytically.\n(5 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html",
    "href": "Assignment 3 (data structures).html",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "",
    "text": "D 1 GDP of The USA\nUSA’s GDP per capita from 1960 to 2021 is given by the tuple T in the code cell below. The values are arranged in ascending order of the year, i.e., the first value is for 1960, the second value is for 1961, and so on.\nThe object deck defined below corresponds to a deck of cards. Estimate the probability that a five card hand will be:\nYou may check the meaning of the above terms here.\n(25 points)\nHint:\nEstimate these probabilities as follows.\nYou may use the function shuffle() from the library random to shuffle the deck everytime before pulling a hand of 5 cards.\nYou don’t need to stick to the hint if you feel you have a better way to do it. In case you have a better way, you can claim 10 bonus points for this assignment."
  },
  {
    "objectID": "Assignment 3 (data structures).html#instructions",
    "href": "Assignment 3 (data structures).html#instructions",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 5 points for clealiness and organization. The code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.\nThe assignment is worth 100 points, and is due on 21st October 2022 at 11:59 pm."
  },
  {
    "objectID": "Assignment 3 (data structures).html#a",
    "href": "Assignment 3 (data structures).html#a",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "D.1 1(a)",
    "text": "D.1 1(a)\n\nD.1.1 1(a)(i)\nUse list comprehension to produce a list of the gaps between consecutive entries in T, i.e, the increase in GDP per capita with respect to the previous year. The list with gaps should look like: [60, 177, …].\n(6 points)\n\n\nD.1.2 1(a)(ii)\nUse the list developed in 1(a)(i) to find the maximum gap size, i.e, the maximum increase in GDP per capita.\n(2 points)\n\n\nD.1.3 1(a)(iii)\nUsing list comprehension with the list developed in 1(a)(i), find the percentage of gaps that have size greater than $1000.\n(6 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#b",
    "href": "Assignment 3 (data structures).html#b",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "D.2 1(b)",
    "text": "D.2 1(b)\n\nD.2.1 1(b)(i)\nCreate a dictionary D, where the key is the year, and value for the key is the increase in GDP per capita in that year with respect to the previous year, i.e., the gaps computed in 1(a)(i).\n(6 points)\n\n\nD.2.2 1(b)(ii)\nUse the dictionary D to find the year when the GDP per capita increase was the maximum as compared to the previous year. Use the list comprehension method.\n(6 points)\nHint: […… for …. in D.items() if ……]\n\n\nD.2.3 1(b)(iii)\nUse the dictionary D to find the years when the GDP per capita decreased with respect to the previous year. Use the list comprehension method.\n(6 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#a-1",
    "href": "Assignment 3 (data structures).html#a-1",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.1 2(a)",
    "text": "E.1 2(a)\nRead the file TED_Talks.json on ted talks using the code below. You will get the data in the object TED_Talks_data. Just look at the data structure of TED_Talks_data. You will need to know how the data is structured in lists/dictionaries to answer the questions below.\n(2 points)\n\n\nCode\nimport json\nwith open(\"TED_Talks.json\", \"r\") as file:\n    TED_Talks_data=json.load(file)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#b-1",
    "href": "Assignment 3 (data structures).html#b-1",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.2 2(b)",
    "text": "E.2 2(b)\nFind the number of talks in the dataset.\n(2 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#c",
    "href": "Assignment 3 (data structures).html#c",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.3 2(c)",
    "text": "E.3 2(c)\nFind the headline, speaker and year_filmed of the talk with the highest number of views.\n(6 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#d",
    "href": "Assignment 3 (data structures).html#d",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.4 2(d)",
    "text": "E.4 2(d)\nWhat are the mean and median number of views for a talk? Can we say that the majority of talks (i.e., more than 50% of the talks) have less views than the average number of views for a talk? Justify your answer.\n(6 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#e",
    "href": "Assignment 3 (data structures).html#e",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.5 2(e)",
    "text": "E.5 2(e)\nDo at least 25% of the talks have more views than the average number of views for a talk? Justify your answer.\n(4 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#f",
    "href": "Assignment 3 (data structures).html#f",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.6 2(f)",
    "text": "E.6 2(f)\nFind the headline of the talk that received the highest number of votes in the Confusing category.\n(8 points)"
  },
  {
    "objectID": "Assignment 3 (data structures).html#g",
    "href": "Assignment 3 (data structures).html#g",
    "title": "Appendix C — Assignment 3 (Data structures)",
    "section": "E.7 2(g)",
    "text": "E.7 2(g)\nFind the headline and the year_filmed of the talk that received the highest percentage of votes in the Fascinating category.\n\\[\\text{Percentage of } \\textit{Fascinating} \\text{ votes for a ted talk} = \\frac{Number \\ of \\  votes \\ in \\ the \\ Fascinating \\ category \\ }{Total \\ votes \\ in \\ all  \\ categories}\\]\n(10 points)"
  },
  {
    "objectID": "Assignment 4 (classes).html#instructions",
    "href": "Assignment 4 (classes).html#instructions",
    "title": "Appendix D — Assignment 4 (Classes and Objects)",
    "section": "Instructions",
    "text": "Instructions\n\nYou may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity.\nDo not write your name on the assignment.\nWrite your code in the Code cells and your answer in the Markdown cells of the Jupyter notebook. Ensure that the solution is written neatly enough to understand and grade.\nUse Quarto to print the .ipynb file as HTML. You will need to open the command prompt, navigate to the directory containing the file, and use the command: quarto render filename.ipynb --to html. Submit the HTML file.\nThere are 6 points for clealiness and organization. The code should be commented and clearly written with intuitive variable names. For example, use variable names such as number_input, factor, hours, instead of a,b,xyz, etc.\nThe assignment is worth 100 points, and is due on 5th November 2022 at 11:59 pm.\nThere is a Bonus question worth 25 points. You can score 125 out of 100 in the assignment if all is correct. However, there is no partial credit for the bonus question."
  },
  {
    "objectID": "Assignment 4 (classes).html#password-manager",
    "href": "Assignment 4 (classes).html#password-manager",
    "title": "Appendix D — Assignment 4 (Classes and Objects)",
    "section": "D.1 Password Manager",
    "text": "D.1 Password Manager\nDefine a class named PasswordManagerUpdated that inherits the class PasswordManager defined in Practice exercise 1. The class PasswordManagerUpdated should have two methods, other than the constructor:\nThe method set_password(new_password) that sets a new password. The new password must only be accepted if it does not have any punctuations in it, and if it is not the same as one of the old passwords. If the new password is not acceptable, then one of the appropriate messages should be printed - (a) Cannot have punctuation in password, try again, or (b) Old password cannot be reused, try again. The new password is a parameter to this method.\nThe method suggest_password() that randomly sets and returns a password as a string comprising of 15 randomly chosen letters of the English language. Letters may be repeated as well.\n\n\nCode\npast_passwords = ['titanic1911','ibiza1972','montecarlo799']\n\n\nHint:\n\nFor generating letters, use str.lowercase()\nFor randomly selecting letters, use random.randint()\nFor iterating through punctuations, use from string import punctuation.\n\nAfter defining the class, instantiate an object of this class with past_passwords. Then:\n\nD.1.1 \nCheck the attribute old_passwords.\n(2 points)\n\n\nD.1.2 \nCheck the method get_password()\n(2 points)\n\n\nD.1.3 \nTry re-setting the password to ‘ibiza1972’, and then check the current password.\n(4 points)\n\n\nD.1.4 \nTry re-setting the password to ‘oktoberfest%2022’, and then check the current password.\n(6 points)\n\n\nD.1.5 \nTry re-setting the password to ‘oktoberfest2022’, and then check the current password.\n(2 points)\n\n\nD.1.6 \nUse the method suggest_password() to set a new password.\n(6 points)\n\n\nD.1.7 \nCheck the is_correct() method by entering the correct password as set in the previous question.\n(2 points)"
  },
  {
    "objectID": "Assignment 4 (classes).html#sms-store-manager",
    "href": "Assignment 4 (classes).html#sms-store-manager",
    "title": "Appendix D — Assignment 4 (Classes and Objects)",
    "section": "D.2 SMS store manager",
    "text": "D.2 SMS store manager\nCreate a new class, named as SMS_store_manager. This class will be used to store and manage SMSs of a person’s cellphone. An object of this class, say my_inbox, will be initialized with a list of existing messages. The class attribute messages will store the existing messages during instantiation:\n\n\nCode\nmy_inbox(existing_messages)\n\n\nEach message in the list will be represented as a dictionary. A sample message is shown below:\n\n\nCode\n{'has_been_viewed':True, 'from_number':9348593356, time_arrived='19:50', 'date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'}\n\n\nThe class should provide these methods:\n\n\nCode\nmy_inbox.add_new_arrival(from_number, time_arrived, text_of_SMS)\n#Makes new SMS dictionary, inserts it after other messages\n#in the store, i.e, in the list of messages. When creating this message, its\n#'has_been_viewed' status is set False.\n\nmy_inbox.message_count()\n#Returns the number of sms messages in my_inbox\n\nmy_inbox.get_unread_messages()\n#Returns unread messages, i.e., messages with 'has_been_viewed' status as False\n#Also changes the status of 'has_been_viewed' to True for all messages returned\n#While returning unread messages, the 'has_been_viewed' status must not be returned\n\nmy_inbox.delete(i)     # Delete the message at index i\nmy_inbox.clear()       # Delete all messages from inbox\n\n\nOnce you define the class, instantiate an object of this class, and call it harry_messages. Initialize the object with the existing messages below.\n\n\nCode\nexisting_messages = [{'has_been_viewed':False, 'from_number':8769038451, 'time':'09:30','date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'},\n                        {'has_been_viewed':False, 'from_number':9579038373, 'time':'19:30','date':'2022-10-20', 'text_of_SMS':'Your order has arrived'},\n                        {'has_been_viewed':True, 'from_number':8639568726, 'time':'10:30','date':'2022-09-30','text_of_SMS':'Card not present on American Express acc ending 54345 Sep 30 Amount $45.43 Merch: TOMATEFRESHKITCHEN.COM if unrecognized call # on Card'},\n                        {'has_been_viewed':False, 'from_number':4567653456, 'time':'11:50','date':'2022-09-15','text_of_SMS':'Hi Brooke, we are confirming your Covid vaccine appointment on Thursday at 1900 hours'},\n                        {'has_been_viewed':False, 'from_number':5646786643, 'time':'18:50','date':'2022-09-11','text_of_SMS':'Where is the party bro?'},\n                        {'has_been_viewed':False, 'from_number':9845543492, 'time':'17:10','date':'2022-09-10','text_of_SMS':'Free trial of ScanApp for 7 days for clear scanned documents, cancel anytime, $10.99 per month after 7 days'},\n                        {'has_been_viewed':True, 'from_number':8793450987, 'time':'13:20','date':'2022-08-31','text_of_SMS':'Hey Brooke, I have sent you my resume for feedback'},\n                        {'has_been_viewed':True, 'from_number':874556445, 'time':'07:20','date':'2022-08-19','text_of_SMS':'Which route are we taking for the run today?'},\n                        {'has_been_viewed':True, 'from_number':998456435, 'time':'07:20','date':'2022-07-31','text_of_SMS':'Reservation confirmed at the New York Plaza hotel for 2022-08-09 to 2022-09-14.'},\n                        {'has_been_viewed':True, 'from_number':8769038451, 'time':'07:20','date':'2022-07-25','text_of_SMS':'Lets catchup sometime, it has been so long!'},\n                        {'has_been_viewed':True, 'from_number':7739984533, 'time':'07:20','date':'2022-07-24','text_of_SMS':'Do you want to be rich today? Do you want to be your own boss? Check out beyourownboss.com. Register today for just $5!!!'},\n                        {'has_been_viewed':True, 'from_number':3443498738, 'time':'07:20','date':'2022-07-22','text_of_SMS':'Want to lose weight? Get Dr. Oz magic pills @ozpills.com. Satisfaction guaranteed.'}]\n\n\nUse the object harry_messages to:\n\nD.2.1 \nAdd a new message below:\n\n\nCode\nfrom_number=8749373884;\ntime='07:25';\ndate='2022-10-29'\ntext_of_SMS='Hey, I want my bike back.'\n\n\n(4 points)\n\n\nD.2.2 \nCount the number of messages.\n(2 points)\n\n\nD.2.3 \nPrint all the unread messages.\n(6 points)\n\n\nD.2.4 \nTry printing all the unread messages again (Nothing should show up as all messages were read in in the previous question).\n(4 points)\n\n\nD.2.5 \nClear the inbox, and then count the number of messages.\n(4 points)"
  },
  {
    "objectID": "Assignment 4 (classes).html#personalized-sms-store-manager",
    "href": "Assignment 4 (classes).html#personalized-sms-store-manager",
    "title": "Appendix D — Assignment 4 (Classes and Objects)",
    "section": "D.3 Personalized SMS store manager",
    "text": "D.3 Personalized SMS store manager\nInherit the class developed in the previous question to create a new class SMS_personalized_store_manager. This class will inherit all the methods of the class SMS_store_manager. However, it will have the following differences as compared to the parent class:\n\nInstantiation\n\nDuring instantiation, it will initialize two additional attributes - spam_words, and update_words, along with the messages attribute which stores existing messages. Use the lists below to initialize the attributes of the class.\nEach message will be tagged as spam, update, or personal as follows. If the message contains any word / phrase in the list spam_words, then it will be tagged as spam. If the messege is not tagged as spam, and it contains any word / phrase in the list update_words, then it will be tagged as update. If the message has not been tagged as spam or update, then it will be tagged as personal. The tag will appear as an additional key-value pair in the dictionary of each message, where the key will be tag, and the value will be 'spam', 'update' or 'personal'.\n\n\nA message after tagging may look like:\n\n\nCode\n{'has_been_viewed':True, 'from_number':9348593356, time_arrived='19:50', 'date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?', 'tag':'personal'}\n\n\n\n\nCode\n#Lists for initializing the attributes of the class\nexisting_messages = [{'has_been_viewed':False, 'from_number':8769038451, 'time':'09:30','date':'2022-10-27','text_of_SMS':'Hi, how about lunch at 11?'},\n                        {'has_been_viewed':False, 'from_number':9579038373, 'time':'19:30','date':'2022-10-20', 'text_of_SMS':'Your order has arrived'},\n                        {'has_been_viewed':True, 'from_number':8639568726, 'time':'10:30','date':'2022-09-30','text_of_SMS':'Card not present on American Express acc ending 54345 Sep 30 Amount $45.43 Merch: TOMATEFRESHKITCHEN.COM if unrecognized call # on Card'},\n                        {'has_been_viewed':False, 'from_number':4567653456, 'time':'11:50','date':'2022-09-15','text_of_SMS':'Hi Brooke, we are confirming your Covid vaccine appointment on Thursday at 1900 hours'},\n                        {'has_been_viewed':False, 'from_number':5646786643, 'time':'18:50','date':'2022-09-11','text_of_SMS':'Where is the party bro?'},\n                        {'has_been_viewed':False, 'from_number':9845543492, 'time':'17:10','date':'2022-09-10','text_of_SMS':'Free trial of ScanApp for 7 days for clear scanned documents, cancel anytime, $10.99 per month after 7 days'},\n                        {'has_been_viewed':True, 'from_number':8793450987, 'time':'13:20','date':'2022-08-31','text_of_SMS':'Hey Brooke, I have sent you my resume for feedback'},\n                        {'has_been_viewed':True, 'from_number':874556445, 'time':'07:20','date':'2022-08-19','text_of_SMS':'Which route are we taking for the run today?'},\n                        {'has_been_viewed':True, 'from_number':998456435, 'time':'07:20','date':'2022-07-31','text_of_SMS':'Reservation confirmed at the New York Plaza hotel for 2022-08-09 to 2022-09-14.'},\n                        {'has_been_viewed':True, 'from_number':8769038451, 'time':'07:20','date':'2022-07-25','text_of_SMS':'Lets catchup sometime, it has been so long!'},\n                        {'has_been_viewed':True, 'from_number':7739984533, 'time':'07:20','date':'2022-07-24','text_of_SMS':'Do you want to be rich today? Do you want to be your own boss? Check out beyourownboss.com. Register today for just $5, or book an appointment at 985-998-3452!!!'},\n                        {'has_been_viewed':True, 'from_number':3443498738, 'time':'07:20','date':'2022-07-22','text_of_SMS':'Want to lose weight? Get Dr. Oz magic pills @ozpills.com. Satisfaction guaranteed.'}]\nspam_words=['100% more', '100% free', '100% satisfied', 'Additional income', 'Be your own boss', 'Best price', 'Big bucks', 'Billion', 'Cash bonus', 'Cents on the dollar', 'Consolidate debt', 'Double your cash', 'Double your income', 'Earn extra cash', 'Earn money', 'Eliminate bad credit', 'Extra cash', 'Extra income', 'Expect to earn', 'Fast cash', 'Financial freedom', 'Free access', 'Free consultation', 'Free gift', 'Free hosting', 'Free info', 'Free investment', 'Free membership', 'Free money', 'Free preview', 'Free quote', 'Free trial', 'Full refund', 'Get out of debt', 'Get paid', 'Giveaway', 'Guaranteed', 'Increase sales', 'Increase traffic', 'Incredible deal', 'Lower rates', 'Lowest price', 'Make money', 'Million dollars', 'Miracle', 'Money back', 'Once in a lifetime', 'One time', 'Pennies a day', 'Potential earnings', 'Prize', 'Promise', 'Pure profit', 'Risk-free', 'Satisfaction guaranteed', 'Save big money', 'Save up to', 'Special promotion']\nupdate_words = ['Your order', 'appointment', 'Reservation confirmed', 'Card Not Present', 'Payment confirmation', 'Your payment']\n\n\n\nThe class will have two additional methods:\n\nget_unread_messages_by_category(): This method will return all the unread messages of a particular category, i.e, 'spam', 'update' or 'personal'. The method will accept the category as an argument. If no argument is specified by the user for the category, then all the unread messages must be displayed. Once unread messages are returned, they will be marked as read. While returning unread messages, the has_been_viewed status must be changed to True, but the status itself must not be returned.\nget_messages_by_category(): This method will return all the messages (both read or unread) of a particular category, i.e, 'spam', 'update' or 'personal'. The method will accept the category as an argument. If no argument is specified by the user for the category, then all the messages must be returned.\n\nThe class will modify the method add_new_arrival(self,from_number, time, date, text_of_SMS) of the parent class to tag a new message as 'spam', 'update' or 'personal'.\n\nOnce you define the class, instantiate an object of this class with the lists existing_messages, spam_words and update_words, and call it ron_messages:\n\nD.3.1 \nAdd a new message below:\n\n\nCode\nfrom_number=8749373884;\ntime='07:25';\ndate='2022-10-29'\ntext_of_SMS='Hey, I want my bike back.'\n\n\n(6 points)\n\n\nD.3.2 \nPrint all the unread messages tagged as 'personal'. Use the method get_unread_messages_by_category().\n(10 points)\n\n\nD.3.3 \nPrint all the unread messages tagged as 'update'. Use the method get_unread_messages_by_category().\n(10 points)\n\n\nD.3.4 \nPrint all the unread messages. Use the method get_unread_messages().\n(10 points)\n\n\nD.3.5 \nPrint all the messages tagged as 'spam'. Use the method get_messages_by_category().\n(7 points)\n\n\nD.3.6 \nPrint all the messages tagged as 'update'. Use the method get_messages_by_category().\n(7 points)"
  },
  {
    "objectID": "Assignment 4 (classes).html#bonus-question-creating-a-new-datatype---list-of-dictionaries",
    "href": "Assignment 4 (classes).html#bonus-question-creating-a-new-datatype---list-of-dictionaries",
    "title": "Appendix D — Assignment 4 (Classes and Objects)",
    "section": "D.4 Bonus question: Creating a new datatype - list of dictionaries",
    "text": "D.4 Bonus question: Creating a new datatype - list of dictionaries\nRead movie_data with the code below.\n\n\nCode\nimport json\nwith open(\"movies.json\", encoding=\"utf8\") as file:\n    movie_data=json.load(file)\n\n\nInherit the in-built python class list() to create a new class list_dict(). This class will be used for objects that are a list of dictionaries, where all the dictionaries in the list have the same keys. Add a method in this class, named as sort_by_dict_value() that sorts the dictionaries of the list based on the values of the desired key in the dictionaries. Sorting can be done in ascending or descending order depending on the user. The key to be used for sorting and the order (ascending / descending) will be parameters to the method sort_by_dict_value(). If the sorting order is unspecified, use ascending as default.\nInstantiate an object of the class list_dict() with movie_data.\nIf the name of the object is mov, then the method sort_by_dict_value() may be called as: mov.sort_by_dict_value(movie_parameter, ascending = True)\nwhere movie_parameter can be any key of the dictionaries, using the values of which the list of dictionaries has to be sorted.\n\nD.4.1 \nUse the method sort_by_dict_value() to sort the list of dictionaries in increasing order of Production Budget. What is the name of the 45th movie in the sorted list of dictionaries?\n\n\nD.4.2 \nUse the method sort_by_dict_value() to sort the list of dictionaries in decreasing order of Worldwide Gross. What is the name of the 2nd movie in the sorted list of dictionaries?\n(25 points - No partial credit)"
  },
  {
    "objectID": "Datasets.html",
    "href": "Datasets.html",
    "title": "Appendix E — Datasets",
    "section": "",
    "text": "Datasets used in the book can be found here"
  }
]